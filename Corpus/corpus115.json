{"url": "http://www.w3.org/TR/REC-xml/", "content": "Extensible Markup Language (XML) 1.0 (Fifth Edition) \n Extensible Markup Language (XML) 1.0 (Fifth Edition) \n W3C Recommendation 26 November 2008 \n Note:  On 7 February 2013, this specification was modified in place to replace broken links to RFC4646 and RFC4647. \n This version: \n http://www.w3.org/TR/2008/REC-xml-20081126/ \n Latest version: \n http://www.w3.org/TR/xml/ \n Previous versions: \n http://www.w3.org/TR/2008/PER-xml-20080205/ \n http://www.w3.org/TR/2006/REC-xml-20060816/ \n Editors: Tim Bray, Textuality and Netscape  <tbray@textuality.com> Jean Paoli, Microsoft  <jeanpa@microsoft.com> C. M. Sperberg-McQueen, W3C  <cmsmcq@w3.org> Eve Maler, Sun Microsystems, Inc.  <eve.maler@east.sun.com> Fran\u00e7ois Yergeau Please refer to the  errata  for this document, which may\n      include some normative corrections. The  previous errata  for this document, are also available. See also  translations . This document is also available in these non-normative formats:  XML  and\u00a0 XHTML with color-coded revision indicators . Copyright \u00a0\u00a9\u00a02008\u00a0 W3C \u00ae  ( MIT ,  ERCIM ,  Keio ), All Rights Reserved. W3C  liability ,  trademark  and  document use  rules apply. \n Abstract The Extensible Markup Language (XML) is a subset of SGML that is completely\ndescribed in this document. Its goal is to enable generic SGML to be served,\nreceived, and processed on the Web in the way that is now possible with HTML.\nXML has been designed for ease of implementation and for interoperability\nwith both SGML and HTML. \n Status of this Document This section describes the status of this document at the time of its publication.\n\t\t\t\tOther documents may supersede this document. A list of current W3C publications and the\n\t\t\t\tlatest revision of this technical report can be found in the  W3C technical reports index  at\n\t\t\t\thttp://www.w3.org/TR/. This document specifies a syntax created by subsetting an existing, widely\n\t\t\t\tused international text processing standard (Standard Generalized Markup Language,\n\t\t\t\tISO 8879:1986(E) as amended and corrected) for use on the World Wide Web.\n\t\t\t\tIt is a product of the  XML Core Working Group \n\t\t\t\tas part of the  XML Activity .\n\t\t\t\tThe English version of this specification is the only normative version. However,\n\t\t\t\tfor translations of this document, see  http://www.w3.org/2003/03/Translations/byTechnology?technology=xml . This document is a  W3C Recommendation . This fifth edition is  not  a new version of XML. As a convenience to readers,\n\t\t\t\tit incorporates the changes dictated by the accumulated errata (available at\n\t\t\t\t http://www.w3.org/XML/xml-V10-4e-errata ) to the  Fourth\n\t\t\t\tEdition of XML 1.0, dated 16 August 2006 .  In particular, erratum  [E09] \n\t\t\t\trelaxes the restrictions on element and attribute names, thereby providing in XML 1.0 the major end user benefit\n\t\t\t\tcurrently achievable only by using XML\n1.1.  As a consequence, many possible\n documents which were not well-formed according to previous editions of this\n specification are now well-formed, and previously invalid documents\nusing the newly-allowed name characters in, for example, ID\nattributes, are now valid. This edition supersedes the previous  W3C Recommendation\n\t\t\t\tof 16 August 2006 . Please report errors in this document to\nthe public  xml-editor@w3.org  mail list; public\n\t\t\t\t archives  are available. For the convenience of readers,\n\t\t\t\tan  XHTML version with color-coded revision indicators  is\n\t\t\t\talso provided; this version highlights each change due to an erratum published in the\n\t\t\t\t errata\nlist  for the previous edition, together with a link to the particular\n\t\t\t\terratum in that list. Most of the\nerrata in the list provide a rationale for the change.  The errata\nlist for this fifth edition is available at  http://www.w3.org/XML/xml-V10-5e-errata . An implementation report is available at  http://www.w3.org/XML/2008/01/xml10-5e-implementation.html .\n\t\t\t\tA  Test Suite  is maintained to help assessing conformance to this specification. This document has been reviewed by W3C Members, by software developers, and by other W3C groups and interested parties, and is endorsed by the Director as a W3C Recommendation. It is a stable document and may be used as reference material or cited from another document. W3C's role in making the Recommendation is to draw attention to the specification and to promote its widespread deployment. This enhances the functionality and interoperability of the Web. W3C maintains a  public list of\n\t\t\t\tany patent disclosures  made in connection with the deliverables of\n\t\t\t\tthe group; that page also includes instructions for disclosing a patent.\n\t\t\t\tAn individual who has actual knowledge of a patent which the individual\n\t\t\t\tbelieves contains  Essential\n\t\t\t\tClaim(s)  must disclose the information in accordance with \n\t\t\t\t section 6 of the W3C Patent Policy . \n Table of Contents 1  Introduction \n\u00a0\u00a0\u00a0\u00a01.1  Origin and Goals \n\u00a0\u00a0\u00a0\u00a01.2  Terminology \n2  Documents \n\u00a0\u00a0\u00a0\u00a02.1  Well-Formed XML Documents \n\u00a0\u00a0\u00a0\u00a02.2  Characters \n\u00a0\u00a0\u00a0\u00a02.3  Common Syntactic Constructs \n\u00a0\u00a0\u00a0\u00a02.4  Character Data and Markup \n\u00a0\u00a0\u00a0\u00a02.5  Comments \n\u00a0\u00a0\u00a0\u00a02.6  Processing Instructions \n\u00a0\u00a0\u00a0\u00a02.7  CDATA Sections \n\u00a0\u00a0\u00a0\u00a02.8  Prolog and Document Type Declaration \n\u00a0\u00a0\u00a0\u00a02.9  Standalone Document Declaration \n\u00a0\u00a0\u00a0\u00a02.10  White Space Handling \n\u00a0\u00a0\u00a0\u00a02.11  End-of-Line Handling \n\u00a0\u00a0\u00a0\u00a02.12  Language Identification \n3  Logical Structures \n\u00a0\u00a0\u00a0\u00a03.1  Start-Tags, End-Tags, and Empty-Element Tags \n\u00a0\u00a0\u00a0\u00a03.2  Element Type Declarations \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.2.1  Element Content \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.2.2  Mixed Content \n\u00a0\u00a0\u00a0\u00a03.3  Attribute-List Declarations \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.3.1  Attribute Types \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.3.2  Attribute Defaults \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a03.3.3  Attribute-Value Normalization \n\u00a0\u00a0\u00a0\u00a03.4  Conditional Sections \n4  Physical Structures \n\u00a0\u00a0\u00a0\u00a04.1  Character and Entity References \n\u00a0\u00a0\u00a0\u00a04.2  Entity Declarations \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.2.1  Internal Entities \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.2.2  External Entities \n\u00a0\u00a0\u00a0\u00a04.3  Parsed Entities \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.3.1  The Text Declaration \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.3.2  Well-Formed Parsed Entities \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.3.3  Character Encoding in Entities \n\u00a0\u00a0\u00a0\u00a04.4  XML Processor Treatment of Entities and References \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.1  Not Recognized \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.2  Included \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.3  Included If Validating \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.4  Forbidden \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.5  Included in Literal \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.6  Notify \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.7  Bypassed \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.8  Included as PE \n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04.4.9  Error \n\u00a0\u00a0\u00a0\u00a04.5  Construction of Entity Replacement Text \n\u00a0\u00a0\u00a0\u00a04.6  Predefined Entities \n\u00a0\u00a0\u00a0\u00a04.7  Notation Declarations \n\u00a0\u00a0\u00a0\u00a04.8  Document Entity \n5  Conformance \n\u00a0\u00a0\u00a0\u00a05.1  Validating and Non-Validating Processors \n\u00a0\u00a0\u00a0\u00a05.2  Using XML Processors \n6  Notation \n Appendices A  References \n\u00a0\u00a0\u00a0\u00a0A.1  Normative References \n\u00a0\u00a0\u00a0\u00a0A.2  Other References \nB  Character Classes \nC  XML and SGML  (Non-Normative) \nD  Expansion of Entity and Character References  (Non-Normative) \nE  Deterministic Content Models  (Non-Normative) \nF  Autodetection of Character Encodings  (Non-Normative) \n\u00a0\u00a0\u00a0\u00a0F.1  Detection Without External Encoding Information \n\u00a0\u00a0\u00a0\u00a0F.2  Priorities in the Presence of External Encoding Information \nG  W3C XML Working Group  (Non-Normative) \nH  W3C XML Core Working Group  (Non-Normative) \nI  Production Notes  (Non-Normative) \nJ  Suggestions for XML Names  (Non-Normative) \n 1 Introduction Extensible Markup Language, abbreviated XML, describes a class of data\nobjects called  XML documents  and partially\ndescribes the behavior of computer programs which process them. XML is an\napplication profile or restricted form of SGML, the Standard Generalized Markup\nLanguage  [ISO 8879] . By construction, XML documents are conforming\nSGML documents. XML documents are made up of storage units called  entities ,\nwhich contain either parsed or unparsed data. Parsed data is made up of  characters , some of which form  character\ndata , and some of which form  markup .\nMarkup encodes a description of the document's storage layout and logical\nstructure. XML provides a mechanism to impose constraints on the storage layout\nand logical structure. \n\t\t\t\t[ Definition : A software module called\nan  XML processor  is used to read XML documents and provide access\nto their content and structure.]\n\t\t\t\t[ Definition : It\nis assumed that an XML processor is doing its work on behalf of another module,\ncalled the  application .] This specification describes\nthe required behavior of an XML processor in terms of how it must read XML\ndata and the information it must provide to the application. \n 1.1 Origin and Goals XML was developed by an XML Working Group (originally known as the SGML\nEditorial Review Board) formed under the auspices of the World Wide Web Consortium\n(W3C) in 1996. It was chaired by Jon Bosak of Sun Microsystems with the active\nparticipation of an XML Special Interest Group (previously known as the SGML\nWorking Group) also organized by the W3C. The membership of the XML Working\nGroup is given in an appendix. Dan Connolly served as the Working Group's contact with\nthe W3C. The design goals for XML are: XML shall be straightforwardly usable over the Internet. XML shall support a wide variety of applications. XML shall be compatible with SGML. It shall be easy to write programs which process XML documents. The number of optional features in XML is to be kept to the absolute\nminimum, ideally zero. XML documents should be human-legible and reasonably clear. The XML design should be prepared quickly. The design of XML shall be formal and concise. XML documents shall be easy to create. Terseness in XML markup is of minimal importance. This specification, together with associated standards (Unicode  [Unicode] \n\t\t\t\t\tand ISO/IEC 10646  [ISO/IEC 10646]  for characters, Internet  BCP 47 \n [IETF BCP 47]   and the Language Subtag Registry  [IANA-LANGCODES]  for language\n\t\t\t\t\tidentification tags), provides\nall the information necessary to understand XML Version 1.0 and\nconstruct computer programs to process it. This version of the XML specification may be distributed freely, as long as\nall text and legal notices remain intact. \n 1.2 Terminology The terminology used to describe XML documents is defined in the body of\nthis specification. The key words  MUST ,  MUST NOT ,\n REQUIRED ,  SHALL ,  SHALL NOT ,\n SHOULD ,  SHOULD NOT ,  RECOMMENDED ,\n MAY , and  OPTIONAL , when  EMPHASIZED ,\nare to be interpreted as described in  [IETF RFC 2119] . In addition, the terms defined\nin the following list are used in building\nthose definitions and in describing the actions of an XML processor: error \n\t\t\t\t\t\t\t\t\t[ Definition : A violation of the rules of this specification;\nresults are undefined. Unless otherwise specified, failure to observe a prescription of this specification indicated by one of the keywords  MUST ,  REQUIRED ,  MUST NOT ,  SHALL  and  SHALL NOT  is an error.  Conforming software  MAY  detect and report an error\nand  MAY  recover from it.]\n\t\t\t\t\t\t\t\t fatal error \n\t\t\t\t\t\t\t\t\t[ Definition : An error which a conforming  XML processor \n MUST  detect and report to the application.\nAfter encountering a fatal error, the processor  MAY  continue processing the\ndata to search for further errors and  MAY  report such errors to the application.\nIn order to support correction of errors, the processor  MAY  make unprocessed\ndata from the document (with intermingled character data and markup) available\nto the application. Once a fatal error is detected, however, the processor\n MUST NOT  continue normal processing (i.e., it  MUST NOT  continue to pass character\ndata and information about the document's logical structure to the application\nin the normal way).]\n\t\t\t\t\t\t\t\t at user option \n\t\t\t\t\t\t\t\t\t[ Definition : Conforming software\n MAY  or  MUST  (depending on the modal verb in the sentence) behave as described;\nif it does, it  MUST  provide users a means to enable or disable the behavior\ndescribed.]\n\t\t\t\t\t\t\t\t validity constraint \n\t\t\t\t\t\t\t\t\t[ Definition : A rule which applies to\nall  valid  XML documents. Violations of validity\nconstraints are errors; they  MUST , at user option, be reported by  validating XML processors .]\n\t\t\t\t\t\t\t\t well-formedness constraint \n\t\t\t\t\t\t\t\t\t[ Definition : A rule which applies\nto all  well-formed  XML documents. Violations\nof well-formedness constraints are  fatal errors .]\n\t\t\t\t\t\t\t\t match \n\t\t\t\t\t\t\t\t\t[ Definition : (Of strings or names:) Two strings\nor names being compared are identical. Characters with multiple possible\nrepresentations in ISO/IEC 10646 (e.g. characters with both precomposed and\nbase+diacritic forms) match only if they have the same representation in both\nstrings. No\ncase folding is performed. (Of strings and rules in the grammar:) A string\nmatches a grammatical production if it belongs to the language generated by\nthat production. (Of content and content models:) An element matches its declaration\nwhen it conforms in the fashion described in the constraint  [VC:  Element Valid ] .]\n\t\t\t\t\t\t\t\t for compatibility \n\t\t\t\t\t\t\t\t\t[ Definition : Marks\na sentence describing a feature of XML included solely to ensure\nthat XML remains compatible with SGML.]\n\t\t\t\t\t\t\t\t for interoperability \n\t\t\t\t\t\t\t\t\t[ Definition : Marks\na sentence describing a non-binding recommendation included to increase\nthe chances that XML documents can be processed by the existing installed\nbase of SGML processors which predate the WebSGML Adaptations Annex to ISO 8879.]\n 2 Documents \n\t\t\t\t[ Definition :  A data object is an  XML\ndocument  if it is  well-formed ,\nas defined in this specification. In addition, the XML document is\n valid  if it meets certain further constraints.]\n\t\t\t Each XML document has both a logical and a physical structure. Physically,\nthe document is composed of units called  entities .\nAn entity may\n\t\t\t\t refer  to other entities to\ncause their inclusion in the document. A document begins in a \"root\"\nor  document entity . Logically, the document\nis composed of declarations, elements, comments, character references, and\nprocessing instructions, all of which are indicated in the document by explicit\nmarkup. The logical and physical structures  MUST  nest properly, as described\nin  4.3.2 Well-Formed Parsed Entities . \n 2.1 Well-Formed XML Documents \n\t\t\t\t\t[ Definition :  A textual object is a  well-formed \nXML document if:]\n\t\t\t\t Taken as a whole, it matches the production labeled  document . It meets all the well-formedness constraints given in this specification. Each of the  parsed entities \nwhich is referenced directly or indirectly within the document is  well-formed . \n Document [1]\u00a0\u00a0\u00a0 document \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n prolog \n element \n Misc * Matching the  document  production implies that: It contains one or more  elements . \n\t\t\t\t\t\t\t[ Definition : There is exactly one element,\ncalled the  root , or document element, no part of which appears\nin the  content  of any other element.] For\nall other elements, if the  start-tag  is in\nthe content of another element, the  end-tag \nis in the content of the same element. More simply stated, the elements,\ndelimited by start- and end-tags, nest properly within each other. \n\t\t\t\t\t[ Definition : As a consequence of this,\nfor each non-root element  C  in the document, there is one other element  P \nin the document such that  C  is in the content of  P , but\nis not in the content of any other element that is in the content of  P .  P \nis referred to as the  parent  of  C , and  C  as\na  child  of  P .]\n 2.2 Characters \n\t\t\t\t\t[ Definition : A parsed entity contains  text ,\na sequence of  characters , which may\nrepresent markup or character data.]\n\t\t\t\t\t[ Definition : A  character \nis an atomic unit of text as specified by ISO/IEC 10646:2000  [ISO/IEC 10646] . Legal characters are tab, carriage\nreturn, line feed, and the legal characters\nof Unicode and ISO/IEC 10646. The\nversions of these standards cited in  A.1 Normative References  were\ncurrent at the time this document was prepared. New characters may be added\nto these standards by amendments or new editions. Consequently, XML processors\n MUST  accept any character in the range specified for  Char .\n]\n Character Range [2]\u00a0\u00a0\u00a0 Char \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character, excluding the surrogate blocks, FFFE, and FFFF. */ The mechanism for encoding character code points into bit patterns may\nvary from entity to entity. All XML processors  MUST  accept the UTF-8 and UTF-16\nencodings of Unicode  [Unicode] ;\nthe mechanisms for signaling which of the two is in use,\nor for bringing other encodings into play, are discussed later, in  4.3.3 Character Encoding in Entities . Note: Document authors are encouraged to avoid\n\"compatibility characters\", as defined\nin section  2.3  of  [Unicode] . The characters defined in the following ranges are also\ndiscouraged. They are either control characters or permanently undefined Unicode\ncharacters: [#x7F-#x84], [#x86-#x9F], [#xFDD0-#xFD E F],\n[#x1FFFE-#x1FFFF], [#x2FFFE-#x2FFFF], [#x3FFFE-#x3FFFF],\n[#x4FFFE-#x4FFFF], [#x5FFFE-#x5FFFF], [#x6FFFE-#x6FFFF],\n[#x7FFFE-#x7FFFF], [#x8FFFE-#x8FFFF], [#x9FFFE-#x9FFFF],\n[#xAFFFE-#xAFFFF], [#xBFFFE-#xBFFFF], [#xCFFFE-#xCFFFF],\n[#xDFFFE-#xDFFFF], [#xEFFFE-#xEFFFF], [#xFFFFE-#xFFFFF],\n[#x10FFFE-#x10FFFF]. \n 2.3 Common Syntactic Constructs This section defines some symbols used widely in the grammar. \n S  (white space) consists of one or more space (#x20)\ncharacters, carriage returns, line feeds, or tabs. \n White Space [3]\u00a0\u00a0\u00a0 S \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 (#x20 | #x9 | #xD | #xA)+ Note: The presence of #xD in the above production is\n\tmaintained purely for backward compatibility with the\n\t First Edition .\n\tAs explained in  2.11 End-of-Line Handling ,\n\tall #xD characters literally present in an XML document\n\tare either removed or replaced by #xA characters before\n\tany other processing is done. The only way to get a #xD character to match this production is to\n  use a character reference in an entity value literal. An  Nmtoken  (name token) is any mixture of name\ncharacters. [ Definition : A  Name  is an  Nmtoken  with a restricted set of initial characters.]  Disallowed initial characters for  Names  include digits, diacritics, the full stop and the hyphen. Names beginning with the string \" xml \",\nor with any string which would match  (('X'|'x') ('M'|'m') ('L'|'l')) ,\nare reserved for standardization in this or future versions of this specification. Note: The\nNamespaces in XML Recommendation  [XML Names]  assigns a meaning\nto names containing colon characters. Therefore, authors should not use the\ncolon in XML names except for namespace purposes, but XML processors must\naccept the colon as a name character. The first character of a  Name   MUST  be a  NameStartChar , and any\n\t\t\t\t\tother characters  MUST  be  NameChars ; this mechanism is used to\n\t\t\t\t\tprevent names from beginning with European (ASCII) digits or with\n\t\t\t\t\tbasic combining characters. Almost all characters are permitted in\n\t\t\t\t\tnames, except those which either are or reasonably could be used as\n\t\t\t\t\tdelimiters. The intention is to be inclusive rather than exclusive,\n\t\t\t\t\tso that writing systems not yet encoded in Unicode can be used in\n\t\t\t\t\tXML names. See  J Suggestions for XML Names  for suggestions on the creation of\n\t\t\t\t\tnames. Document authors are encouraged to use names which are\n\t\t\t\t\tmeaningful words or combinations of words in natural languages, and\n\t\t\t\t\tto avoid symbolic or white space characters in names. Note that\n\t\t\t\t\tCOLON, HYPHEN-MINUS, FULL STOP (period), LOW LINE (underscore), and\n\t\t\t\t\tMIDDLE DOT are explicitly permitted. The ASCII symbols and punctuation marks, along with a fairly\n\t\t\t\t\tlarge group of Unicode symbol characters, are excluded from names\n\t\t\t\t\tbecause they are more useful as delimiters in contexts where XML\n\t\t\t\t\tnames are used outside XML documents; providing this group gives\n\t\t\t\t\tthose contexts hard guarantees about what  cannot  be part of\n\t\t\t\t\tan XML name. The character #x037E, GREEK QUESTION MARK, is excluded\n\t\t\t\t\tbecause when normalized it becomes a semicolon, which could change\n\t\t\t\t\tthe meaning of entity references. \n Names and Tokens [4]\u00a0\u00a0\u00a0 NameStartChar \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF] [4a]\u00a0\u00a0\u00a0 NameChar \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 NameStartChar  | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040] [5]\u00a0\u00a0\u00a0 Name \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 NameStartChar  ( NameChar )* [6]\u00a0\u00a0\u00a0 Names \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 Name  (#x20  Name )* [7]\u00a0\u00a0\u00a0 Nmtoken \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ( NameChar )+ [8]\u00a0\u00a0\u00a0 Nmtokens \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 Nmtoken  (#x20  Nmtoken )* Note: The  Names \nand  Nmtokens  productions are used to define the validity\nof tokenized attribute values after normalization (see  3.3.1 Attribute Types ). Literal data is any quoted string not containing the quotation mark used\nas a delimiter for that string. Literals are used for specifying the content\nof internal entities ( EntityValue ), the values\nof attributes ( AttValue ), and external identifiers\n( SystemLiteral ). Note that a  SystemLiteral \ncan be parsed without scanning for markup. \n Literals [9]\u00a0\u00a0\u00a0 EntityValue \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '\"' ([^%&\"] |  PEReference \n|  Reference )* '\"'  |\u00a0 \"'\" ([^%&'] |  PEReference  |  Reference )* \"'\" [10]\u00a0\u00a0\u00a0 AttValue \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '\"' ([^<&\"] |  Reference )*\n'\"'  |\u00a0 \"'\" ([^<&'] |  Reference )*\n\"'\" [11]\u00a0\u00a0\u00a0 SystemLiteral \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ('\"' [^\"]* '\"') |\u00a0(\"'\" [^']* \"'\")  [12]\u00a0\u00a0\u00a0 PubidLiteral \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '\"'  PubidChar * '\"'\n| \"'\" ( PubidChar  - \"'\")* \"'\" [13]\u00a0\u00a0\u00a0 PubidChar \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 #x20 | #xD | #xA |\u00a0[a-zA-Z0-9] |\u00a0[-'()+,./:=?;!*#@$_%] Note: Although\nthe  EntityValue  production allows the definition\nof a general entity consisting of a single explicit  <  in the literal\n(e.g.,  <!ENTITY mylt \"<\"> ), it is strongly advised to avoid\nthis practice since any reference to that entity will cause a well-formedness\nerror. \n 2.4 Character Data and Markup \n Text  consists of intermingled  character data  and markup. [ Definition : \n\t\t\t\t\t\t Markup  takes the form of  start-tags ,  end-tags ,  empty-element tags ,  entity references ,  character\nreferences ,  comments ,  CDATA section  delimiters,  document\ntype declarations ,  processing instructions ,  XML declarations ,  text declarations ,\nand any white space that is at the top level of the document entity (that\nis, outside the document element and not inside any other markup).]\n\t\t\t\t\t[ Definition : All text that is not markup\nconstitutes the  character data  of the document.]\n\t\t\t\t The ampersand character (&) and the left angle bracket (<)  MUST NOT  appear\nin their literal form, except when used as markup delimiters, or\nwithin a  comment , a  processing\ninstruction , or a  CDATA section .\nIf they are needed elsewhere, they  MUST  be  escaped \nusing either  numeric character references \nor the strings \"\n\t\t\t\t\t\t &amp; \n\t\t\t\t\t\" and \"\n\t\t\t\t\t\t &lt; \n\t\t\t\t\t\"\nrespectively. The right angle bracket (>) may be represented using the string \"\n\t\t\t\t\t\t &gt; \n\t\t\t\t\t\",\nand  MUST ,  for compatibility , be escaped\nusing either \"\n\t\t\t\t\t\t &gt; \n\t\t\t\t\t\" or a character reference when it\nappears in the string \"\n\t\t\t\t\t\t ]]> \n\t\t\t\t\t\" in content, when\nthat string is not marking the end of a  CDATA\nsection . In the content of elements, character data is any string of characters\nwhich does not contain the start-delimiter of any markup and does not include the CDATA-section-close\ndelimiter, \"\n\t\t\t\t\t\t ]]> \n\t\t\t\t\t\". In a CDATA section,\ncharacter data is any string of characters not including the CDATA-section-close\ndelimiter, \"\n\t\t\t\t\t\t ]]> \n\t\t\t\t\t\". To allow attribute values to contain both single and double quotes, the\napostrophe or single-quote character (') may be represented as \"\n\t\t\t\t\t\t &apos; \n\t\t\t\t\t\",\nand the double-quote character (\") as \"\n\t\t\t\t\t\t &quot; \n\t\t\t\t\t\". \n Character Data [14]\u00a0\u00a0\u00a0 CharData \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 [^<&]* - ([^<&]* ']]>' [^<&]*) \n 2.5 Comments \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Comments  may appear\nanywhere in a document outside other  markup ;\nin addition, they may appear within the document type declaration at places\nallowed by the grammar. They are not part of the document's  character\ndata ; an XML processor  MAY , but need not, make it possible for an\napplication to retrieve the text of comments.  For\ncompatibility , the string \"\n\t\t\t\t\t\t\t -- \n\t\t\t\t\t\t\" (double-hyphen)\n MUST NOT  occur within comments.] Parameter\nentity references  MUST NOT  be recognized within comments. \n Comments [15]\u00a0\u00a0\u00a0 Comment \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!--' (( Char  - '-') | ('-'\n( Char  - '-')))* '-->' An example of a comment: <!-- declarations for <head> & <body> --> Note\nthat the grammar does not allow a comment ending in  ---> . The\nfollowing example is  not  well-formed. <!-- B+, B, or B---> \n 2.6 Processing Instructions \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Processing instructions \n(PIs) allow documents to contain instructions for applications.]\n Processing Instructions [16]\u00a0\u00a0\u00a0 PI \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<?'  PITarget  ( S \n( Char * - ( Char * '?>'  Char *)))? '?>' [17]\u00a0\u00a0\u00a0 PITarget \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n Name  - (('X' | 'x') ('M' |\n'm') ('L' | 'l')) PIs are not part of the document's  character\ndata , but  MUST  be passed through to the application. The PI begins\nwith a target ( PITarget ) used to identify the application\nto which the instruction is directed. The target names \"\n\t\t\t\t\t\t XML \n\t\t\t\t\t\", \"\n\t\t\t\t\t\t xml \n\t\t\t\t\t\",\nand so on are reserved for standardization in this or future versions of this\nspecification. The XML  Notation  mechanism\nmay be used for formal declaration of PI targets. Parameter\nentity references  MUST NOT  be recognized within processing instructions. \n 2.7 CDATA Sections \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t CDATA sections  may occur anywhere character data may occur; they are used to escape blocks\nof text containing characters which would otherwise be recognized as markup.\nCDATA sections begin with the string \"\n\t\t\t\t\t\t\t <![CDATA[ \n\t\t\t\t\t\t\"\nand end with the string \"\n\t\t\t\t\t\t\t ]]> \n\t\t\t\t\t\t\":]\n CDATA Sections [18]\u00a0\u00a0\u00a0 CDSect \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n CDStart \n CData \n CDEnd \n [19]\u00a0\u00a0\u00a0 CDStart \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<![CDATA[' [20]\u00a0\u00a0\u00a0 CData \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ( Char * - ( Char *\n']]>'  Char *))  [21]\u00a0\u00a0\u00a0 CDEnd \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ']]>' Within a CDATA section, only the  CDEnd  string is\nrecognized as markup, so that left angle brackets and ampersands may occur\nin their literal form; they need not (and cannot) be escaped using \"\n\t\t\t\t\t\t &lt; \n\t\t\t\t\t\"\nand \"\n\t\t\t\t\t\t &amp; \n\t\t\t\t\t\". CDATA sections cannot nest. An example of a CDATA section, in which \"\n\t\t\t\t\t\t <greeting> \n\t\t\t\t\t\"\nand \"\n\t\t\t\t\t\t </greeting> \n\t\t\t\t\t\" are recognized as  character data , not  markup : <![CDATA[<greeting>Hello, world!</greeting>]]>  \n 2.8 Prolog and Document Type Declaration \n\t\t\t\t\t[ Definition : XML documents  SHOULD \nbegin with an  XML declaration  which specifies the version of\nXML being used.] For example, the following is a complete XML document,  well-formed  but not  valid : <?xml version=\"1.0\"?>\n<greeting>Hello, world!</greeting>  and so is this: <greeting>Hello, world!</greeting> The function of the markup in an XML document is to describe its storage and\nlogical structure and to associate attribute\nname-value pairs with its logical structures. XML provides a mechanism, the\n document\ntype declaration , to define constraints on the logical structure\nand to support the use of predefined storage units. [ Definition : An XML document is  valid  if it has an associated\ndocument type declaration and if the document complies with the constraints\nexpressed in it.]\n\t\t\t\t The document type declaration  MUST  appear before the first  element \nin the document. \n Prolog [22]\u00a0\u00a0\u00a0 prolog \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n XMLDecl ?  Misc *\n( doctypedecl \n Misc *)? [23]\u00a0\u00a0\u00a0 XMLDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<?xml'  VersionInfo \n EncodingDecl ?  SDDecl ?  S ? '?>' [24]\u00a0\u00a0\u00a0 VersionInfo \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n S  'version'  Eq \n(\"'\"  VersionNum  \"'\" | '\"'  VersionNum \n'\"') [25]\u00a0\u00a0\u00a0 Eq \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n S ? '='  S ? [26]\u00a0\u00a0\u00a0 VersionNum \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '1.' [0-9]+ [27]\u00a0\u00a0\u00a0 Misc \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n Comment  |  PI \n|  S \n Even though the  VersionNum  production matches\n\t\t\t\t\tany version number of the form '1.x', XML 1.0 documents  SHOULD NOT  specify a version number other than '1.0'. Note: When an XML 1.0 processor encounters a document that specifies\n\t\t\t\t\t\ta 1.x version number other than '1.0', it will process it as\n\t\t\t\t\t\ta 1.0 document.  This means that an XML 1.0 processor will accept\n\t\t\t\t\t\t1.x documents provided they do not use any non-1.0 features. \n\t\t\t\t\t[ Definition : The XML  document\ntype declaration  contains or points to  markup\ndeclarations  that provide a grammar for a class of documents. This\ngrammar is known as a document type definition, or  DTD . The document\ntype declaration can point to an external subset (a special kind of  external entity ) containing markup declarations,\nor can contain the markup declarations directly in an internal subset, or\ncan do both. The DTD for a document consists of both subsets taken together.]\n\t\t\t\t\t[ Definition :  A  markup declaration \nis an  element type declaration , an  attribute-list declaration , an  entity\ndeclaration , or a  notation declaration .]\nThese declarations may be contained in whole or in part within  parameter\nentities , as described in the well-formedness and validity constraints\nbelow. For further\ninformation, see  4 Physical Structures . \n Document Type Definition [28]\u00a0\u00a0\u00a0 doctypedecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!DOCTYPE'  S \n Name \n( S \n ExternalID )?  S ?\n('['  intSubset  ']'  S ?)? '>' [VC: Root Element Type] [WFC: External Subset] [28a]\u00a0\u00a0\u00a0 DeclSep \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n PEReference  |  S \n [WFC: PE Between Declarations] [28b]\u00a0\u00a0\u00a0 intSubset \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ( markupdecl  |  DeclSep )* [29]\u00a0\u00a0\u00a0 markupdecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n elementdecl  |  AttlistDecl  |  EntityDecl \n|  NotationDecl  |  PI  |  Comment \n [VC: Proper Declaration/PE Nesting] [WFC: PEs in Internal Subset] Note\nthat it is possible to construct a well-formed document containing a  doctypedecl \nthat neither points to an external subset nor contains an internal subset. The markup declarations may be made up in whole or in part of the  replacement text  of  parameter\nentities . The productions later in this specification for individual\nnonterminals ( elementdecl ,  AttlistDecl ,\nand so on) describe the declarations  after  all the parameter\nentities have been  included . Parameter\nentity references are recognized anywhere in the DTD (internal and external\nsubsets and external parameter entities), except in literals, processing instructions,\ncomments, and the contents of ignored conditional sections (see  3.4 Conditional Sections ).\nThey are also recognized in entity value literals. The use of parameter entities\nin the internal subset is restricted as described below. Validity constraint: Root Element Type The  Name \nin the document type declaration  MUST  match the element type of the  root element . Validity constraint: Proper Declaration/PE Nesting Parameter-entity  replacement text \n MUST  be properly nested with markup declarations. That is to say, if either\nthe first character or the last character of a markup declaration ( markupdecl \nabove) is contained in the replacement text for a  parameter-entity\nreference , both  MUST  be contained in the same replacement text. Well-formedness constraint: PEs in Internal Subset In\nthe internal DTD subset,  parameter-entity references \n MUST NOT  occur within markup declarations; they may occur where markup declarations can occur.\n(This does not apply to references that occur in external parameter entities\nor to the external subset.) Well-formedness constraint: External Subset The external subset, if any,  MUST  match the production for  extSubset . Well-formedness constraint: PE Between Declarations The replacement text of a parameter entity reference\nin a  DeclSep \n MUST  match the production  extSubsetDecl . Like the internal subset, the external subset and any external parameter\nentities referenced\nin a  DeclSep \n MUST  consist of a series of\ncomplete markup declarations of the types allowed by the non-terminal symbol  markupdecl , interspersed with white space or  parameter-entity references . However, portions of\nthe contents of the external subset or of these\nexternal parameter entities may conditionally be ignored by using the  conditional section  construct; this is not\nallowed in the internal subset but is\nallowed in external parameter entities referenced in the internal subset. \n External Subset [30]\u00a0\u00a0\u00a0 extSubset \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n TextDecl ?  extSubsetDecl \n [31]\u00a0\u00a0\u00a0 extSubsetDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 (  markupdecl  |  conditionalSect  |  DeclSep )* The external subset and external parameter entities also differ from the\ninternal subset in that in them,  parameter-entity\nreferences  are permitted  within  markup declarations,\nnot only  between  markup declarations. An example of an XML document with a document type declaration: <?xml version=\"1.0\"?>\n<!DOCTYPE greeting SYSTEM \"hello.dtd\">\n<greeting>Hello, world!</greeting>  The  system identifier \n\t\t\t\t\t\"\n\t\t\t\t\t\t hello.dtd \n\t\t\t\t\t\"\ngives the address (a URI reference) of a DTD for the document. The declarations can also be given locally, as in this example: <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE greeting [\n  <!ELEMENT greeting (#PCDATA)>\n]>\n<greeting>Hello, world!</greeting> If both the external and internal subsets are used, the internal subset\n MUST  be considered to occur before the external subset. \nThis has the effect that entity and attribute-list declarations in the internal\nsubset take precedence over those in the external subset. \n 2.9 Standalone Document Declaration Markup declarations can affect the content of the document, as passed from\nan  XML processor  to an application; examples\nare attribute defaults and entity declarations. The standalone document declaration,\nwhich may appear as a component of the XML declaration, signals whether or\nnot there are such declarations which appear external to the  document\nentity \nor in parameter entities. [ Definition : An  external\nmarkup declaration  is defined as a markup declaration occurring in\nthe external subset or in a parameter entity (external or internal, the latter\nbeing included because non-validating processors are not required to read\nthem).]\n Standalone Document Declaration [32]\u00a0\u00a0\u00a0 SDDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n S  'standalone'  Eq \n((\"'\" ('yes' | 'no') \"'\") | ('\"' ('yes' | 'no') '\"'))  [VC: Standalone Document Declaration] In a standalone document declaration, the value \"yes\" indicates\nthat there are no  external markup declarations  which\naffect the information passed from the XML processor to the application. The\nvalue \"no\" indicates that there are or may be such external\nmarkup declarations. Note that the standalone document declaration only denotes\nthe presence of external  declarations ; the presence, in a document,\nof references to external  entities , when those entities are internally\ndeclared, does not change its standalone status. If there are no external markup declarations, the standalone document declaration\nhas no meaning. If there are external markup declarations but there is no\nstandalone document declaration, the value \"no\" is assumed. Any XML document for which  standalone=\"no\"  holds can be converted\nalgorithmically to a standalone document, which may be desirable for some\nnetwork delivery applications. Validity constraint: Standalone Document Declaration The\nstandalone document declaration  MUST  have the value \"no\" if\nany external markup declarations contain declarations of: attributes with  default  values,\nif elements to which these attributes apply appear in the document without\nspecifications of values for these attributes, or entities (other than  amp ,\n lt ,\n gt ,\n apos ,\n quot ), if  references \nto those entities appear in the document, or attributes with\ntokenized types, where the\nattribute appears in the document with a value such that\n normalization \nwill produce a different value from that which would be produced\nin the absence of the declaration, or element types with  element content ,\nif white space occurs directly within any instance of those types. An example XML declaration with a standalone document declaration: <?xml version=\"1.0\" standalone='yes'?> \n 2.10 White Space Handling In editing XML documents, it is often convenient to use \"white space\"\n(spaces, tabs, and blank lines)\nto set apart the markup for greater readability. Such white space is typically\nnot intended for inclusion in the delivered version of the document. On the\nother hand, \"significant\" white space that should be preserved\nin the delivered version is common, for example in poetry and source code. An  XML processor \n MUST  always pass\nall characters in a document that are not markup through to the application.\nA   validating XML processor \n MUST  also\ninform the application which of these characters constitute white space appearing\nin  element content . A special  attribute  named  xml:space  may be attached to an element to signal an intention that in that element,\nwhite space should be preserved by applications. In valid documents, this\nattribute, like any other,  MUST  be  declared \nif it is used. When declared, it  MUST  be given as an  enumerated\ntype  whose values\nare one or both of \"default\" and \"preserve\".\nFor example: <!ATTLIST poem  xml:space (default|preserve) 'preserve'>\n<!ATTLIST pre xml:space (preserve) #FIXED 'preserve'> The value \"default\" signals that applications' default white-space\nprocessing modes are acceptable for this element; the value \"preserve\"\nindicates the intent that applications preserve all the white space. This\ndeclared intent is considered to apply to all elements within the content\nof the element where it is specified, unless overridden with\nanother instance of the  xml:space  attribute. This specification does not give meaning to any value of  xml:space  other than \"default\" and \"preserve\". It is an error for other values to be specified; the XML processor  MAY  report the error or  MAY  recover by ignoring the attribute specification or by reporting the (erroneous) value to the application. Applications may ignore or reject erroneous values. The  root element  of any document is considered\nto have signaled no intentions as regards application space handling, unless\nit provides a value for this attribute or the attribute is declared with a\ndefault value. \n 2.11 End-of-Line Handling XML  parsed entities  are often stored\nin computer files which, for editing convenience, are organized into lines.\nThese lines are typically separated by some combination of the characters\nCARRIAGE RETURN (#xD) and LINE FEED (#xA). To\nsimplify the tasks of  applications , the\n XML\nprocessor \n MUST  behave as if it normalized all line breaks in external parsed\nentities (including the document entity) on input, before parsing, by translating\nboth the two-character sequence #xD #xA and any #xD that is not followed by\n#xA to a single #xA character. \n 2.12 Language Identification In document processing, it is often useful to identify the natural or formal\nlanguage in which the content is written. A special  attribute \nnamed  xml:lang  may be inserted in documents to specify the language\nused in the contents and attribute values of any element in an XML document.\nIn valid documents, this attribute, like any other,  MUST  be  declared \nif it is used. The\nvalues of the attribute are language identifiers as defined by  [IETF BCP 47] ,  Tags\nfor the Identification of Languages ; in addition, the empty string may be specified. (Productions 33 through 38 have been removed.) For example: <p xml:lang=\"en\">The quick brown fox jumps over the lazy dog.</p>\n<p xml:lang=\"en-GB\">What colour is it?</p>\n<p xml:lang=\"en-US\">What color is it?</p>\n<sp who=\"Faust\" desc='leise' xml:lang=\"de\">\n  <l>Habe nun, ach! Philosophie,</l>\n  <l>Juristerei, und Medizin</l>\n  <l>und leider auch Theologie</l>\n  <l>durchaus studiert mit hei\u00dfem Bem\u00fch'n.</l>\n</sp> The language specified by  xml:lang  applies to the element where it is specified\n\t\t (including the values of its attributes), and  to all elements in its content unless\n     overridden with another instance of  xml:lang . In particular, the empty value of  xml:lang  is used on an element B to override\n\t\t a specification of  xml:lang  on an enclosing element A, without specifying another language. Within B,\n\t\t it is considered that there is no language information available, just as if  xml:lang  had not been specified\n\t\t on B or any of its ancestors. Applications determine which of an element's attribute values\n     and which parts of its character content, if any, are treated as language-dependent values described by  xml:lang .  Note: Language information may also be provided by external transport protocols (e.g. HTTP or\n  MIME). When available, this information may be used by XML applications, but the more local\n  information provided by  xml:lang  should be considered to override it.\n A simple declaration for  xml:lang  might take the form xml:lang CDATA #IMPLIED but specific default values may also be given, if appropriate. In a collection\nof French poems for English students, with glosses and notes in English, the  xml:lang \nattribute might be declared this way: <!ATTLIST poem   xml:lang CDATA 'fr'>\n<!ATTLIST gloss  xml:lang CDATA 'en'>\n<!ATTLIST note   xml:lang CDATA 'en'> \n 3 Logical Structures \n\t\t\t\t[ Definition : Each  XML\ndocument  contains one or more  elements , the boundaries\nof which are either delimited by  start-tags \nand  end-tags , or, for  empty \nelements, by an  empty-element tag . Each\nelement has a type, identified by name, sometimes called its \"generic\nidentifier\" (GI), and may have a set of attribute specifications.]\nEach attribute specification has a  name \nand a  value . \n Element [39]\u00a0\u00a0\u00a0 element \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n EmptyElemTag \n |  STag \n content \n ETag \n [WFC: Element Type Match] [VC: Element Valid] This specification does not constrain the\n\t\t\tapplication semantics, use, or (beyond syntax)\nnames of the element types and attributes, except that names beginning with\na match to  (('X'|'x')('M'|'m')('L'|'l'))  are reserved for standardization\nin this or future versions of this specification. Well-formedness constraint: Element Type Match The  Name \nin an element's end-tag  MUST  match the element type in the start-tag. Validity constraint: Element Valid An element is valid\nif there is a declaration matching  elementdecl \nwhere the  Name  matches the element type, and one of\nthe following holds: The declaration matches  EMPTY  and the element has no  content  (not even entity\nreferences, comments, PIs or white space). The declaration matches  children  and the\nsequence of  child elements  belongs\nto the language generated by the regular expression in the content model,\nwith optional white space, comments and\nPIs (i.e. markup matching production [27]  Misc ) between the\nstart-tag and the first child element, between child elements, or between\nthe last child element and the end-tag. Note that a CDATA section containing\nonly white space or a reference\nto an entity whose replacement text is character references expanding to white\nspace do not\nmatch the nonterminal  S , and\nhence cannot appear in these positions; however, a\nreference to an internal entity with a literal value consisting of character\nreferences expanding to white space does match  S , since its\nreplacement text is the white space resulting from expansion of the character\nreferences. The declaration matches  Mixed , and the content\n(after replacing\nany entity references with their replacement text) consists of\n character data \n(including  CDATA sections ),\n comments ,  PIs  and  child elements  whose types match names in the\ncontent model. The declaration matches  ANY , and the content (after replacing\nany entity references with their replacement text)\nconsists of character data,  CDATA\nsections ,  comments ,  PIs \n and  child elements \nwhose types have been declared. \n 3.1 Start-Tags, End-Tags, and Empty-Element Tags \n\t\t\t\t\t[ Definition : The beginning of every non-empty\nXML element is marked by a  start-tag .]\n Start-tag [40]\u00a0\u00a0\u00a0 STag \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<'  Name  ( S \n Attribute )*  S ? '>' [WFC: Unique Att Spec] [41]\u00a0\u00a0\u00a0 Attribute \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n Name \n Eq \n AttValue \n [VC: Attribute Value Type] [WFC: No External Entity References] [WFC: No < in Attribute Values] The  Name  in the start- and end-tags gives the element's  type . [ Definition :  The  Name - AttValue \npairs are referred to as the  attribute specifications  of the\nelement], [ Definition : with the  Name  in each pair referred to as the  attribute name \n\t\t\t\t\t]\nand [ Definition : the content of the  AttValue  (the text between the  '  or  \" \ndelimiters) as the  attribute value .] Note\nthat the order of attribute specifications in a start-tag or empty-element\ntag is not significant. Well-formedness constraint: Unique Att Spec An attribute name\n MUST NOT  appear more than once in the same start-tag or empty-element tag. Validity constraint: Attribute Value Type The attribute  MUST \nhave been declared; the value  MUST  be of the type declared for it. (For attribute\ntypes, see  3.3 Attribute-List Declarations .) Well-formedness constraint: No External Entity References Attribute\nvalues  MUST NOT  contain direct or indirect entity references to external entities. Well-formedness constraint: No  <  in Attribute Values The  replacement text  of any entity\nreferred to directly or indirectly in an attribute value  MUST NOT  contain a  < . An example of a start-tag: <termdef id=\"dt-dog\" term=\"dog\"> \n\t\t\t\t\t[ Definition : The end of every element that begins\nwith a start-tag  MUST  be marked by an  end-tag  containing a name\nthat echoes the element's type as given in the start-tag:]\n End-tag [42]\u00a0\u00a0\u00a0 ETag \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '</'  Name \n S ?\n'>' An example of an end-tag: </termdef> \n\t\t\t\t\t[ Definition : The  text \nbetween the start-tag and end-tag is called the element's  content :]\n Content of Elements [43]\u00a0\u00a0\u00a0 content \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n CharData ? (( element \n|  Reference  |  CDSect \n|  PI  |  Comment )  CharData ?)* \n\t\t\t\t\t[ Definition : An element\nwith no  content  is said to be  empty .] The representation\nof an empty element is either a start-tag immediately followed by an end-tag,\nor an empty-element tag. [ Definition : An  empty-element\ntag  takes a special form:]\n Tags for Empty Elements [44]\u00a0\u00a0\u00a0 EmptyElemTag \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<'  Name  ( S \n Attribute )*  S ? '/>' [WFC: Unique Att Spec] Empty-element tags may be used for any element which has no content, whether\nor not it is declared using the keyword  EMPTY .  For\ninteroperability , the empty-element tag  SHOULD \nbe used, and  SHOULD  only be used, for elements which are declared\nEMPTY. Examples of empty elements: <IMG align=\"left\"\n src=\"http://www.w3.org/Icons/WWW/w3c_home\" />\n<br></br>\n<br/> \n 3.2 Element Type Declarations The  element  structure of an  XML document  may, for  validation \npurposes, be constrained using element type and attribute-list declarations.\nAn element type declaration constrains the element's  content . Element type declarations often constrain which element types can appear\nas  children  of the element. At user\noption, an XML processor  MAY  issue a warning when a declaration mentions an\nelement type for which no declaration is provided, but this is not an error. \n\t\t\t\t\t[ Definition : An  element\ntype declaration  takes the form:]\n Element Type Declaration [45]\u00a0\u00a0\u00a0 elementdecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!ELEMENT'  S \n Name \n S \n contentspec \n S ?\n'>' [VC: Unique Element Type Declaration] [46]\u00a0\u00a0\u00a0 contentspec \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 'EMPTY' | 'ANY' |  Mixed \n|  children \n where the  Name  gives the element type being declared. Validity constraint: Unique Element Type Declaration An element type  MUST NOT  be declared more than once. Examples of element type declarations: <!ELEMENT br EMPTY>\n<!ELEMENT p (#PCDATA|emph)* >\n<!ELEMENT %name.para; %content.para; >\n<!ELEMENT container ANY> \n 3.2.1 Element Content \n\t\t\t\t\t\t[ Definition : An element  type  has  element content  when elements\nof that type  MUST  contain only  child \nelements (no character data), optionally separated by white space (characters\nmatching the nonterminal  S ).]\n\t\t\t\t\t\t[ Definition : In this case, the constraint includes a  content\nmodel , a simple grammar governing the allowed types of the\nchild elements and the order in which they are allowed to appear.]\nThe grammar is built on content particles ( cp s), which\nconsist of names, choice lists of content particles, or sequence lists of\ncontent particles: \n Element-content Models [47]\u00a0\u00a0\u00a0 children \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ( choice  |  seq )\n('?' | '*' | '+')? [48]\u00a0\u00a0\u00a0 cp \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 ( Name  |  choice \n|  seq ) ('?' | '*' | '+')? [49]\u00a0\u00a0\u00a0 choice \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '('  S ?  cp  (  S ? '|'  S ?  cp  )+  S ? ')' [VC: Proper Group/PE Nesting] [50]\u00a0\u00a0\u00a0 seq \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '('  S ?  cp  (  S ? ','  S ?  cp  )*  S ? ')' [VC: Proper Group/PE Nesting] where each  Name  is the type of an element which\nmay appear as a  child . Any content\nparticle in a choice list may appear in the  element\ncontent  at the location where the choice list appears in the grammar;\ncontent particles occurring in a sequence list  MUST  each appear in the  element content  in the order given in the list.\nThe optional character following a name or list governs whether the element\nor the content particles in the list may occur one or more ( + ),\nzero or more ( * ), or zero or one times ( ? ). The\nabsence of such an operator means that the element or content particle  MUST \nappear exactly once. This syntax and meaning are identical to those used in\nthe productions in this specification. The content of an element matches a content model if and only if it is\npossible to trace out a path through the content model, obeying the sequence,\nchoice, and repetition operators and matching each element in the content\nagainst an element type in the content model.  For\ncompatibility , it is an error if the content model\nallows an element to match more than one occurrence of an element type in the\ncontent model. For more information, see  E Deterministic Content Models . Validity constraint: Proper Group/PE Nesting Parameter-entity  replacement text \n MUST  be properly nested with parenthesized\ngroups. That is to say, if either of the opening or closing parentheses in\na  choice ,  seq , or  Mixed \nconstruct is contained in the replacement text for a  parameter\nentity , both  MUST  be contained in the same replacement text. \n For interoperability , if a parameter-entity reference\nappears in a  choice ,  seq , or  Mixed  construct, its replacement text  SHOULD  contain at\nleast one non-blank character, and neither the first nor last non-blank character\nof the replacement text  SHOULD  be a connector ( |  or  , ). Examples of element-content models: <!ELEMENT spec (front, body, back?)>\n<!ELEMENT div1 (head, (p | list | note)*, div2*)>\n<!ELEMENT dictionary-body (%div.mix; | %dict.mix;)*> \n 3.2.2 Mixed Content \n\t\t\t\t\t\t[ Definition : An element  type \nhas  mixed content  when elements of that type may contain character\ndata, optionally interspersed with  child \nelements.] In this case, the types of the child elements may be constrained,\nbut not their order or their number of occurrences: \n Mixed-content Declaration [51]\u00a0\u00a0\u00a0 Mixed \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '('  S ? '#PCDATA' ( S ?\n'|'  S ?  Name )*  S ?\n')*'  | '('  S ? '#PCDATA'  S ? ')'  [VC: Proper Group/PE Nesting] [VC: No Duplicate Types] where the  Name s give the types of elements that\nmay appear as children. The\nkeyword  #PCDATA  derives historically from the term \"parsed\ncharacter data.\"\n\t\t\t\t\t Validity constraint: No Duplicate Types The\nsame name  MUST NOT  appear more than once in a single mixed-content declaration. Examples of mixed content declarations: <!ELEMENT p (#PCDATA|a|ul|b|i|em)*>\n<!ELEMENT p (#PCDATA | %font; | %phrase; | %special; | %form;)* >\n<!ELEMENT b (#PCDATA)> \n 3.3 Attribute-List Declarations \n Attributes  are used to associate name-value\npairs with  elements . Attribute specifications\n MUST NOT  appear outside of  start-tags  and  empty-element tags ; thus, the productions used to\nrecognize them appear in  3.1 Start-Tags, End-Tags, and Empty-Element Tags . Attribute-list declarations\nmay be used: To define the set of attributes pertaining to a given element type. To establish type constraints for these attributes. To provide  default values  for\nattributes. \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Attribute-list\ndeclarations  specify the name, data type, and default value (if any)\nof each attribute associated with a given element type:]\n Attribute-list Declaration [52]\u00a0\u00a0\u00a0 AttlistDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!ATTLIST'  S \n Name \n AttDef *  S ? '>' [53]\u00a0\u00a0\u00a0 AttDef \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n S \n Name \n S \n AttType \n S \n DefaultDecl \n The  Name  in the  AttlistDecl \nrule is the type of an element. At user option, an XML processor  MAY  issue\na warning if attributes are declared for an element type not itself declared,\nbut this is not an error. The  Name  in the  AttDef \nrule is the name of the attribute. When more than one  AttlistDecl  is provided\nfor a given element type, the contents of all those provided are merged. When\nmore than one definition is provided for the same attribute of a given element\ntype, the first declaration is binding and later declarations are ignored.  For interoperability,  writers of DTDs may choose\nto provide at most one attribute-list declaration for a given element type,\nat most one attribute definition for a given attribute name in an attribute-list\ndeclaration, and at least one attribute definition in each attribute-list\ndeclaration. For interoperability, an XML processor  MAY  at user option\nissue a warning when more than one attribute-list declaration is provided\nfor a given element type, or more than one attribute definition is provided\nfor a given attribute, but this is not an error. \n 3.3.1 Attribute Types XML attribute types are of three kinds: a string type, a set of tokenized\ntypes, and enumerated types. The string type may take any literal string as\na value; the tokenized types are more constrained.\nThe validity constraints noted in the grammar are applied after the attribute\nvalue has been normalized as described in  3.3.3 Attribute-Value Normalization . \n Attribute Types [54]\u00a0\u00a0\u00a0 AttType \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n StringType  |  TokenizedType \n|  EnumeratedType \n [55]\u00a0\u00a0\u00a0 StringType \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 'CDATA' [56]\u00a0\u00a0\u00a0 TokenizedType \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 'ID' [VC: ID] [VC: One ID per Element Type] [VC: ID Attribute Default] | 'IDREF' [VC: IDREF] | 'IDREFS' [VC: IDREF] | 'ENTITY' [VC: Entity Name] | 'ENTITIES' [VC: Entity Name] | 'NMTOKEN' [VC: Name Token] | 'NMTOKENS' [VC: Name Token] Validity constraint: ID Values of type  ID \n MUST  match the  Name  production. A name  MUST NOT  appear more than once\nin an XML document as a value of this type; i.e., ID values  MUST  uniquely\nidentify the elements which bear them. Validity constraint: One ID per Element Type An element type  MUST NOT  have more than one ID attribute specified. Validity constraint: ID Attribute Default An ID attribute\n MUST  have a declared default of  #IMPLIED  or  #REQUIRED . Validity constraint: IDREF Values of type  IDREF \n MUST \nmatch the  Name  production, and values of type  IDREFS \n MUST  match  Names ; each  Name \n MUST  match the value of an ID attribute on some element in the XML document;\ni.e.  IDREF  values  MUST  match the value of some ID attribute. Validity constraint: Entity Name Values of type  ENTITY \n MUST  match the  Name  production, values of type  ENTITIES \n MUST  match  Names ; each  Name \n MUST  match the name of an  unparsed entity \ndeclared in the  DTD . Validity constraint: Name Token Values of type  NMTOKEN \n MUST  match the  Nmtoken  production; values of type  NMTOKENS \n MUST  match  Nmtokens . \n\t\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t\t Enumerated attributes \n\t\t\t\t\t\t\thave a list of allowed values in their declaration\n\t\t\t\t\t\t]. They  MUST  take one of those values.  There are two kinds of enumerated attribute types: \n Enumerated Attribute Types [57]\u00a0\u00a0\u00a0 EnumeratedType \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n NotationType \n|  Enumeration \n [58]\u00a0\u00a0\u00a0 NotationType \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 'NOTATION'  S  '('  S ?  Name  ( S ? '|'  S ?  Name )*  S ? ')'  [VC: Notation Attributes] [VC: One Notation Per Element Type] [VC: No Notation on Empty Element] [VC: No Duplicate Tokens] [59]\u00a0\u00a0\u00a0 Enumeration \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '('  S ?  Nmtoken \n( S ? '|'  S ?  Nmtoken )*  S ? ')' [VC: Enumeration] [VC: No Duplicate Tokens] A  NOTATION  attribute identifies a  notation ,\ndeclared in the DTD with associated system and/or public identifiers, to be\nused in interpreting the element to which the attribute is attached. Validity constraint: Notation Attributes Values of this type\n MUST  match one of the  notation  names\nincluded in the declaration; all notation names in the declaration  MUST  be\ndeclared. Validity constraint: One Notation Per Element Type An element type  MUST NOT  have more than one  NOTATION \nattribute specified. Validity constraint: No Notation on Empty Element \n For compatibility ,\nan attribute of type  NOTATION \n MUST NOT  be declared on an element\ndeclared  EMPTY . Validity constraint: No Duplicate Tokens The notation names in a single  NotationType \nattribute declaration, as well as the  NmToken s in a single\n Enumeration  attribute declaration,  MUST  all be distinct. Validity constraint: Enumeration Values of this type  MUST  match\none of the  Nmtoken  tokens in the declaration. \n For interoperability,  the same  Nmtoken \n SHOULD NOT  occur more than once in the enumerated\nattribute types of a single element type. \n 3.3.2 Attribute Defaults An  attribute declaration  provides information\non whether the attribute's presence is  REQUIRED , and if not, how an XML processor\nis to react if a declared attribute is absent in a document. \n Attribute Defaults [60]\u00a0\u00a0\u00a0 DefaultDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '#REQUIRED' |\u00a0'#IMPLIED'  | (('#FIXED'  S )?  AttValue ) [VC: Required Attribute] [VC: Attribute Default Value Syntactically Correct] [WFC: No < in Attribute Values] [VC: Fixed Attribute Default] [WFC: No External Entity References] In an attribute declaration,  #REQUIRED  means that the attribute\n MUST  always be provided,  #IMPLIED  that no default value is provided.\n\t\t\t\t\t\t[ Definition : If\nthe declaration is neither  #REQUIRED  nor  #IMPLIED , then\nthe  AttValue  value contains the declared  default \nvalue; the  #FIXED  keyword states that the attribute  MUST  always have\nthe default value.\nWhen an XML processor encounters\nan element\nwithout a specification for an attribute for which it has read a default\nvalue declaration, it  MUST  report the attribute with the declared default\nvalue to the application.]\n\t\t\t\t\t Validity constraint: Required Attribute If the default\ndeclaration is the keyword  #REQUIRED , then the attribute  MUST  be\nspecified for all elements of the type in the attribute-list declaration. Validity constraint: Attribute Default Value Syntactically Correct The declared default value  MUST  meet the syntactic\nconstraints of the declared attribute type. That is, the default value of an attribute:\n\t\t\t\t\t\t\t\t\tof type IDREF or ENTITY must match the  Name  production; \n\t\t\t\t\t\t\t\t\tof type IDREFS or ENTITIES must match the  Names  production; \n\t\t\t\t\t\t\t\t\tof type NMTOKEN must match the  Nmtoken  production; \n\t\t\t\t\t\t\t\t\tof type NMTOKENS must match the  Nmtokens  production; \n\t\t\t\t\t\t\t\t\tof an  enumerated type  (either a  NOTATION  type or an  enumeration ) must match one of the enumerated values. Note that only the\nsyntactic constraints of the type are required here; other constraints (e.g.\nthat the value be the name of a declared unparsed entity, for an attribute of\ntype ENTITY) will be reported by a validating\nparser only if an element without a specification for this attribute\nactually occurs. Validity constraint: Fixed Attribute Default If an attribute\nhas a default value declared with the  #FIXED  keyword, instances of\nthat attribute  MUST  match the default value. Examples of attribute-list declarations: <!ATTLIST termdef\n          id      ID      #REQUIRED\n          name    CDATA   #IMPLIED>\n<!ATTLIST list\n          type    (bullets|ordered|glossary)  \"ordered\">\n<!ATTLIST form\n          method  CDATA   #FIXED \"POST\"> \n 3.3.3 Attribute-Value Normalization Before the value of an attribute is passed to the application or checked\nfor validity, the XML processor  MUST  normalize the attribute value by applying\nthe algorithm below, or by using some other method such that the value passed\nto the application is the same as that produced by the algorithm. All line breaks  MUST  have been normalized on input to #xA as described\nin  2.11 End-of-Line Handling , so the rest of this algorithm operates\non text normalized in this way. Begin with a normalized value consisting of the empty string. For each character, entity reference, or character reference in the\nunnormalized attribute value, beginning with the first and continuing to the\nlast, do the following: For a character reference, append the referenced character to the\nnormalized value. For an entity reference, recursively apply step 3 of this algorithm\nto the replacement text of the entity. For a white space character (#x20, #xD, #xA, #x9), append a space\ncharacter (#x20) to the normalized value. For another character, append the character to the normalized value. If the attribute type is not CDATA, then the XML processor  MUST  further\nprocess the normalized attribute value by discarding any leading and trailing\nspace (#x20) characters, and by replacing sequences of space (#x20) characters\nby a single space (#x20) character. Note that if the unnormalized attribute value contains a character reference\nto a white space character other than space (#x20), the normalized value contains\nthe referenced character itself (#xD, #xA or #x9). This contrasts with the\ncase where the unnormalized value contains a white space character (not a\nreference), which is replaced with a space character (#x20) in the normalized\nvalue and also contrasts with the case where the unnormalized value contains\nan entity reference whose replacement text contains a white space character;\nbeing recursively processed, the white space character is replaced with a\nspace character (#x20) in the normalized value. All attributes for which no declaration has been read  SHOULD  be treated\nby a non-validating processor as if declared  CDATA . It is an error if an  attribute\nvalue  contains a  reference  to an\nentity for which no declaration has been read. Following are examples of attribute normalization. Given the following\ndeclarations: <!ENTITY d \"&#xD;\">\n<!ENTITY a \"&#xA;\">\n<!ENTITY da \"&#xD;&#xA;\"> the attribute specifications in the left column below would be normalized\nto the character sequences of the middle column if the attribute  a \nis declared  NMTOKENS  and to those of the right columns if  a \nis declared  CDATA . Attribute specification a is NMTOKENS a is CDATA \n a=\"\nxyz\" \n x y z \n #x20 #x20 x y z \n a=\"&d;&d;A&a;&#x20;&a;B&da;\" \n A #x20 B \n #x20 #x20 A #x20 #x20 #x20 B #x20 #x20 \n a=\n\"&#xd;&#xd;A&#xa;&#xa;B&#xd;&#xa;\" \n #xD #xD A #xA #xA B #xD #xA \n #xD #xD A #xA #xA B #xD #xA \n Note that the last example is invalid (but well-formed) if  a \nis declared to be of type  NMTOKENS . \n 3.4 Conditional Sections \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Conditional\nsections  are portions of the  document type\ndeclaration external subset  or\nof external parameter entities which are included in, or excluded from,\nthe logical structure of the DTD based on the keyword which governs them.]\n Conditional Section [61]\u00a0\u00a0\u00a0 conditionalSect \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n includeSect  |  ignoreSect \n [62]\u00a0\u00a0\u00a0 includeSect \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!['  S ? 'INCLUDE'  S ? '['  extSubsetDecl \n']]>'  [VC: Proper Conditional Section/PE Nesting] [63]\u00a0\u00a0\u00a0 ignoreSect \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!['  S ? 'IGNORE'  S ? '['  ignoreSectContents *\n']]>' [VC: Proper Conditional Section/PE Nesting] [64]\u00a0\u00a0\u00a0 ignoreSectContents \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n Ignore  ('<!['  ignoreSectContents  ']]>'  Ignore )* [65]\u00a0\u00a0\u00a0 Ignore \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n Char * - ( Char *\n('<![' | ']]>')  Char *)  Validity constraint: Proper Conditional Section/PE Nesting If any of the \" <![ \",\n\" [ \", or \" ]]> \" of a conditional section is contained\nin the replacement text for a parameter-entity reference, all of them  MUST \nbe contained in the same replacement text. Like the internal and external DTD subsets, a conditional section may contain\none or more complete declarations, comments, processing instructions, or nested\nconditional sections, intermingled with white space. If the keyword of the conditional section is  INCLUDE , then the\ncontents of the conditional section  MUST  be processed as part of the DTD. If the keyword of\nthe conditional section is  IGNORE , then the contents of the conditional\nsection  MUST   NOT  be processed as part of the DTD.\nIf a conditional section with a keyword of  INCLUDE  occurs within\na larger conditional section with a keyword of  IGNORE , both the outer\nand the inner conditional sections  MUST  be ignored. The contents\nof an ignored conditional section  MUST  be parsed by ignoring all characters after\nthe \" [ \" following the keyword, except conditional section starts\n\" <![ \" and ends \" ]]> \", until the matching conditional\nsection end is found. Parameter entity references  MUST NOT  be recognized in this\nprocess. If the keyword of the conditional section is a parameter-entity reference,\nthe parameter entity  MUST  be replaced by its content before the processor\ndecides whether to include or ignore the conditional section. An example: <!ENTITY % draft 'INCLUDE' >\n<!ENTITY % final 'IGNORE' >\n<![%draft;[\n<!ELEMENT book (comments*, title, body, supplements?)>\n]]>\n<![%final;[\n<!ELEMENT book (title, body, supplements?)>\n]]> \n 4 Physical Structures \n\t\t\t\t[ Definition : An XML document may consist of one\nor many storage units. These\nare called  entities ; they all have  content  and are\nall (except for the  document entity  and\nthe  external DTD subset ) identified by\nentity  name .] Each XML document has one entity\ncalled the  document entity , which serves\nas the starting point for the  XML processor \nand may contain the whole document. Entities may be either parsed or unparsed. [ Definition : The contents of a  parsed\nentity  are referred to as its  replacement\ntext ; this  text  is considered an\nintegral part of the document.]\n\t\t\t\t[ Definition : An  unparsed entity \nis a resource whose contents may or may not be  text ,\nand if text, may\nbe other than XML. Each unparsed entity has an associated  notation , identified by name. Beyond a requirement\nthat an XML processor make the identifiers for the entity and notation available\nto the application, XML places no constraints on the contents of unparsed\nentities.]\n\t\t\t Parsed entities are invoked by name using entity references; unparsed entities\nby name, given in the value of  ENTITY  or  ENTITIES  attributes. \n\t\t\t\t[ Definition : \n\t\t\t\t\t General entities \nare entities for use within the document content. In this specification, general\nentities are sometimes referred to with the unqualified term  entity \nwhen this leads to no ambiguity.]\n\t\t\t\t[ Definition : \n\t\t\t\t\t Parameter\nentities  are parsed entities for use within the DTD.]\nThese two types of entities use different forms of reference and are recognized\nin different contexts. Furthermore, they occupy different namespaces; a parameter\nentity and a general entity with the same name are two distinct entities. \n 4.1 Character and Entity References \n\t\t\t\t\t[ Definition :  A  character\nreference  refers to a specific character in the ISO/IEC 10646 character\nset, for example one not directly accessible from available input devices.]\n Character Reference [66]\u00a0\u00a0\u00a0 CharRef \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '&#' [0-9]+ ';'  | '&#x' [0-9a-fA-F]+ ';' [WFC: Legal Character] Well-formedness constraint: Legal Character Characters referred\nto using character references  MUST  match the production for  Char . If the character reference begins with \"\n\t\t\t\t\t\t &#x \n\t\t\t\t\t\",\nthe digits and letters up to the terminating  ;  provide a hexadecimal\nrepresentation of the character's code point in ISO/IEC 10646. If it begins\njust with \"\n\t\t\t\t\t\t &# \n\t\t\t\t\t\", the digits up to the terminating  ; \nprovide a decimal representation of the character's code point. \n\t\t\t\t\t[ Definition : An  entity reference \nrefers to the content of a named entity.]\n\t\t\t\t\t[ Definition : References to parsed general entities use\nampersand ( & ) and semicolon ( ; ) as delimiters.]\n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Parameter-entity references \nuse percent-sign ( % ) and semicolon ( ; ) as delimiters.]\n Entity Reference [67]\u00a0\u00a0\u00a0 Reference \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n EntityRef  |  CharRef \n [68]\u00a0\u00a0\u00a0 EntityRef \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '&'  Name  ';' [WFC: Entity Declared] [VC: Entity Declared] [WFC: Parsed Entity] [WFC: No Recursion] [69]\u00a0\u00a0\u00a0 PEReference \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '%'  Name  ';' [VC: Entity Declared] [WFC: No Recursion] [WFC: In DTD] Well-formedness constraint: Entity Declared In a document\nwithout any DTD, a document with only an internal DTD subset which contains\nno parameter entity references, or a document with \"\n\t\t\t\t\t\t\t standalone='yes' \n\t\t\t\t\t\t\", for\nan entity reference that does not occur within the external subset or a parameter\nentity, the  Name  given in the entity reference  MUST \n match  that in an  entity\ndeclaration  that does not occur within the external subset or a\nparameter entity, except that well-formed documents need not declare\nany of the following entities:  amp ,\n lt ,\n gt ,\n apos ,\n quot . The\ndeclaration of a general entity  MUST  precede any reference to it which appears\nin a default value in an attribute-list declaration. Note that non-validating processors are  not\nobligated to  read and process entity declarations occurring in parameter entities or in\nthe external subset; for such documents,\nthe rule that an entity must be declared is a well-formedness constraint only\nif  standalone='yes' . Validity constraint: Entity Declared In a document with an external subset or parameter  entity references ,\n\t\t\t\t\t\tif the document is not standalone (either \" standalone='no' \"\n\t\t\t\t\t\tis specified or there is no standalone declaration), then \nthe  Name  given in the entity reference  MUST \n match  that in an  entity\ndeclaration . For interoperability, valid documents  SHOULD  declare\nthe entities  amp ,\n lt ,\n gt ,\n apos ,\n quot , in the form specified in  4.6 Predefined Entities .\nThe declaration of a parameter entity  MUST  precede any reference to it. Similarly,\nthe declaration of a general entity  MUST  precede any attribute-list\ndeclaration containing a default value with a direct or indirect reference\nto that general entity. Well-formedness constraint: Parsed Entity An entity reference  MUST\nNOT  contain the name of an  unparsed entity .\nUnparsed entities may be referred to only in  attribute\nvalues  declared to be of type  ENTITY  or  ENTITIES . Well-formedness constraint: No Recursion A parsed entity  MUST NOT  contain a recursive reference to itself, either directly or indirectly. Well-formedness constraint: In DTD Parameter-entity references  MUST NOT  appear outside\n the  DTD . Examples of character and entity references: Type <key>less-than</key> (&#x3C;) to save options.\nThis document was prepared on &docdate; and\nis classified &security-level;. Example of a parameter-entity reference: <!-- declare the parameter entity \"ISOLat2\"... -->\n<!ENTITY % ISOLat2\n         SYSTEM \"http://www.xml.com/iso/isolat2-xml.entities\" >\n<!-- ... now reference it. -->\n%ISOLat2; \n 4.2 Entity Declarations \n\t\t\t\t\t[ Definition :  Entities are declared\nthus:]\n Entity Declaration [70]\u00a0\u00a0\u00a0 EntityDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n GEDecl \n\t\t\t\t\t\t\t\t |  PEDecl \n [71]\u00a0\u00a0\u00a0 GEDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!ENTITY'  S \n Name \n S \n EntityDef \n S ?\n'>' [72]\u00a0\u00a0\u00a0 PEDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!ENTITY'  S  '%'  S \n Name \n S \n PEDef \n S ? '>' [73]\u00a0\u00a0\u00a0 EntityDef \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n EntityValue \n\t\t\t\t\t\t\t\t| ( ExternalID \n NDataDecl ?) [74]\u00a0\u00a0\u00a0 PEDef \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n EntityValue  |  ExternalID \n The  Name  identifies the entity in an  entity\nreference  or, in the case of an unparsed entity, in the value of\nan  ENTITY  or  ENTITIES  attribute. If the same entity is declared\nmore than once, the first declaration encountered is binding; at user option,\nan XML processor  MAY  issue a warning if entities are declared multiple times. \n 4.2.1 Internal Entities \n\t\t\t\t\t\t[ Definition : If the\nentity definition is an  EntityValue , the defined\nentity is called an  internal entity . There is no separate physical\nstorage object, and the content of the entity is given in the declaration.]\nNote that some processing of entity and character references in the  literal entity value  may be required to produce\nthe correct  replacement text : see  4.5 Construction of Entity Replacement Text . An internal entity is a  parsed entity . Example of an internal entity declaration: <!ENTITY Pub-Status \"This is a pre-release of the\n specification.\"> \n 4.2.2 External Entities \n\t\t\t\t\t\t[ Definition : If the entity is not internal,\nit is an  external entity , declared as follows:]\n External Entity Declaration [75]\u00a0\u00a0\u00a0 ExternalID \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 'SYSTEM'  S \n SystemLiteral \n | 'PUBLIC'  S \n PubidLiteral \n S \n SystemLiteral \n [76]\u00a0\u00a0\u00a0 NDataDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n S  'NDATA'  S \n Name \n [VC: Notation Declared] If the  NDataDecl  is present, this is a general  unparsed entity ; otherwise it is a parsed entity. Validity constraint: Notation Declared The  Name \n MUST  match the declared name of a  notation . \n\t\t\t\t\t\t[ Definition : The  SystemLiteral  is called the entity's  system\nidentifier . It is meant to be converted to a URI reference\n(as defined in  [IETF RFC 3986] ),\nas part of the\nprocess of dereferencing it to obtain input for the XML processor to construct the\nentity's replacement text.] It is an error for a fragment identifier\n(beginning with a  #  character) to be part of a system identifier.\nUnless otherwise provided by information outside the scope of this specification\n(e.g. a special XML element type defined by a particular DTD, or a processing\ninstruction defined by a particular application specification), relative URIs\nare relative to the location of the resource within which the entity declaration\noccurs. This is defined to\nbe the external entity containing the '<' which starts the declaration, at the\npoint when it is parsed as a declaration.\nA URI might thus be relative to the  document\nentity , to the entity containing the  external\nDTD subset , or to some other  external parameter\nentity . Attempts to\nretrieve the resource identified by a URI may be redirected at the parser\nlevel (for example, in an entity resolver) or below (at the protocol level,\nfor example, via an HTTP  Location:  header). In the absence of additional\ninformation outside the scope of this specification within the resource,\nthe base URI of a resource is always the URI of the actual resource returned.\nIn other words, it is the URI of the resource retrieved after all redirection\nhas occurred. System\nidentifiers (and other XML strings meant to be used as URI references) may contain\ncharacters that, according to  [IETF RFC 3986] ,\nmust be escaped before a URI can be used to retrieve the referenced resource. The\ncharacters to be escaped are the control characters #x0 to #x1F and #x7F (most of\nwhich cannot appear in XML), space #x20, the delimiters '<' #x3C, '>' #x3E and\n'\"' #x22, the  unwise  characters '{' #x7B, '}' #x7D, '|' #x7C, '\\' #x5C, '^' #x5E and\n'`' #x60, as well as all characters above #x7F. Since escaping is not always a fully\nreversible process, it  MUST  be performed only when absolutely necessary and as late\nas possible in a processing chain. In particular, neither the process of converting\na relative URI to an absolute one nor the process of passing a URI reference to a\nprocess or software component responsible for dereferencing it  SHOULD  trigger escaping.\nWhen escaping does occur, it  MUST  be performed as follows: Each character to be escaped is represented in UTF-8  [Unicode] \nas one or more bytes. The resulting bytes are escaped with\nthe URI escaping mechanism (that is, converted to  % \n HH ,\nwhere HH is the hexadecimal notation of the byte value). The original character is replaced by the resulting character sequence. Note: In a future edition of this specification, the XML Core Working Group intends to replace the preceding paragraph\n\t\t\t\t\t\t\tand list of steps with a normative reference to an upcoming revision of IETF RFC 3987, which will define\n\t\t\t\t\t\t\t\"Legacy Extended IRIs (LEIRIs)\".  When this revision is available, it is the intent of the XML Core WG to use it to replace\n\t\t\t\t\t\t\tlanguage similar to the above in any future revisions of XML-related specifications under its purview. \n\t\t\t\t\t\t[ Definition :  In addition to a system\nidentifier, an external identifier may include a  public identifier .]\nAn XML processor attempting to retrieve the entity's content may use\nany combination of\nthe public and system identifiers as well as additional information outside the\nscope of this specification to try to generate an alternative URI reference.\nIf the processor is unable to do so, it  MUST  use the URI\nreference specified in the system literal. Before a match is attempted,\nall strings of white space in the public identifier  MUST  be normalized to\nsingle space characters (#x20), and leading and trailing white space  MUST \nbe removed. Examples of external entity declarations: <!ENTITY open-hatch\n         SYSTEM \"http://www.textuality.com/boilerplate/OpenHatch.xml\">\n<!ENTITY open-hatch\n         PUBLIC \"-//Textuality//TEXT Standard open-hatch boilerplate//EN\"\n         \"http://www.textuality.com/boilerplate/OpenHatch.xml\">\n<!ENTITY hatch-pic\n         SYSTEM \"../grafix/OpenHatch.gif\"\n         NDATA gif > \n 4.3 Parsed Entities \n 4.3.1 The Text Declaration External parsed entities  SHOULD  each begin with a  text declaration . \n Text Declaration [77]\u00a0\u00a0\u00a0 TextDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<?xml'  VersionInfo ?  EncodingDecl \n S ? '?>' The text declaration  MUST  be provided literally, not by reference\n\t\t\t\t\tto a parsed entity. The text declaration\n\t\t\t\t\t MUST NOT  appear at any\n\t\t\t\t\tposition other than the beginning of an external parsed entity. The text declaration\n          in an external parsed entity is not considered part of its  replacement text . \n 4.3.2 Well-Formed Parsed Entities The document entity is well-formed if it matches the production labeled  document . An external general parsed entity is well-formed\nif it matches the production labeled  extParsedEnt . All\nexternal parameter entities are well-formed by definition. Note: Only parsed entities that are referenced directly or indirectly within the document are required to be well-formed. \n Well-Formed External Parsed Entity [78]\u00a0\u00a0\u00a0 extParsedEnt \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n TextDecl ?  content \n An internal general parsed entity is well-formed if its replacement text\nmatches the production labeled  content . All internal\nparameter entities are well-formed by definition. A consequence of well-formedness in general\nentities is that the logical and physical\nstructures in an XML document are properly nested; no  start-tag ,  end-tag ,  empty-element tag ,  element ,  comment ,  processing instruction ,  character\nreference , or  entity reference \ncan begin in one entity and end in another. \n 4.3.3 Character Encoding in Entities Each external parsed entity in an XML document may use a different encoding\nfor its characters. All XML processors  MUST  be able to read entities in both\nthe UTF-8 and UTF-16 encodings. The terms \"UTF-8\"\nand \"UTF-16\" in this specification do not apply to \n related character encodings, including but not limited to UTF-16BE, UTF-16LE, or CESU-8. Entities encoded in UTF-16  MUST  and entities\nencoded in UTF-8  MAY  begin with the Byte Order Mark described by\nAnnex H of  [ISO/IEC 10646:2000] , section\n 16.8  of  [Unicode] \n(the ZERO WIDTH NO-BREAK SPACE character, #xFEFF). This is an encoding signature,\nnot part of either the markup or the character data of the XML document. XML\nprocessors  MUST  be able to use this character to differentiate between UTF-8\nand UTF-16 encoded documents. If the replacement text of an external entity is to\n\t\t\t\t\t\tbegin with the character U+FEFF, and no text declaration\n\t\t\t\t\t\tis present, then a Byte Order Mark MUST be present,\n\t\t\t\t\t\twhether the entity is encoded in UTF-8 or UTF-16. Although an XML processor is required to read only entities in the UTF-8\nand UTF-16 encodings, it is recognized that other encodings are used around\nthe world, and it may be desired for XML processors to read entities that\nuse them. In\nthe absence of external character encoding information (such as MIME headers),\nparsed entities which are stored in an encoding other than UTF-8 or UTF-16\n MUST  begin with a text declaration (see  4.3.1 The Text Declaration ) containing\nan encoding declaration: \n Encoding Declaration [80]\u00a0\u00a0\u00a0 EncodingDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n S  'encoding'  Eq \n('\"'  EncName  '\"' | \"'\"  EncName \n\"'\" )  [81]\u00a0\u00a0\u00a0 EncName \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 [A-Za-z] ([A-Za-z0-9._] | '-')* /* Encoding\nname contains only Latin characters */ In the  document entity , the encoding\ndeclaration is part of the  XML declaration .\nThe  EncName  is the name of the encoding used. In an encoding declaration, the values \"\n\t\t\t\t\t\t\t UTF-8 \n\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t UTF-16 \n\t\t\t\t\t\t\",\n\"\n\t\t\t\t\t\t\t ISO-10646-UCS-2 \n\t\t\t\t\t\t\", and \"\n\t\t\t\t\t\t\t ISO-10646-UCS-4 \n\t\t\t\t\t\t\"\n\t\t\t\t\t\t SHOULD  be used\nfor the various encodings and transformations of Unicode / ISO/IEC 10646,\nthe values \"\n\t\t\t\t\t\t\t ISO-8859-1 \n\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t ISO-8859-2 \n\t\t\t\t\t\t\",\n... \"\n\t\t\t\t\t\t\t ISO-8859- \n n \n\t\t\t\t\t\t\" (where  n \nis the part number)  SHOULD  be used for the parts of ISO 8859, and\nthe values \"\n\t\t\t\t\t\t\t ISO-2022-JP \n\t\t\t\t\t\t\", \"\n\t\t\t\t\t\t\t Shift_JIS \n\t\t\t\t\t\t\",\nand \"\n\t\t\t\t\t\t\t EUC-JP \n\t\t\t\t\t\t\"\n\t\t\t\t\t\t SHOULD  be used for the various encoded\nforms of JIS X-0208-1997. It\nis  RECOMMENDED  that character encodings registered (as  charset s)\nwith the Internet Assigned Numbers Authority  [IANA-CHARSETS] ,\nother than those just listed, be referred to using their registered names;\nother encodings  SHOULD  use names starting with an \"x-\" prefix.\nXML processors  SHOULD  match character encoding names in a case-insensitive\nway and  SHOULD  either interpret an IANA-registered name as the encoding registered\nat IANA for that name or treat it as unknown (processors are, of course, not\nrequired to support all IANA-registered encodings). In the absence of information provided by an external transport protocol\n(e.g. HTTP or MIME), it is a  fatal error  for\nan entity including an encoding declaration to be presented to the XML processor\nin an encoding other than that named in the declaration, or for an entity which\nbegins with neither a Byte Order Mark\nnor an encoding declaration to use an encoding other than UTF-8. Note that\nsince ASCII is a subset of UTF-8, ordinary ASCII entities do not strictly\nneed an encoding declaration. It is a  fatal error  for a  TextDecl  to occur other\nthan at the beginning of an external entity. It is a  fatal error  when an XML processor\nencounters an entity with an encoding that it is unable to process. It\nis a  fatal error  if an XML entity is determined (via default, encoding declaration,\nor higher-level protocol) to be in a certain encoding but contains byte\nsequences that are not legal in that encoding. Specifically, it is a\nfatal error if an entity encoded in UTF-8 contains any  ill-formed  code unit sequences,\nas defined in  section 3.9 of   Unicode  [Unicode] . Unless an encoding\nis determined by a higher-level protocol, it is also a  fatal error  if an XML entity\ncontains no encoding declaration and its content is not legal UTF-8 or UTF-16. Examples of text declarations containing encoding declarations: <?xml encoding='UTF-8'?>\n<?xml encoding='EUC-JP'?> \n 4.4 XML Processor Treatment of Entities and References The table below summarizes the contexts in which character references,\nentity references, and invocations of unparsed entities might appear and the\n REQUIRED  behavior of an  XML processor \nin each case. The labels in the leftmost column describe the recognition context:  Reference in Content as a reference anywhere after the  start-tag \nand before the  end-tag  of an element; corresponds\nto the nonterminal  content . Reference in Attribute Value as a reference within either the value of an attribute in a  start-tag ,\nor a default value in an  attribute declaration ;\ncorresponds to the nonterminal  AttValue . Occurs as Attribute Value as a  Name , not a reference, appearing either as\nthe value of an attribute which has been declared as type  ENTITY ,\nor as one of the space-separated tokens in the value of an attribute which\nhas been declared as type  ENTITIES . Reference in Entity Value as a reference within a parameter or internal entity's  literal\nentity value  in the entity's declaration; corresponds to the nonterminal  EntityValue . Reference in DTD as a reference within either the internal or external subsets of the  DTD , but outside of an  EntityValue ,  AttValue ,  PI ,  Comment ,  SystemLiteral ,  PubidLiteral ,\nor the contents of an ignored conditional section (see  3.4 Conditional Sections ). . \n Entity\nType Character Parameter Internal General External Parsed\nGeneral Unparsed Reference\nin Content \n Not recognized \n Included \n Included\nif validating \n Forbidden \n Included \n Reference in Attribute Value \n Not recognized \n Included\nin literal \n Forbidden \n Forbidden \n Included \n Occurs as Attribute\nValue \n Not recognized \n Forbidden \n Forbidden \n Notify \n Not recognized \n Reference in EntityValue \n Included in literal \n Bypassed \n Bypassed \n Error \n Included \n Reference in DTD \n Included as PE \n Forbidden \n Forbidden \n Forbidden \n Forbidden \n 4.4.1 Not Recognized Outside the DTD, the  %  character has no special significance;\nthus, what would be parameter entity references in the DTD are not recognized\nas markup in  content . Similarly, the names of unparsed\nentities are not recognized except when they appear in the value of an appropriately\ndeclared attribute. \n 4.4.2 Included \n\t\t\t\t\t\t[ Definition : An entity is  included \nwhen its  replacement text  is retrieved\nand processed, in place of the reference itself, as though it were part of\nthe document at the location the reference was recognized.] The replacement\ntext may contain both  character data \nand (except for parameter entities)  markup ,\nwhich  MUST  be recognized in the usual way. (The string \"\n\t\t\t\t\t\t\t AT&amp;T; \n\t\t\t\t\t\t\"\nexpands to \"\n\t\t\t\t\t\t\t AT&T; \n\t\t\t\t\t\t\" and the remaining ampersand\nis not recognized as an entity-reference delimiter.) A character reference\nis  included  when the indicated character is processed in place\nof the reference itself.  \n 4.4.3 Included If Validating When an XML processor recognizes a reference to a parsed entity, in order\nto  validate  the document, the processor\n MUST \n include  its replacement text. If\nthe entity is external, and the processor is not attempting to validate the\nXML document, the processor  MAY , but need\nnot, include the entity's replacement text. If a non-validating processor\ndoes not include the replacement text, it  MUST  inform the application that\nit recognized, but did not read, the entity. This rule is based on the recognition that the automatic inclusion provided\nby the SGML and XML entity mechanism, primarily designed to support modularity\nin authoring, is not necessarily appropriate for other applications, in particular\ndocument browsing. Browsers, for example, when encountering an external parsed\nentity reference, might choose to provide a visual indication of the entity's\npresence and retrieve it for display only on demand. \n 4.4.4 Forbidden The following are forbidden, and constitute  fatal\nerrors : the appearance of a reference to an  unparsed\nentity , except in the\n EntityValue  in an entity declaration. the appearance of any character or general-entity reference in the\nDTD except within an  EntityValue  or  AttValue . a reference to an external entity in an attribute value. \n 4.4.5 Included in Literal When an  entity reference  appears in\nan attribute value, or a parameter entity reference appears in a literal entity\nvalue, its  replacement text \n MUST  be processed\nin place of the reference itself as though it were part of the document at\nthe location the reference was recognized, except that a single or double\nquote character in the replacement text  MUST  always be treated as a normal data\ncharacter and  MUST NOT  terminate the literal. For example, this is well-formed: <!ENTITY % YN '\"Yes\"' >\n<!ENTITY WhatHeSaid \"He said %YN;\" > while this is not: <!ENTITY EndAttr \"27'\" >\n<element attribute='a-&EndAttr;> \n 4.4.6 Notify When the name of an  unparsed entity \nappears as a token in the value of an attribute of declared type  ENTITY \nor  ENTITIES , a validating processor  MUST  inform the application of\nthe  system  and  public \n(if any) identifiers for both the entity and its associated  notation . \n 4.4.7 Bypassed When a general entity reference appears in the  EntityValue \nin an entity declaration, it  MUST  be bypassed and left as is. \n 4.4.8 Included as PE Just as with external parsed entities, parameter entities need only be  included if validating . When a parameter-entity\nreference is recognized in the DTD and included, its  replacement\ntext \n MUST  be enlarged by the attachment of one leading and one following\nspace (#x20) character; the intent is to constrain the replacement text of\nparameter entities to contain an integral number of grammatical tokens in\nthe DTD. This\nbehavior  MUST NOT  apply to parameter entity references within entity values;\nthese are described in  4.4.5 Included in Literal . \n 4.4.9 Error It is an  error  for a reference to\n\t\tan unparsed entity to appear in the  EntityValue  in an\n\t\tentity declaration. \n 4.5 Construction of Entity Replacement Text In discussing the treatment of entities, it is useful to distinguish\ntwo forms of the entity's value.\n[ Definition : For an\ninternal entity, the  literal\nentity value  is the quoted string actually present in the entity declaration,\ncorresponding to the non-terminal  EntityValue .]\n\t\t\t\t\t[ Definition : For an external entity, the  literal\nentity value  is the exact text contained in the entity.]\n\t\t\t\t\t[ Definition : For an\ninternal entity, the  replacement text \nis the content of the entity, after replacement of character references and\nparameter-entity references.]\n\t\t\t\t\t[ Definition : For\nan external entity, the  replacement text  is the content of the entity,\nafter stripping the text declaration (leaving any surrounding whitespace) if there\nis one but without any replacement of character references or parameter-entity\nreferences.]\n\t\t\t\t The literal entity value as given in an internal entity declaration ( EntityValue ) may contain character, parameter-entity,\nand general-entity references. Such references  MUST  be contained entirely\nwithin the literal entity value. The actual replacement text that is  included  (or  included in literal ) as described above\n MUST  contain the  replacement\ntext  of any parameter entities referred to, and  MUST  contain the character\nreferred to, in place of any character references in the literal entity value;\nhowever, general-entity references  MUST  be left as-is, unexpanded. For example,\ngiven the following declarations: <!ENTITY % pub    \"&#xc9;ditions Gallimard\" >\n<!ENTITY   rights \"All rights reserved\" >\n<!ENTITY   book   \"La Peste: Albert Camus,\n&#xA9; 1947 %pub;. &rights;\" > then the replacement text for the entity \"\n\t\t\t\t\t\t book \n\t\t\t\t\t\"\nis: La Peste: Albert Camus,\n\u00a9 1947 \u00c9ditions Gallimard. &rights; The general-entity reference \"\n\t\t\t\t\t\t &rights; \n\t\t\t\t\t\" would\nbe expanded should the reference \"\n\t\t\t\t\t\t &book; \n\t\t\t\t\t\" appear\nin the document's content or an attribute value. These simple rules may have complex interactions; for a detailed discussion\nof a difficult example, see  D Expansion of Entity and Character References . \n 4.6 Predefined Entities \n\t\t\t\t\t[ Definition : Entity and character references may\nboth be used to  escape  the left angle bracket, ampersand, and\nother delimiters. A set of general entities ( amp ,\n lt ,\n gt ,\n apos ,\n quot ) is specified for\nthis purpose. Numeric character references may also be used; they are expanded\nimmediately when recognized and  MUST  be treated as character data, so the\nnumeric character references \"\n\t\t\t\t\t\t\t &#60; \n\t\t\t\t\t\t\" and \"\n\t\t\t\t\t\t\t &#38; \n\t\t\t\t\t\t\" may be used to escape  <  and  &  when they occur\nin character data.]\n\t\t\t\t All XML processors  MUST  recognize these entities whether they are declared\nor not.  For interoperability , valid XML\ndocuments  SHOULD  declare these entities, like any others, before using them. If\nthe entities  lt  or  amp  are declared, they  MUST  be\ndeclared as internal entities whose replacement text is a character reference\nto the respective\ncharacter (less-than sign or ampersand) being escaped; the double\nescaping is  REQUIRED  for these entities so that references to them produce\na well-formed result. If the entities  gt ,  apos ,\nor  quot  are declared, they  MUST  be declared as internal entities\nwhose replacement text is the single character being escaped (or a character\nreference to that character; the double escaping here is  OPTIONAL  but harmless).\nFor example: <!ENTITY lt     \"&#38;#60;\">\n<!ENTITY gt     \"&#62;\">\n<!ENTITY amp    \"&#38;#38;\">\n<!ENTITY apos   \"&#39;\">\n<!ENTITY quot   \"&#34;\"> \n 4.7 Notation Declarations \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Notations  identify\nby name the format of  unparsed entities ,\nthe format of elements which bear a notation attribute, or the application\nto which a  processing instruction  is addressed.]\n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Notation declarations \nprovide a name for the notation, for use in entity and attribute-list declarations\nand in attribute specifications, and an external identifier for the notation\nwhich may allow an XML processor or its client application to locate a helper\napplication capable of processing data in the given notation.]\n Notation Declarations [82]\u00a0\u00a0\u00a0 NotationDecl \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 '<!NOTATION'  S \n Name \n S  ( ExternalID  |  PublicID )  S ? '>' [VC: Unique Notation Name] [83]\u00a0\u00a0\u00a0 PublicID \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 'PUBLIC'  S \n PubidLiteral \n Validity constraint: Unique Notation Name A given  Name \n MUST NOT  be declared in more than one notation declaration. XML processors  MUST  provide applications with the name and external identifier(s)\nof any notation declared and referred to in an attribute value, attribute\ndefinition, or entity declaration. They  MAY  additionally resolve the external\nidentifier into the  system identifier , file\nname, or other information needed to allow the application to call a processor\nfor data in the notation described. (It is not an error, however, for XML\ndocuments to declare and refer to notations for which notation-specific applications\nare not available on the system where the XML processor or application is\nrunning.) \n 4.8 Document Entity \n\t\t\t\t\t[ Definition : The  document entity \nserves as the root of the entity tree and a starting-point for an  XML processor .] This specification does\nnot specify how the document entity is to be located by an XML processor;\nunlike other entities, the document entity has no name and might well appear\non a processor input stream without any identification at all. \n 5 Conformance \n 5.1 Validating and Non-Validating Processors Conforming  XML processors  fall into\ntwo classes: validating and non-validating. Validating and non-validating processors alike  MUST  report violations of\nthis specification's well-formedness constraints in the content of the  document entity  and any other  parsed\nentities  that they read. \n\t\t\t\t\t[ Definition : \n\t\t\t\t\t\t Validating\nprocessors \n MUST ,\nat user option, report violations of the constraints expressed by\nthe declarations in the  DTD , and failures\nto fulfill the validity constraints given in this specification.]\nTo accomplish this, validating XML processors  MUST  read and process the entire\nDTD and all external parsed entities referenced in the document. Non-validating processors are  REQUIRED  to check only the  document\nentity , including the entire internal DTD subset, for well-formedness. [ Definition :  While they are not required\nto check the document for validity, they are  REQUIRED  to  process \nall the declarations they read in the internal DTD subset and in any parameter\nentity that they read, up to the first reference to a parameter entity that\nthey do  not  read; that is to say, they  MUST  use the information\nin those declarations to  normalize \nattribute values,  include  the replacement\ntext of internal entities, and supply  default\nattribute values .] Except when  standalone=\"yes\" , they\n MUST NOT \n process \n entity\ndeclarations  or  attribute-list declarations \nencountered after a reference to a parameter entity that is not read, since\nthe entity may have contained overriding declarations; when  standalone=\"yes\" , processors  MUST \nprocess these declarations. Note that when processing invalid documents with a non-validating\nprocessor the application may not be presented with consistent\ninformation.  For example, several requirements for uniqueness\nwithin the document may not be met, including more than one element\nwith the same id, duplicate declarations of elements or notations\nwith the same name, etc.  In these cases the behavior of the parser\nwith respect to reporting such information to the application is\nundefined. \n 5.2 Using XML Processors The behavior of a validating XML processor is highly predictable; it must\nread every piece of a document and report all well-formedness and validity\nviolations. Less is required of a non-validating processor; it need not read\nany part of the document other than the document entity. This has two effects\nthat may be important to users of XML processors: Certain well-formedness errors, specifically those that require reading\nexternal entities, may fail to be detected by a non-validating processor. Examples\ninclude the constraints entitled  Entity Declared ,  Parsed Entity , and  No\nRecursion , as well as some of the cases described as  forbidden  in  4.4 XML Processor Treatment of Entities and References . The information passed from the processor to the application may\nvary, depending on whether the processor reads parameter and external entities.\nFor example, a non-validating processor may fail to  normalize \nattribute values,  include  the replacement\ntext of internal entities, or supply  default\nattribute values , where doing so depends on having read declarations\nin external or parameter entities , or in the internal subset after an unread \nparameter entity reference . For maximum reliability in interoperating between different XML processors,\napplications which use non-validating processors  SHOULD NOT  rely on any behaviors\nnot required of such processors. Applications which require DTD facilities not related to validation (such\nas the declaration of default attributes and internal entities that are or may be specified in\nexternal entities)  SHOULD  use validating XML processors. \n 6 Notation The formal grammar of XML is given in this specification using a simple\nExtended Backus-Naur Form (EBNF) notation. Each rule in the grammar defines\none symbol, in the form symbol ::= expression Symbols are written with an initial capital letter if they are the\nstart symbol of a regular language, otherwise with an initial lowercase letter.\nLiteral strings are quoted. Within the expression on the right-hand side of a rule, the following expressions\nare used to match strings of one or more characters:  \n #xN \n where  N  is a hexadecimal integer, the expression matches the character\nwhose number\n(code point) in ISO/IEC 10646 is  N . The number of leading zeros in the  #xN \nform is insignificant. \n [a-zA-Z] ,  [#xN-#xN] \n matches any  Char  with a value in the range(s) indicated (inclusive). \n [abc] ,  [#xN#xN#xN] \n matches any  Char  with a value among the characters\nenumerated. Enumerations and ranges can be mixed in one set of brackets. \n [^a-z] ,  [^#xN-#xN] \n matches any  Char  with a value  outside  the range\nindicated. \n [^abc] ,  [^#xN#xN#xN] \n matches any  Char  with a value not among the characters given. Enumerations\nand ranges of forbidden values can be mixed in one set of brackets. \n \"string\" \n matches a literal string  matching  that\ngiven inside the double quotes. \n 'string' \n matches a literal string  matching  that\ngiven inside the single quotes.  These symbols may be combined to match more complex patterns as follows,\nwhere  A  and  B  represent simple expressions:  ( expression ) \n expression  is treated as a unit and may be combined as described\nin this list. \n A? \n matches  A  or nothing; optional  A . \n A B \n matches  A  followed by  B . This\noperator has higher precedence than alternation; thus  A B | C D \nis identical to  (A B) | (C D) . \n A | B \n matches  A  or  B . \n A - B \n matches any string that matches  A  but does not match  B . \n A+ \n matches one or more occurrences of  A . Concatenation\nhas higher precedence than alternation; thus  A+ | B+  is identical\nto  (A+) | (B+) . \n A* \n matches zero or more occurrences of  A . Concatenation\nhas higher precedence than alternation; thus  A* | B*  is identical\nto  (A*) | (B*) .  Other notations used in the productions are:  \n /* ... */ \n comment. \n [ wfc: ... ] \n well-formedness constraint; this identifies by name a constraint on  well-formed  documents associated with a production. \n [ vc: ... ] \n validity constraint; this identifies by name a constraint on  valid \ndocuments associated with a production. \n A References \n A.1 Normative References IANA-CHARSETS (Internet\nAssigned Numbers Authority)  Official Names for Character Sets ,\ned. Keld Simonsen et al.  (See http://www.iana.org/assignments/character-sets.) IETF RFC 2119 IETF\n(Internet Engineering Task Force).  RFC 2119: Key words for use in RFCs to Indicate Requirement Levels .\nScott Bradner, 1997.  (See http://www.ietf.org/rfc/rfc2119.txt.) IETF BCP 47 IETF\n  (Internet Engineering Task Force).  BCP 47, consisting of  RFC 4646: Tags for Identifying Languages , and  RFC 4647: Matching of Language Tags ,\n\t\t\t\t\t\tA. Phillips, M. Davis. 2006. IETF RFC 3986 IETF (Internet Engineering Task Force).  RFC 3986: Uniform Resource Identifier (URI): Generic Syntax . T. Berners-Lee, R. Fielding, L. Masinter. 2005.  (See http://www.ietf.org/rfc/rfc3986.txt.) ISO/IEC 10646 ISO (International\nOrganization for Standardization).  ISO/IEC 10646-1:2000. Information\ntechnology \u2014 Universal Multiple-Octet Coded Character Set (UCS) \u2014\nPart 1: Architecture and Basic Multilingual Plane  and  ISO/IEC 10646-2:2001.\nInformation technology \u2014 Universal Multiple-Octet Coded Character Set (UCS) \u2014 Part 2:\nSupplementary Planes , as, from time to time, amended, replaced by a new edition or\nexpanded by the addition of new parts. [Geneva]: International Organization for Standardization.\n(See  http://www.iso.org/iso/home.htm  for the latest version.) ISO/IEC 10646:2000 ISO (International\nOrganization for Standardization).  ISO/IEC 10646-1:2000. Information\ntechnology \u2014 Universal Multiple-Octet Coded Character Set (UCS) \u2014\nPart 1: Architecture and Basic Multilingual Plane.  [Geneva]: International\nOrganization for Standardization, 2000. Unicode The Unicode Consortium.  The Unicode\nStandard, Version  5.0.0,   defined by: The Unicode Standard, Version 5.0 (Boston, MA,\nAddison-Wesley, 2007. ISBN 0-321-48091-0) . UnicodeNormal The Unicode\nConsortium.  Unicode normalization forms .  Mark Davis and\nMartin Durst.  2008.  (See http://unicode.org/reports/tr15/.) \n A.2 Other References Aho/Ullman Aho, Alfred V., Ravi Sethi, and Jeffrey D.\nUllman.  Compilers: Principles, Techniques, and Tools .\nReading: Addison-Wesley, 1986, rpt. corr. 1988. Br\u00fcggemann-Klein Br\u00fcggemann-Klein,\nAnne.  Formal Models in Document Processing . Habilitationsschrift. Faculty\nof Mathematics at the University of Freiburg, 1993.  (See ftp://ftp.informatik.uni-freiburg.de/documents/papers/brueggem/habil.ps.) Br\u00fcggemann-Klein and Wood Br\u00fcggemann-Klein,\nAnne, and Derick Wood.  Deterministic Regular Languages .\nUniversit\u00e4t Freiburg, Institut f\u00fcr Informatik, Bericht 38, Oktober 1991. Extended\nabstract in A. Finkel, M. Jantzen, Hrsg., STACS 1992, S. 173-184. Springer-Verlag,\nBerlin 1992. Lecture Notes in Computer Science 577. Full version titled  One-Unambiguous\nRegular Languages  in Information and Computation 140 (2): 229-253,\nFebruary 1998. Clark James Clark.\n Comparison of SGML and XML .  (See http://www.w3.org/TR/NOTE-sgml-xml-971215.) IANA-LANGCODES (Internet\nAssigned Numbers Authority)  Registry of Language Tags   (See http://www.iana.org/assignments/language-subtag-registry.) IETF RFC 2141 IETF\n(Internet Engineering Task Force).  RFC 2141: URN Syntax , ed.\nR. Moats. 1997.   (See http://www.ietf.org/rfc/rfc2141.txt.) IETF RFC 3023 IETF\n(Internet Engineering Task Force).  RFC 3023: XML Media Types .\neds. M. Murata, S. St.Laurent, D. Kohn. 2001.  (See http://www.ietf.org/rfc/rfc3023.txt.) IETF RFC 2781 IETF\n(Internet Engineering Task Force).  RFC 2781: UTF-16, an encoding\nof ISO 10646 , ed. P. Hoffman, F. Yergeau. 2000.  (See http://www.ietf.org/rfc/rfc2781.txt.) ISO 639 (International Organization for Standardization).\n ISO 639:1988 (E).\nCode for the representation of names of languages.  [Geneva]: International\nOrganization for Standardization, 1988. ISO 3166 (International Organization for Standardization).\n ISO 3166-1:1997\n(E). Codes for the representation of names of countries and their subdivisions \u2014\nPart 1: Country codes  [Geneva]: International Organization for\nStandardization, 1997. ISO 8879 ISO (International Organization for Standardization).  ISO\n8879:1986(E). Information processing \u2014 Text and Office Systems \u2014\nStandard Generalized Markup Language (SGML).  First edition \u2014\n1986-10-15. [Geneva]: International Organization for Standardization, 1986.  ISO/IEC 10744 ISO (International Organization for\nStandardization).  ISO/IEC 10744-1992 (E). Information technology \u2014\nHypermedia/Time-based Structuring Language (HyTime).   [Geneva]:\nInternational Organization for Standardization, 1992.  Extended Facilities\nAnnexe.  [Geneva]: International Organization for Standardization, 1996.  WEBSGML ISO\n(International Organization for Standardization).  ISO 8879:1986\nTC2. Information technology \u2014 Document Description and Processing Languages .\n[Geneva]: International Organization for Standardization, 1998.  (See http://www.sgmlsource.com/8879/n0029.htm.) XML Names Tim Bray,\nDave Hollander, and Andrew Layman, editors.  Namespaces in XML .\nTextuality, Hewlett-Packard, and Microsoft. World Wide Web Consortium, 1999.  (See http://www.w3.org/TR/xml-names/.) \n B Character Classes Because of changes to productions \n\t\t\t\t [4]  and  [5] , the productions in\n\t\t\t\tthis Appendix are now orphaned and not used anymore in determining\n\t\t\t\tname characters.  This Appendix may be removed in a future edition of \n\t\t\t\tthis specification; other specifications that wish to refer to the productions herein should\n\t\t\t\tdo so by means of a reference to the relevant production(s) in the\n\t\t\t\t Fourth Edition  of this specification.  Following the characteristics defined in the Unicode standard, characters\nare classed as base characters (among others, these contain the alphabetic\ncharacters of the Latin alphabet), ideographic characters, and combining characters (among\nothers, this class contains most diacritics). Digits and extenders are also\ndistinguished. \n Characters [84]\u00a0\u00a0\u00a0 Letter \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 \n BaseChar  |  Ideographic \n [85]\u00a0\u00a0\u00a0 BaseChar \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 [#x0041-#x005A] |\u00a0[#x0061-#x007A] |\u00a0[#x00C0-#x00D6]\n|\u00a0[#x00D8-#x00F6] |\u00a0[#x00F8-#x00FF] |\u00a0[#x0100-#x0131] |\u00a0[#x0134-#x013E]\n|\u00a0[#x0141-#x0148] |\u00a0[#x014A-#x017E] |\u00a0[#x0180-#x01C3] |\u00a0[#x01CD-#x01F0]\n|\u00a0[#x01F4-#x01F5] |\u00a0[#x01FA-#x0217] |\u00a0[#x0250-#x02A8] |\u00a0[#x02BB-#x02C1]\n|\u00a0#x0386 |\u00a0[#x0388-#x038A] |\u00a0#x038C |\u00a0[#x038E-#x03A1]\n|\u00a0[#x03A3-#x03CE] |\u00a0[#x03D0-#x03D6] |\u00a0#x03DA |\u00a0#x03DC\n|\u00a0#x03DE |\u00a0#x03E0 |\u00a0[#x03E2-#x03F3] |\u00a0[#x0401-#x040C]\n|\u00a0[#x040E-#x044F] |\u00a0[#x0451-#x045C] |\u00a0[#x045E-#x0481] |\u00a0[#x0490-#x04C4]\n|\u00a0[#x04C7-#x04C8] |\u00a0[#x04CB-#x04CC] |\u00a0[#x04D0-#x04EB] |\u00a0[#x04EE-#x04F5]\n|\u00a0[#x04F8-#x04F9] |\u00a0[#x0531-#x0556] |\u00a0#x0559 |\u00a0[#x0561-#x0586]\n|\u00a0[#x05D0-#x05EA] |\u00a0[#x05F0-#x05F2] |\u00a0[#x0621-#x063A] |\u00a0[#x0641-#x064A]\n|\u00a0[#x0671-#x06B7] |\u00a0[#x06BA-#x06BE] |\u00a0[#x06C0-#x06CE] |\u00a0[#x06D0-#x06D3]\n|\u00a0#x06D5 |\u00a0[#x06E5-#x06E6] |\u00a0[#x0905-#x0939] |\u00a0#x093D\n|\u00a0[#x0958-#x0961] |\u00a0[#x0985-#x098C] |\u00a0[#x098F-#x0990] |\u00a0[#x0993-#x09A8]\n|\u00a0[#x09AA-#x09B0] |\u00a0#x09B2 |\u00a0[#x09B6-#x09B9] |\u00a0[#x09DC-#x09DD]\n|\u00a0[#x09DF-#x09E1] |\u00a0[#x09F0-#x09F1] |\u00a0[#x0A05-#x0A0A] |\u00a0[#x0A0F-#x0A10]\n|\u00a0[#x0A13-#x0A28] |\u00a0[#x0A2A-#x0A30] |\u00a0[#x0A32-#x0A33] |\u00a0[#x0A35-#x0A36]\n|\u00a0[#x0A38-#x0A39] |\u00a0[#x0A59-#x0A5C] |\u00a0#x0A5E |\u00a0[#x0A72-#x0A74]\n|\u00a0[#x0A85-#x0A8B] |\u00a0#x0A8D |\u00a0[#x0A8F-#x0A91] |\u00a0[#x0A93-#x0AA8]\n|\u00a0[#x0AAA-#x0AB0] |\u00a0[#x0AB2-#x0AB3] |\u00a0[#x0AB5-#x0AB9] |\u00a0#x0ABD\n|\u00a0#x0AE0 |\u00a0[#x0B05-#x0B0C] |\u00a0[#x0B0F-#x0B10] |\u00a0[#x0B13-#x0B28]\n|\u00a0[#x0B2A-#x0B30] |\u00a0[#x0B32-#x0B33] |\u00a0[#x0B36-#x0B39] |\u00a0#x0B3D\n|\u00a0[#x0B5C-#x0B5D] |\u00a0[#x0B5F-#x0B61] |\u00a0[#x0B85-#x0B8A] |\u00a0[#x0B8E-#x0B90]\n|\u00a0[#x0B92-#x0B95] |\u00a0[#x0B99-#x0B9A] |\u00a0#x0B9C |\u00a0[#x0B9E-#x0B9F]\n|\u00a0[#x0BA3-#x0BA4] |\u00a0[#x0BA8-#x0BAA] |\u00a0[#x0BAE-#x0BB5] |\u00a0[#x0BB7-#x0BB9]\n|\u00a0[#x0C05-#x0C0C] |\u00a0[#x0C0E-#x0C10] |\u00a0[#x0C12-#x0C28] |\u00a0[#x0C2A-#x0C33]\n|\u00a0[#x0C35-#x0C39] |\u00a0[#x0C60-#x0C61] |\u00a0[#x0C85-#x0C8C] |\u00a0[#x0C8E-#x0C90]\n|\u00a0[#x0C92-#x0CA8] |\u00a0[#x0CAA-#x0CB3] |\u00a0[#x0CB5-#x0CB9] |\u00a0#x0CDE\n|\u00a0[#x0CE0-#x0CE1] |\u00a0[#x0D05-#x0D0C] |\u00a0[#x0D0E-#x0D10] |\u00a0[#x0D12-#x0D28]\n|\u00a0[#x0D2A-#x0D39] |\u00a0[#x0D60-#x0D61] |\u00a0[#x0E01-#x0E2E] |\u00a0#x0E30\n|\u00a0[#x0E32-#x0E33] |\u00a0[#x0E40-#x0E45] |\u00a0[#x0E81-#x0E82] |\u00a0#x0E84\n|\u00a0[#x0E87-#x0E88] |\u00a0#x0E8A |\u00a0#x0E8D |\u00a0[#x0E94-#x0E97]\n|\u00a0[#x0E99-#x0E9F] |\u00a0[#x0EA1-#x0EA3] |\u00a0#x0EA5 |\u00a0#x0EA7\n|\u00a0[#x0EAA-#x0EAB] |\u00a0[#x0EAD-#x0EAE] |\u00a0#x0EB0 |\u00a0[#x0EB2-#x0EB3]\n|\u00a0#x0EBD |\u00a0[#x0EC0-#x0EC4] |\u00a0[#x0F40-#x0F47] |\u00a0[#x0F49-#x0F69]\n|\u00a0[#x10A0-#x10C5] |\u00a0[#x10D0-#x10F6] |\u00a0#x1100 |\u00a0[#x1102-#x1103]\n|\u00a0[#x1105-#x1107] |\u00a0#x1109 |\u00a0[#x110B-#x110C] |\u00a0[#x110E-#x1112]\n|\u00a0#x113C |\u00a0#x113E |\u00a0#x1140 |\u00a0#x114C |\u00a0#x114E |\u00a0#x1150\n|\u00a0[#x1154-#x1155] |\u00a0#x1159 |\u00a0[#x115F-#x1161] |\u00a0#x1163\n|\u00a0#x1165 |\u00a0#x1167 |\u00a0#x1169 |\u00a0[#x116D-#x116E] |\u00a0[#x1172-#x1173]\n|\u00a0#x1175 |\u00a0#x119E |\u00a0#x11A8 |\u00a0#x11AB |\u00a0[#x11AE-#x11AF]\n|\u00a0[#x11B7-#x11B8] |\u00a0#x11BA |\u00a0[#x11BC-#x11C2] |\u00a0#x11EB\n|\u00a0#x11F0 |\u00a0#x11F9 |\u00a0[#x1E00-#x1E9B] |\u00a0[#x1EA0-#x1EF9]\n|\u00a0[#x1F00-#x1F15] |\u00a0[#x1F18-#x1F1D] |\u00a0[#x1F20-#x1F45] |\u00a0[#x1F48-#x1F4D]\n|\u00a0[#x1F50-#x1F57] |\u00a0#x1F59 |\u00a0#x1F5B |\u00a0#x1F5D |\u00a0[#x1F5F-#x1F7D]\n|\u00a0[#x1F80-#x1FB4] |\u00a0[#x1FB6-#x1FBC] |\u00a0#x1FBE |\u00a0[#x1FC2-#x1FC4]\n|\u00a0[#x1FC6-#x1FCC] |\u00a0[#x1FD0-#x1FD3] |\u00a0[#x1FD6-#x1FDB] |\u00a0[#x1FE0-#x1FEC]\n|\u00a0[#x1FF2-#x1FF4] |\u00a0[#x1FF6-#x1FFC] |\u00a0#x2126 |\u00a0[#x212A-#x212B]\n|\u00a0#x212E |\u00a0[#x2180-#x2182] |\u00a0[#x3041-#x3094] |\u00a0[#x30A1-#x30FA]\n|\u00a0[#x3105-#x312C] |\u00a0[#xAC00-#xD7A3]  [86]\u00a0\u00a0\u00a0 Ideographic \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 [#x4E00-#x9FA5] |\u00a0#x3007 |\u00a0[#x3021-#x3029]  [87]\u00a0\u00a0\u00a0 CombiningChar \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 [#x0300-#x0345] |\u00a0[#x0360-#x0361] |\u00a0[#x0483-#x0486]\n|\u00a0[#x0591-#x05A1] |\u00a0[#x05A3-#x05B9] |\u00a0[#x05BB-#x05BD] |\u00a0#x05BF\n|\u00a0[#x05C1-#x05C2] |\u00a0#x05C4 |\u00a0[#x064B-#x0652] |\u00a0#x0670\n|\u00a0[#x06D6-#x06DC] |\u00a0[#x06DD-#x06DF] |\u00a0[#x06E0-#x06E4] |\u00a0[#x06E7-#x06E8]\n|\u00a0[#x06EA-#x06ED] |\u00a0[#x0901-#x0903] |\u00a0#x093C |\u00a0[#x093E-#x094C]\n|\u00a0#x094D |\u00a0[#x0951-#x0954] |\u00a0[#x0962-#x0963] |\u00a0[#x0981-#x0983]\n|\u00a0#x09BC |\u00a0#x09BE |\u00a0#x09BF |\u00a0[#x09C0-#x09C4] |\u00a0[#x09C7-#x09C8]\n|\u00a0[#x09CB-#x09CD] |\u00a0#x09D7 |\u00a0[#x09E2-#x09E3] |\u00a0#x0A02\n|\u00a0#x0A3C |\u00a0#x0A3E |\u00a0#x0A3F |\u00a0[#x0A40-#x0A42] |\u00a0[#x0A47-#x0A48]\n|\u00a0[#x0A4B-#x0A4D] |\u00a0[#x0A70-#x0A71] |\u00a0[#x0A81-#x0A83] |\u00a0#x0ABC\n|\u00a0[#x0ABE-#x0AC5] |\u00a0[#x0AC7-#x0AC9] |\u00a0[#x0ACB-#x0ACD] |\u00a0[#x0B01-#x0B03]\n|\u00a0#x0B3C |\u00a0[#x0B3E-#x0B43] |\u00a0[#x0B47-#x0B48] |\u00a0[#x0B4B-#x0B4D]\n|\u00a0[#x0B56-#x0B57] |\u00a0[#x0B82-#x0B83] |\u00a0[#x0BBE-#x0BC2] |\u00a0[#x0BC6-#x0BC8]\n|\u00a0[#x0BCA-#x0BCD] |\u00a0#x0BD7 |\u00a0[#x0C01-#x0C03] |\u00a0[#x0C3E-#x0C44]\n|\u00a0[#x0C46-#x0C48] |\u00a0[#x0C4A-#x0C4D] |\u00a0[#x0C55-#x0C56] |\u00a0[#x0C82-#x0C83]\n|\u00a0[#x0CBE-#x0CC4] |\u00a0[#x0CC6-#x0CC8] |\u00a0[#x0CCA-#x0CCD] |\u00a0[#x0CD5-#x0CD6]\n|\u00a0[#x0D02-#x0D03] |\u00a0[#x0D3E-#x0D43] |\u00a0[#x0D46-#x0D48] |\u00a0[#x0D4A-#x0D4D]\n|\u00a0#x0D57 |\u00a0#x0E31 |\u00a0[#x0E34-#x0E3A] |\u00a0[#x0E47-#x0E4E]\n|\u00a0#x0EB1 |\u00a0[#x0EB4-#x0EB9] |\u00a0[#x0EBB-#x0EBC] |\u00a0[#x0EC8-#x0ECD]\n|\u00a0[#x0F18-#x0F19] |\u00a0#x0F35 |\u00a0#x0F37 |\u00a0#x0F39 |\u00a0#x0F3E\n|\u00a0#x0F3F |\u00a0[#x0F71-#x0F84] |\u00a0[#x0F86-#x0F8B] |\u00a0[#x0F90-#x0F95]\n|\u00a0#x0F97 |\u00a0[#x0F99-#x0FAD] |\u00a0[#x0FB1-#x0FB7] |\u00a0#x0FB9\n|\u00a0[#x20D0-#x20DC] |\u00a0#x20E1 |\u00a0[#x302A-#x302F] |\u00a0#x3099\n|\u00a0#x309A  [88]\u00a0\u00a0\u00a0 Digit \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 [#x0030-#x0039] |\u00a0[#x0660-#x0669] |\u00a0[#x06F0-#x06F9]\n|\u00a0[#x0966-#x096F] |\u00a0[#x09E6-#x09EF] |\u00a0[#x0A66-#x0A6F] |\u00a0[#x0AE6-#x0AEF]\n|\u00a0[#x0B66-#x0B6F] |\u00a0[#x0BE7-#x0BEF] |\u00a0[#x0C66-#x0C6F] |\u00a0[#x0CE6-#x0CEF]\n|\u00a0[#x0D66-#x0D6F] |\u00a0[#x0E50-#x0E59] |\u00a0[#x0ED0-#x0ED9] |\u00a0[#x0F20-#x0F29]  [89]\u00a0\u00a0\u00a0 Extender \u00a0\u00a0\u00a0::=\u00a0\u00a0\u00a0 #x00B7 |\u00a0#x02D0 |\u00a0#x02D1 |\u00a0#x0387 |\u00a0#x0640\n|\u00a0#x0E46 |\u00a0#x0EC6 |\u00a0#x3005 |\u00a0[#x3031-#x3035] |\u00a0[#x309D-#x309E]\n|\u00a0[#x30FC-#x30FE]  The character classes defined here can be derived from the Unicode 2.0\ncharacter database as follows: Name start characters must have one of the categories Ll, Lu, Lo,\nLt, Nl. Name characters other than Name-start characters must have one of\nthe categories Mc, Me, Mn, Lm, or Nd. Characters in the compatibility area (i.e. with character code greater\nthan #xF900 and less than #xFFFE) are not allowed in XML names. Characters which have a font or compatibility decomposition (i.e.\nthose with a \"compatibility formatting tag\" in field 5 of the\ndatabase -- marked by field 5 beginning with a \"<\") are not\nallowed. The following characters are treated as name-start characters rather\nthan name characters, because the property file classifies them as Alphabetic:\n[#x02BB-#x02C1], #x0559, #x06E5, #x06E6. Characters #x20DD-#x20E0 are excluded (in accordance with Unicode 2.0,\nsection 5.14). Character #x00B7 is classified as an extender, because the property\nlist so identifies it. Character #x0387 is added as a name character, because #x00B7 is\nits canonical equivalent. Characters ':' and '_' are allowed as name-start characters. Characters '-' and '.' are allowed as name characters. \n C XML and SGML (Non-Normative) XML\nis designed to be a subset of SGML, in that every XML document should also\nbe a conforming SGML document. For a detailed comparison of the additional\nrestrictions that XML places on documents beyond those of SGML, see  [Clark] . \n D Expansion of Entity and Character References (Non-Normative) This appendix contains some examples illustrating the sequence of entity-\nand character-reference recognition and expansion, as specified in  4.4 XML Processor Treatment of Entities and References . If the DTD contains the declaration <!ENTITY example \"<p>An ampersand (&#38;#38;) may be escaped\nnumerically (&#38;#38;#38;) or with a general entity\n(&amp;amp;).</p>\" > then the XML processor will recognize the character references when it\nparses the entity declaration, and resolve them before storing the following\nstring as the value of the entity \"\n\t\t\t\t\t example \n\t\t\t\t\": <p>An ampersand (&#38;) may be escaped\nnumerically (&#38;#38;) or with a general entity\n(&amp;amp;).</p> A reference in the document to \"\n\t\t\t\t\t &example; \n\t\t\t\t\"\nwill cause the text to be reparsed, at which time the start- and end-tags\nof the  p  element will be recognized and the three references will\nbe recognized and expanded, resulting in a  p  element with the following\ncontent (all data, no delimiters or markup): An ampersand (&) may be escaped\nnumerically (&#38;) or with a general entity\n(&amp;). A more complex example will illustrate the rules and their effects fully.\nIn the following example, the line numbers are solely for reference. 1 <?xml version='1.0'?>\n2 <!DOCTYPE test [\n3 <!ELEMENT test (#PCDATA) >\n4 <!ENTITY % xx '&#37;zz;'>\n5 <!ENTITY % zz '&#60;!ENTITY tricky \"error-prone\" >' >\n6 %xx;\n7 ]>\n8 <test>This sample shows a &tricky; method.</test> This produces the following: in line 4, the reference to character 37 is expanded immediately,\nand the parameter entity \"\n\t\t\t\t\t\t\t xx \n\t\t\t\t\t\t\" is stored in the symbol\ntable with the value \"\n\t\t\t\t\t\t\t %zz; \n\t\t\t\t\t\t\". Since the replacement\ntext is not rescanned, the reference to parameter entity \"\n\t\t\t\t\t\t\t zz \n\t\t\t\t\t\t\"\nis not recognized. (And it would be an error if it were, since \"\n\t\t\t\t\t\t\t zz \n\t\t\t\t\t\t\"\nis not yet declared.) in line 5, the character reference \"\n\t\t\t\t\t\t\t &#60; \n\t\t\t\t\t\t\"\nis expanded immediately and the parameter entity \"\n\t\t\t\t\t\t\t zz \n\t\t\t\t\t\t\"\nis stored with the replacement text \"\n\t\t\t\t\t\t\t <!ENTITY tricky \"error-prone\"\n> \n\t\t\t\t\t\t\", which is a well-formed entity declaration. in line 6, the reference to \"\n\t\t\t\t\t\t\t xx \n\t\t\t\t\t\t\" is recognized,\nand the replacement text of \"\n\t\t\t\t\t\t\t xx \n\t\t\t\t\t\t\" (namely \"\n\t\t\t\t\t\t\t %zz; \n\t\t\t\t\t\t\")\nis parsed. The reference to \"\n\t\t\t\t\t\t\t zz \n\t\t\t\t\t\t\" is recognized in\nits turn, and its replacement text (\"\n\t\t\t\t\t\t\t <!ENTITY tricky \"error-prone\"\n> \n\t\t\t\t\t\t\") is parsed. The general entity \"\n\t\t\t\t\t\t\t tricky \n\t\t\t\t\t\t\"\nhas now been declared, with the replacement text \"\n\t\t\t\t\t\t\t error-prone \n\t\t\t\t\t\t\". in line 8, the reference to the general entity \"\n\t\t\t\t\t\t\t tricky \n\t\t\t\t\t\t\"\nis recognized, and it is expanded, so the full content of the  test \nelement is the self-describing (and ungrammatical) string  This sample\nshows a error-prone method. \n In the following example <!DOCTYPE foo [ \n<!ENTITY x \"&lt;\"> \n]> \n<foo attr=\"&x;\"/> the replacement text of x is the four characters \"&lt;\" because\n\t\t\t\treferences to general entities in entity values are  bypassed .\n\t\t\t\tThe replacement text of lt is a character reference to\n\t\t\t\tthe less-than character, for example the five characters \"&#60;\"\n\t\t\t\t(see  4.6 Predefined Entities ).  Since neither of these contains a less-than character\n\t\t\t\tthe result is well-formed. If the definition of x had been <!ENTITY x \"&#60;\"> then the document would not have been well-formed, because the\n\t\t\t\treplacement text of x would be the single character \"<\" which\n\t\t\t\tis not permitted in attribute values (see  WFC: No < in Attribute Values ). \n E Deterministic Content Models (Non-Normative) As\nnoted in  3.2.1 Element Content , it is required that content\nmodels in element type declarations be deterministic. This requirement is  for compatibility  with SGML (which calls deterministic\ncontent models \"unambiguous\"); XML processors built\nusing SGML systems may flag non-deterministic content models as errors. For example, the content model  ((b, c) | (b, d))  is non-deterministic,\nbecause given an initial  b  the XML processor\ncannot know which  b  in the model is being matched without looking\nahead to see which element follows the  b . In this case, the two references\nto  b  can be collapsed into a single reference, making the model read  (b,\n(c | d)) . An initial  b  now clearly matches only a single name\nin the content model. The processor doesn't need to look ahead to see what follows; either  c  or  d \nwould be accepted. More formally: a finite state automaton may be constructed from the content\nmodel using the standard algorithms, e.g. algorithm 3.5 in section 3.9 of\nAho, Sethi, and Ullman  [Aho/Ullman] . In many such algorithms, a follow\nset is constructed for each position in the regular expression (i.e., each\nleaf node in the syntax tree for the regular expression); if any position\nhas a follow set in which more than one following position is labeled with\nthe same element type name, then the content model is in error and may be\nreported as an error. Algorithms exist which allow many but not all non-deterministic content\nmodels to be reduced automatically to equivalent deterministic models; see\nBr\u00fcggemann-Klein 1991  [Br\u00fcggemann-Klein] . \n F Autodetection of Character Encodings (Non-Normative) The XML encoding declaration functions as an internal label on each entity,\nindicating which character encoding is in use. Before an XML processor can\nread the internal label, however, it apparently has to know what character\nencoding is in use\u2014which is what the internal label is trying to indicate.\nIn the general case, this is a hopeless situation. It is not entirely hopeless\nin XML, however, because XML limits the general case in two ways: each implementation\nis assumed to support only a finite set of character encodings, and the XML\nencoding declaration is restricted in position and content in order to make\nit feasible to autodetect the character encoding in use in each entity in\nnormal cases. Also, in many cases other sources of information are available\nin addition to the XML data stream itself. Two cases may be distinguished,\ndepending on whether the XML entity is presented to the processor without,\nor with, any accompanying (external) information. We  will  consider\n these cases in turn. \n F.1 Detection Without External Encoding Information Because each XML entity not accompanied by external\nencoding information and not in UTF-8 or UTF-16 encoding must\nbegin with an XML encoding declaration, in which the first characters must\nbe ' <?xml ', any conforming processor can detect, after two\nto four octets of input, which of the following cases apply. In reading this\nlist, it may help to know that in UCS-4, '<' is \"\n\t\t\t\t\t\t #x0000003C \n\t\t\t\t\t\"\nand '?' is \"\n\t\t\t\t\t\t #x0000003F \n\t\t\t\t\t\", and the Byte Order Mark\nrequired of UTF-16 data streams is \"\n\t\t\t\t\t\t #xFEFF \n\t\t\t\t\t\". The notation\n ##  is used to denote any byte value except that two consecutive\n ## s cannot be both 00. With a Byte Order Mark: \n 00 00 FE\nFF \n UCS-4, big-endian machine (1234 order) \n FF\nFE 00 00 \n UCS-4, little-endian machine (4321 order) \n 00 00 FF FE \n UCS-4, unusual octet order (2143) \n FE FF 00 00 \n UCS-4, unusual octet order (3412) \n FE FF ## ## \n UTF-16, big-endian \n FF FE ## ## \n UTF-16, little-endian \n EF BB BF \n UTF-8 Without a Byte Order Mark: \n 00\u00a000\u00a000\u00a03C \n UCS-4 or other encoding with a 32-bit code unit and ASCII\ncharacters encoded as ASCII values, in respectively big-endian (1234), little-endian\n(4321) and two unusual byte orders (2143 and 3412). The encoding declaration\nmust be read to determine which of UCS-4 or other supported 32-bit encodings\napplies. \n 3C 00 00 00 \n 00 00 3C 00 \n 00 3C 00 00 \n 00 3C 00 3F \n UTF-16BE or big-endian ISO-10646-UCS-2\nor other encoding with a 16-bit code unit in big-endian order and ASCII characters\nencoded as ASCII values (the encoding declaration must be read to determine\nwhich) \n 3C 00 3F 00 \n UTF-16LE or little-endian\nISO-10646-UCS-2 or other encoding with a 16-bit code unit in little-endian\norder and ASCII characters encoded as ASCII values (the encoding declaration\nmust be read to determine which) \n 3C 3F 78 6D \n UTF-8, ISO 646, ASCII, some part of ISO 8859, Shift-JIS, EUC, or any other\n7-bit, 8-bit, or mixed-width encoding which ensures that the characters of\nASCII have their normal positions, width, and values; the actual encoding\ndeclaration must be read to detect which of these applies, but since all of\nthese encodings use the same bit patterns for the relevant ASCII characters,\nthe encoding declaration itself may be read reliably \n 4C\n6F A7 94 \n EBCDIC (in some flavor; the full encoding declaration\nmust be read to tell which code page is in use) Other UTF-8 without an encoding declaration, or else the data stream is mislabeled\n(lacking a required encoding declaration), corrupt, fragmentary, or enclosed\nin a wrapper of some kind Note: In cases above which do not require reading the encoding declaration to\ndetermine the encoding, section 4.3.3 still requires that the encoding declaration,\nif present, be read and that the encoding name be checked to match the actual\nencoding of the entity. Also, it is possible that new character encodings\nwill be invented that will make it necessary to use the encoding declaration\nto determine the encoding, in cases where this is not required at present. This level of autodetection is enough to read the XML encoding declaration\nand parse the character-encoding identifier, which is still necessary to distinguish\nthe individual members of each family of encodings (e.g. to tell UTF-8 from\n8859, and the parts of 8859 from each other, or to distinguish the specific\nEBCDIC code page in use, and so on). Because the contents of the encoding declaration are restricted to characters\nfrom the ASCII repertoire (however encoded),\na processor can reliably read the entire encoding declaration as soon as it\nhas detected which family of encodings is in use. Since in practice, all widely\nused character encodings fall into one of the categories above, the XML encoding\ndeclaration allows reasonably reliable in-band labeling of character encodings,\neven when external sources of information at the operating-system or transport-protocol\nlevel are unreliable. Character encodings such as UTF-7\nthat make overloaded usage of ASCII-valued bytes may fail to be reliably detected. Once the processor has detected the character encoding in use, it can act\nappropriately, whether by invoking a separate input routine for each case,\nor by calling the proper conversion function on each character of input. Like any self-labeling system, the XML encoding declaration will not work\nif any software changes the entity's character set or encoding without updating\nthe encoding declaration. Implementors of character-encoding routines should\nbe careful to ensure the accuracy of the internal and external information\nused to label the entity. \n F.2 Priorities in the Presence of External Encoding Information The second possible case occurs when the XML entity is accompanied by encoding\ninformation, as in some file systems and some network protocols. When multiple\nsources of information are available, their relative priority and the preferred\nmethod of handling conflict should be specified as part of the higher-level\nprotocol used to deliver XML. In particular, please refer\nto  [IETF RFC 3023]  or its successor, which defines the  text/xml \nand  application/xml  MIME types and provides some useful guidance.\nIn the interests of interoperability, however, the following rule is recommended. If an XML entity is in a file, the Byte-Order Mark and encoding declaration are used\n(if present) to determine the character encoding. \n G W3C XML Working Group (Non-Normative) This specification was prepared and approved for publication by the W3C\nXML Working Group (WG). WG approval of this specification does not necessarily\nimply that all WG members voted for its approval. The current and former\nparticipants of the XML WG are: Jon Bosak, Sun ( Chair )  James Clark ( Technical Lead )  Tim Bray, Textuality and Netscape ( XML Co-editor )  Jean Paoli, Microsoft ( XML Co-editor )  C. M. Sperberg-McQueen, U. of Ill. ( XML Co-editor )  Dan Connolly, W3C ( W3C Liaison )  Paula Angerstein, Texcel Steve DeRose, INSO Dave Hollander, HP Eliot Kimber, ISOGEN Eve Maler, ArborText Tom Magliery, NCSA Murray Maloney, SoftQuad, Grif SA, Muzmo and Veo Systems MURATA Makoto (FAMILY Given), Fuji Xerox Information Systems Joel Nava, Adobe Conleth O'Connell, Vignette Peter Sharpe, SoftQuad John Tigue, DataChannel \n H W3C XML Core Working Group (Non-Normative) The  fifth  edition of this specification was prepared by the W3C XML Core\nWorking Group (WG). The participants in the WG at the time of publication of this\nedition were: John Cowan, Google Andrew Fang, PTC-Arbortext Paul Grosso, PTC-Arbortext ( Co-Chair )  Konrad Lanz, A-SIT Glenn Marcy, IBM Henry Thompson, W3C ( Staff Contact )  Richard Tobin, University of Edinburgh Daniel Veillard Norman Walsh, Mark Logic ( Co-Chair )  Fran\u00e7ois Yergeau \n I Production Notes (Non-Normative) This edition was encoded in a\nslightly modified version of the\n XMLspec DTD, v2.10 .\nThe XHTML versions were produced with a combination of the\n xmlspec.xsl ,\n diffspec.xsl ,\nand  REC-xml.xsl \nXSLT stylesheets. \n J Suggestions for XML Names (Non-Normative) The following suggestions define what is believed to be best\n\t\t\t\tpractice in the construction of XML names used as element names,\n\t\t\t\tattribute names, processing instruction targets, entity names,\n\t\t\t\tnotation names, and the values of attributes of type ID, and are\n\t\t\t\tintended as guidance for document authors and schema designers.\n\t\t\t\tAll references to Unicode are understood with respect to\n\t\t\t\ta particular version of the Unicode Standard greater than or equal\n\t\t\t\tto 5.0; which version should be used is left to the discretion of\n\t\t\t\tthe document author or schema designer. The first two suggestions are directly derived from the rules\n\t\t\t\tgiven for identifiers in Standard Annex #31 (UAX #31) of the Unicode Standard, version 5.0  [Unicode] , and\n\t\t\t\texclude all control characters, enclosing nonspacing marks,\n\t\t\t\tnon-decimal numbers, private-use characters, punctuation characters\n\t\t\t\t(with the noted exceptions), symbol characters, unassigned\n\t\t\t\tcodepoints, and white space characters. The other suggestions\n\t\t\t\tare mostly derived from Appendix B in previous editions of this specification. The first character of any name should have a Unicode property\n\t\t\t\t\t\tof ID_Start, or else be '_' #x5F. Characters other than the first should have a Unicode property\n\t\t\t\t\t\tof ID_Continue, or be one of the characters listed in the table\n\t\t\t\t\t\tentitled \"Characters for Natural Language Identifiers\" in UAX\n\t\t\t\t\t\t#31, with the exception of \"'\" #x27 and \"\u2019\" #x2019. Characters in names should be expressed using\nNormalization Form C as defined in  [UnicodeNormal] . Ideographic characters which have a canonical decomposition\n\t\t\t\t\t\t(including those in the ranges [#xF900-#xFAFF] and\n\t\t\t\t\t\t[#x2F800-#x2FFFD], with 12 exceptions) should not be used in names.\n\t\t\t\t\t Characters which have a compatibility decomposition (those with\n\t\t\t\t\t\ta \"compatibility formatting tag\" in field 5 of the Unicode\n\t\t\t\t\t\tCharacter Database -- marked by field 5 beginning with a \"<\")\n\t\t\t\t\t\tshould not be used in names.  This suggestion does not apply\n\t\t\t\t\t\tto characters which\n\t\t\t\t\t\tdespite their compatibility decompositions are in regular use in\n\t\t\t\t\t\ttheir scripts, for\nexample #x0E33 THAI CHARACTER SARA AM or #x0EB3 LAO CHARACTER AM. Combining characters meant for use with symbols only (including\n\t\t\t\t\t\tthose in the ranges [#x20D0-#x20EF] and [#x1D165-#x1D1AD]) should\n\t\t\t\t\t\tnot be used in names. The interlinear annotation characters ([#xFFF9-#xFFFB]) should\n\t\t\t\t\t\tnot be used in names. Variation selector characters should not be used in names. Names which are nonsensical, unpronounceable, hard to read, or\n\t\t\t\t\t\teasily confusable with other names should not be employed."}