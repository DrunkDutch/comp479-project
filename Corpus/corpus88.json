{"url": "http://www.w3.org/TR/WAI-WEBCONTENT/", "content": "Web Content Accessibility Guidelines 1.0 \n[ contents ] \u00a0\n[ checklist ] \u00a0\n Web Content Accessibility Guidelines 1.0 \n W3C Recommendation 5-May-1999 \n This version:\n       http://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505 \n ( plain text ,\n           PostScript ,\n           PDF ,\n           gzip tar file of\n           HTML ,\n            zip archive of HTML )\n       Latest version:\n       http://www.w3.org/TR/WAI-WEBCONTENT \n Previous version:\n       http://www.w3.org/TR/1999/WAI-WEBCONTENT-19990324 \n Editors:\n       Wendy Chisholm, \n             Trace R & D Center , \n            University of Wisconsin -- Madison \n         Gregg Vanderheiden, \n             Trace R & D Center , \n            University of Wisconsin -- Madison \n         Ian Jacobs,  W3C \n Copyright  \u00a9 1999  W3C \n( MIT ,\n INRIA ,\n Keio ), All Rights Reserved. W3C\n liability ,\n trademark ,\n document\nuse  and\n software\nlicensing  rules apply.\n   Abstract \n These guidelines explain how to make  Web content\n  accessible to people with\ndisabilities. The guidelines are intended for all  Web content\ndevelopers  (page authors and site designers) and for\ndevelopers of  authoring tools . The primary goal of\nthese guidelines is to promote accessibility. However, following them\nwill also make Web content more available to  all  users, whatever\n user agent  \n\tthey are using (e.g., desktop\nbrowser, voice browser, mobile phone, automobile-based \npersonal computer, etc.)  or\nconstraints they may be operating under (e.g., noisy \nsurroundings, under- or over-illuminated rooms, in a hands-free\nenvironment, etc.). Following these guidelines will also help people\nfind information on the Web more quickly. These guidelines do not\ndiscourage content developers from using images, video, etc., but\nrather explain how to make multimedia content more accessible to a wide\naudience.\n This is a reference document for accessibility principles and\ndesign ideas. Some of the strategies discussed in this document\naddress certain Web internationalization and mobile access\nconcerns. However, this document focuses on accessibility and does not\nfully address the related concerns of other \n W3C  Activities. Please\nconsult the  W3C Mobile Access\nActivity home page  and the\n W3C Internationalization\nActivity home page  for more information.\n This document is meant to be stable and therefore does not provide\nspecific information about browser support for different technologies\nas that information changes rapidly. Instead, the  Web Accessibility Initiative  \n( WAI ) Web\nsite provides such information (refer to  [WAI-UA-SUPPORT] ).\n This document includes an appendix that organizes all of the  checkpoints  by topic and priority.\nThe checkpoints in the appendix link to their definitions in the\ncurrent document. The topics identified in the appendix include\nimages, multimedia, tables, frames, forms, and scripts.  The appendix\nis available as either a\ntabular summary of checkpoints  or as a  simple list of checkpoints .\n A separate document, entitled \"Techniques for Web Content Accessibility Guidelines 1.0\" ( [TECHNIQUES] ), explains how to implement\nthe checkpoints defined in the current document. The Techniques\nDocument discusses each checkpoint in more detail and provides\nexamples using the \nHypertext Markup Language ( HTML ), \nCascading Style Sheets ( CSS ),\nSynchronized Multimedia Integration Language \n( SMIL ), \nand the Mathematical Markup Language ( MathML ). The Techniques Document also includes\ntechniques for document validation and testing, and\nan index of HTML elements and attributes (and which techniques \nuse them). The Techniques Document has been designed to \ntrack changes in technology and is expected to be updated \nmore frequently than the current document.\n Note.  Not all browsers or multimedia tools may\nsupport the features described in the guidelines. In particular, new\nfeatures of HTML 4.0 or CSS 1 or CSS 2 may not be supported. \n \"Web Content Accessibility Guidelines 1.0\" is part of a series of accessibility guidelines\npublished by the  Web Accessibility\nInitiative . The series also includes User Agent Accessibility\nGuidelines ( [WAI-USERAGENT] ) and\nAuthoring Tool Accessibility Guidelines ( [WAI-AUTOOLS] ).\n   Status of this document \n This document has been reviewed by W3C Members and other interested\nparties and has been endorsed by the Director as a\nW3C Recommendation. It is a stable document and may be used as\nreference material or cited as a normative reference from another\ndocuments. W3C's role in making the Recommendation is to draw attention\nto the specification and to promote its widespread deployment. This\nenhances the functionality and universality of the Web.\n The English version of this specification is the only normative\nversion. However, for translations in other languages see  http://www.w3.org/WAI/GL/WAI-WEBCONTENT-TRANSLATIONS . \n The list of known errors in this document is available at  http://www.w3.org/WAI/GL/WAI-WEBCONTENT-ERRATA . Please report errors in this\ndocument to  wai-wcag-editor@w3.org .\n A list of current W3C Recommendations and other technical documents\ncan be found at  http://www.w3.org/TR .\n This document has been produced as part of the W3C  Web Accessibility Initiative . The\ngoal of the  Web Content Guidelines\nWorking Group  is discussed in the   Working Group\ncharter . \n Table of Contents \n  Abstract \n  Status of this document \n 1. Introduction \n 2. Themes of Accessible Design \n 2.1 Ensuring Graceful Transformation \n 2.2 Making Content Understandable and Navigable \n 3. How the Guidelines are Organized \n 3.1 Document conventions \n 4. Priorities \n 5. Conformance \n 6. Web Content Accessibility Guidelines \n 1.  Provide equivalent alternatives to auditory and visual content. \n 2.  Don't rely on color alone. \n 3.  Use markup and style sheets and do so properly. \n 4.  Clarify natural language usage \n 5.  Create tables that transform gracefully. \n 6.  Ensure that pages featuring new technologies transform gracefully. \n 7.  Ensure user control of time-sensitive content changes. \n 8.  Ensure direct accessibility of embedded user interfaces. \n 9.  Design for device-independence. \n 10.  Use interim solutions. \n 11.  Use W3C technologies and guidelines. \n 12.  Provide context and orientation information. \n 13.  Provide clear navigation mechanisms. \n 14.  Ensure that documents are clear and simple. \n  Appendix A. -- Validation \n  Appendix B. -- Glossary  \n  Acknowledgments \n  References \n The appendix list of checkpoints is available as either a\ntabular summary of checkpoints  or as a  simple list of checkpoints .\n 1.  Introduction \n For those unfamiliar with accessibility issues pertaining to\n  Web page design, consider that many users may be operating\n  in contexts very different from your own: \n They may not be able to see, hear, move, or\n       may not be able to process some types of \n       information easily or at all.\n    They may have difficulty reading or comprehending text.\n    They may not have or be able to use a keyboard or mouse.\n    They may have a text-only screen, a small screen, or\n       a slow Internet connection.\n    They may not speak or understand fluently\n       the language in which the document is written.\n    They may be in a situation where their eyes, ears, or\n       hands are busy or interfered with (e.g., driving to work, \n       working in a loud environment, etc.).\n    They may have an early version of a browser, a different\n       browser entirely, a voice browser, or a \n       different operating system.\n Content developers must consider these\n  different situations during page design.  While there are several\n  situations to consider, each accessible design choice generally\n  benefits several disability groups at once and the Web community as a\n  whole. For example, by using  style\n  sheets  to control font styles and eliminating the FONT element,\n  HTML authors will have more control over their pages, make those\n  pages more accessible to people with low vision, and by sharing the\n  style sheets, will often shorten page download times for all\n  users.\n   The guidelines discuss accessibility issues and provide\n  accessible design solutions. They address typical scenarios\n  (similar to the font style example) that may pose problems for users\n  with certain disabilities. For example, the  first guideline  explains how content\n  developers can make images accessible. Some users may not be able to see\n  images, others may use text-based browsers that do not support\n  images, while others may have turned off support for images (e.g.,\n  due to a slow Internet connection). The guidelines do not suggest\n  avoiding images as a way to improve accessibility.  Instead,\n  they explain that providing a  text\n  equivalent  of the image will make it accessible. \n   How does a text equivalent make the image accessible? Both words\n  in \"text equivalent\" are important: \n Text content can be presented to the user as synthesized speech,\n    braille, and visually-displayed text. Each of these three mechanisms\n    uses a different sense -- ears for synthesized speech,\n    tactile for braille, and eyes for visually-displayed text -- making\n    the information accessible to groups representing a variety of sensory\n    and other disabilities.\n In order to be useful, the text must convey the same function or\npurpose as the image.  For example, consider a text equivalent for a\nphotographic image of the Earth as seen from outer space. If the\npurpose of the image is mostly that of decoration, then the text\n\"Photograph of the Earth as seen from outer space\" might fulfill the\nnecessary function. If the purpose of the photograph is to illustrate\nspecific information about world geography, then the text equivalent\nshould convey that information.  If the photograph has been designed\nto tell the user to select the image (e.g., by clicking on it)\nfor information about the earth, equivalent text would be\n\"Information about the Earth\".  Thus, if the text conveys the same\nfunction or purpose for the user with a disability as the image does\nfor other users, then it can be considered a text equivalent.\n Note that, in addition to benefitting users with disabilities, text\nequivalents can help all users find pages more quickly, since\nsearch robots can use the text when indexing the pages.\n While Web content developers must provide text equivalents for\nimages and other multimedia content, it is the responsibility of    user agents \n(e.g., browsers and assistive technologies such as  screen\nreaders ,  braille displays , etc.)  to present\nthe information to the user.\n Non-text\nequivalents  of text (e.g., icons, pre-recorded speech, or a\nvideo of a person translating the text into sign language) can make\ndocuments accessible to people who may have difficulty accessing\nwritten text, including many individuals with cognitive disabilities,\nlearning disabilities, and deafness. Non-text equivalents of text can\nalso be helpful to non-readers. An  auditory\ndescription  is an example of a non-text equivalent of \nvisual information. An auditory description of a\nmultimedia presentation's visual track benefits people who cannot\nsee the visual information.\n 2.  Themes of Accessible Design \n The guidelines address two general themes: ensuring graceful\ntransformation, and making content understandable and navigable.\n 2.1  Ensuring Graceful Transformation \n By following these guidelines, content developers can create pages\nthat transform gracefully.  Pages that transform gracefully remain\naccessible despite any of the constraints described in the  introduction , including physical, sensory,\nand cognitive disabilities, work constraints, and technological\nbarriers. Here are some keys to designing pages that transform\ngracefully: \n Separate structure from presentation (refer to \n      the difference between  content,\n      structure, and presentation ).\n   Provide text (including  text equivalents ). Text\n  can be rendered in ways that are available to almost all browsing\n  devices and accessible to almost all users. \n Create documents that work even if the user \n      cannot see and/or hear. Provide information\n      that serves the same purpose or function as\n      audio or video in ways \n      suited to alternate sensory channels as well. \n      This does not mean creating a prerecorded\n      audio version of an entire site to make it accessible to\n      users who are blind. Users who are blind can use\n       screen reader  technology to\n      render all text information in a page.\n Create documents that do not rely on one type of hardware.\n     Pages should be usable by people\n     without mice, with small screens, low resolution screens, \n     black and white screens, no screens, with only voice or text\n     output, etc. \n The theme of graceful transformation is addressed primarily by\nguidelines 1 to 11. \n 2.2  Making Content Understandable\nand Navigable \n Content developers should make content understandable and\nnavigable.  This includes not only making the language clear and\nsimple, but also providing understandable mechanisms for navigating\nwithin and between pages. Providing navigation tools and orientation\ninformation in pages will maximize accessibility and usability.\nNot all users can make use of visual clues such as image\nmaps, proportional scroll bars, side-by-side frames, or graphics that\nguide sighted users of graphical desktop browsers. Users also lose\ncontextual information when they can only view a portion of a page,\neither because they are accessing the page one word at a time (speech\nsynthesis or  \nbraille display ), or one section at a time (small display,\nor a magnified display). Without orientation information,\nusers may not be able to understand very large tables, lists, menus, etc.\n The theme of making content understandable and navigable is\naddressed primarily in guidelines 12 to\n14. \n 3.  How the Guidelines are Organized \n This document includes fourteen  guidelines , or general principles of\naccessible design. Each guideline includes: \n The guideline number.\n The statement of the guideline.\n Guideline navigation links. Three links allow\nnavigation to the next guideline (right arrow\nicon), the previous guideline (left arrow icon),\nor the current guideline's position in the table\nof contents (up arrow icon).\n The rationale behind the guideline and some\ngroups of users who benefit from it.\n A list of checkpoint definitions.\n The  checkpoint  definitions in\neach guideline explain how the guideline applies in typical content\ndevelopment scenarios.  Each checkpoint definition includes: \n The checkpoint number.\n The statement of the checkpoint.\n The priority of the checkpoint. Priority 1 \ncheckpoints are highlighted through the use of style sheets.\n Optional informative notes, clarifying examples,\nand cross references to related guidelines or checkpoints.\n A link to a section of the \nTechniques Document ( [TECHNIQUES] ) where\nimplementations and examples of the checkpoint are discussed.\n Each checkpoint is intended to be\nspecific enough so that someone reviewing a page\nor site may verify that the checkpoint has been satisfied.\n 3.1  Document conventions \n The following editorial conventions are used throughout\nthis document: \n Element names are in uppercase letters.\n Attribute names are quoted in lowercase letters. \n Links to definitions are highlighted through\nthe use of style sheets.\n 4.  Priorities \n Each checkpoint has a priority level assigned by the Working\nGroup based on the checkpoint's impact on accessibility. \n [Priority\u00a01]  \n A Web content developer  must  satisfy this\ncheckpoint. Otherwise, one or more groups will find it impossible to\naccess information in the document. Satisfying this checkpoint is a\nbasic requirement for some groups to be able to use Web documents.\n [Priority\u00a02] \n A Web content developer  should  satisfy this\ncheckpoint. Otherwise, one or more groups will find it difficult to\naccess information in the document. Satisfying this checkpoint will\nremove significant barriers to accessing Web documents. \n [Priority\u00a03] \n A Web content developer  may  \naddress this checkpoint. Otherwise,\none or more groups will find it somewhat difficult to access\ninformation in the document. Satisfying this checkpoint will improve\naccess to Web documents. \n Some checkpoints specify a priority level that may change under\ncertain (indicated) conditions.\n 5.  Conformance \n This section defines three levels of conformance to this\ndocument: \n Conformance Level \"A\" : \nall Priority 1 checkpoints are satisfied;\n   Conformance Level \"Double-A\" : \nall Priority 1 and 2 checkpoints are satisfied;\n   Conformance Level \"Triple-A\" : \nall Priority 1, 2, and 3 checkpoints are satisfied;\n Note.  Conformance levels are spelled out in text\nso they may be understood when rendered to speech.\n Claims of conformance to this document must use one of the\nfollowing two forms. \n Form 1: Specify: \n The guidelines title: \"Web Content Accessibility Guidelines 1.0\"\n The guidelines  URI : http://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505\n The conformance level satisfied: \"A\", \"Double-A\", or \"Triple-A\".\n The scope covered by the claim (e.g., page, site, or \ndefined portion of a site.).\n Example of Form 1: \n This page conforms to W3C's \"Web Content Accessibility Guidelines 1.0\", \navailable at http://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505, level Double-A.\n Form 2: Include, on each page claiming conformance, one of three\nicons provided by W3C and link the icon to the\nappropriate W3C explanation of the claim. Information about\nthe icons and how to insert them in pages is available at\n [WCAG-ICONS] .\n 6.  Web Content Accessibility Guidelines \n Guideline 1.   Provide equivalent alternatives to\nauditory and visual content. \n  Provide content that, when presented to the user,\nconveys essentially the same function or purpose as auditory or visual\ncontent.\n Although some people cannot use images, movies, sounds, applets,\netc. directly, they may still use pages that include  equivalent  information to the visual\nor auditory content. The equivalent information must serve the same\npurpose as the visual or auditory content. Thus, a text equivalent for\nan image of an upward arrow that links to a table of contents could be\n\"Go to table of contents\".  In some cases, an equivalent should also\ndescribe the appearance of visual content (e.g., for complex charts,\nbillboards, or diagrams) or the sound of auditory content (e.g., for\naudio samples used in education).\n This guideline emphasizes the importance of providing  text equivalents  of non-text \ncontent (images, pre-recorded audio, video). The power of text equivalents\nlies in their capacity to be rendered in ways that are accessible to\npeople from various disability groups using a variety of technologies.\nText can be readily output to speech synthesizers and  braille\ndisplays , and can be presented visually (in\na variety of sizes) on computer displays\nand paper. Synthesized speech is critical for individuals who are\nblind and for many people with the reading difficulties that often\naccompany cognitive disabilities, learning disabilities, and\ndeafness. Braille is essential for individuals who are both deaf and\nblind, as well as many individuals whose only sensory disability is\nblindness. Text displayed visually benefits\nusers who are deaf as well as the majority of Web users.\n Providing non-text equivalents (e.g., pictures, videos, and\npre-recorded audio) of text is also beneficial to some users,\nespecially nonreaders or people who have difficulty reading.  In\nmovies or visual presentations, visual action such as body language or\nother visual cues may not be accompanied by enough audio information\nto convey the same information. Unless verbal descriptions of this\nvisual information are provided, people who cannot see (or look at)\nthe visual content will not be able to perceive it.\n  Checkpoints: \n 1.1   Provide a text equivalent for every non-text element  (e.g., via \"alt\", \"longdesc\", or in element content).  This includes : images, graphical representations of text (including symbols), image map regions, animations (e.g., animated GIFs), applets and programmatic objects,  ascii  art, frames, scripts, images used as list bullets, spacers, graphical buttons, sounds (played with or without user interaction), stand-alone audio files, audio tracks of video, and video.  [Priority\u00a01] \nFor example, in HTML:\n Use \"alt\" for the IMG, INPUT, and APPLET elements,\nor provide a text equivalent \nin the content of the OBJECT and APPLET elements. \n For complex content (e.g., a chart) where \nthe \"alt\" text does not provide a complete text\nequivalent, provide an additional\ndescription using, for example, \"longdesc\" with IMG or FRAME,\na link inside an OBJECT element, \nor a  description link .\n For image maps, either use the \"alt\" attribute with AREA, or \nuse the MAP element with A elements (and other text) as content.\n Refer also to \n checkpoint 9.1  and  checkpoint 13.10 .\n Techniques for checkpoint 1.1 \n 1.2   Provide redundant text links for each active region of a server-side image map.   [Priority\u00a01] \n Refer also to\n checkpoint 1.5  and  checkpoint 9.1 . \n Techniques for checkpoint 1.2 \n 1.3   Until user agents  can automatically read aloud the text equivalent of a visual track,  provide an auditory description of the important information of the visual track of a multimedia presentation.    [Priority\u00a01] \n Synchronize the\n auditory \ndescription  with the audio track as per\n checkpoint 1.4 .\nRefer to  checkpoint 1.1  for information about textual\nequivalents for visual information. \n Techniques for checkpoint 1.3 \n 1.4  For any time-based multimedia presentation (e.g., a movie or animation),  synchronize equivalent alternatives (e.g., captions or auditory descriptions of the visual track) with the presentation.   [Priority\u00a01] \n Techniques for checkpoint 1.4 \n 1.5   Until user agents  render text equivalents for client-side image map links,  provide redundant text links for each active region of a client-side image map.   [Priority\u00a03] \n Refer also to\n checkpoint 1.2  and  checkpoint 9.1 . \n Techniques for checkpoint 1.5 \n Guideline 2.   Don't rely on color alone. \n  Ensure that text and graphics are \nunderstandable when viewed without color. \n If color alone is used to convey information, people who cannot\ndifferentiate between certain colors and users with devices that have\nnon-color or non-visual displays will not receive the information.\nWhen foreground and background colors are too close to the same\nhue, they may not provide sufficient contrast when viewed using\nmonochrome displays or by people with different types of color\ndeficits. \n  Checkpoints: \n 2.1  Ensure that all information conveyed with color is  also available without color,  for example from context or markup.  [Priority\u00a01] \n Techniques for checkpoint 2.1 \n 2.2  Ensure that foreground and background  color combinations provide sufficient contrast  when viewed by someone having color deficits or when viewed on a black and white screen. [Priority\u00a02 for images, Priority\u00a03 for text]. \n Techniques for checkpoint 2.2 \n Guideline 3.   Use markup and style sheets and do so\nproperly. \n  Mark up documents with the proper structural elements. Control\npresentation with style sheets rather than with presentation elements\nand attributes. \n Using markup improperly -- not according to specification --\nhinders accessibility.  Misusing markup for a presentation effect\n(e.g., using a table for layout or a header to change the font size)\nmakes it difficult for users with specialized\nsoftware to understand the organization of the page or to\nnavigate through it. Furthermore, using presentation\nmarkup rather than structural markup to\nconvey structure (e.g., constructing what looks like a table of data\nwith an HTML PRE element) makes it difficult to render a page\nintelligibly to other devices (refer to the description of\ndifference between content,\nstructure, and presentation ).\n Content developers \nmay be tempted to use (or misuse) constructs that achieve a\ndesired formatting effect on older browsers. They must be aware that\nthese practices cause accessibility problems and must consider\nwhether the formatting effect is so critical as to warrant\nmaking the document inaccessible to some users. \n At the other extreme, content developers must not sacrifice\nappropriate markup because a certain browser or assistive technology\ndoes not process it correctly.  For example, it is appropriate to use\nthe TABLE element in HTML to mark up\n tabular information  even\nthough some older screen readers may not handle side-by-side\ntext correctly (refer to  checkpoint 10.3 ). Using \nTABLE correctly and creating tables that transform gracefully (refer to\n guideline 5 ) makes it possible for software to render tables other\nthan as two-dimensional grids. \n  Checkpoints: \n 3.1  When an appropriate markup language exists,  use markup rather than images  to convey information.   [Priority\u00a02] \n For example, use MathML to mark up mathematical\nequations, and  \nstyle sheets  to format text and control layout. Also,\navoid using images to represent text -- use text and style sheets\ninstead.\nRefer also to  guideline 6  and  guideline 11 .\n Techniques for checkpoint 3.1 \n 3.2   Create documents that validate  to published formal grammars.  [Priority\u00a02] \n For example, include a document type\ndeclaration at the beginning of a \ndocument that refers to a published \n DTD \n(e.g., the strict HTML 4.0 DTD). \n Techniques for checkpoint 3.2 \n 3.3   Use style sheets to control layout and presentation.   [Priority\u00a02] \n For example, use the CSS 'font' property\ninstead of the HTML FONT element to control font styles. \n Techniques for checkpoint 3.3 \n 3.4   Use relative rather than absolute units  in markup language attribute values and style sheet property values.  [Priority\u00a02] \n For example, in CSS, use 'em' or percentage\nlengths rather than 'pt' or 'cm', which are absolute\nunits. If absolute units are used, \nvalidate that the rendered\ncontent is usable (refer to the\n section on validation ).\n Techniques for checkpoint 3.4 \n 3.5   Use header elements to convey document structure  and use them according to specification.  [Priority\u00a02] \n For example, in HTML, use H2 to indicate\na subsection of H1. Do not use headers for font effects. \n Techniques for checkpoint 3.5 \n 3.6   Mark up lists and list items properly.   [Priority\u00a02] \n For example, in HTML, nest OL, UL, and DL lists properly. \n Techniques for checkpoint 3.6 \n 3.7   Mark up quotations.  Do not use quotation markup for formatting effects such as indentation.  [Priority\u00a02] \n For example, in HTML, use the Q and BLOCKQUOTE elements\nto markup short and longer quotations, respectively. \n Techniques for checkpoint 3.7 \n Guideline 4.   Clarify natural language usage \n  Use markup that facilitates pronunciation or interpretation of\nabbreviated or foreign text. \n When content developers mark up natural language changes in a\ndocument, speech synthesizers and braille devices can automatically\nswitch to the new language, making the document more accessible\nto multilingual users. \nContent developers should identify the predominant  natural language  of a document's\ncontent (through markup or \n HTTP  headers).  Content developers should\nalso provide expansions of abbreviations and acronyms.  \n In addition to helping assistive technologies, natural language\nmarkup allows search engines to find key words and identify documents\nin a desired language. Natural language markup also improves\nreadability of the Web for all people, including those with learning\ndisabilities, cognitive disabilities, or people who are deaf.  \n When abbreviations and natural language changes are not identified,\nthey may be indecipherable when machine-spoken or brailled. \n  Checkpoints: \n 4.1   Clearly identify changes in the natural language of a document's text  and any   text equivalents  (e.g., captions).  [Priority\u00a01] \n For example, in HTML \nuse the \"lang\" attribute. In  XML , use \"xml:lang\". \n Techniques for checkpoint 4.1 \n 4.2   Specify the expansion of each abbreviation or acronym in a document where it first occurs.   [Priority\u00a03] \n For example, in HTML, \nuse the \"title\" attribute of the ABBR and ACRONYM elements.\nProviding the expansion in the main body of the document\nalso helps document usability.\n Techniques for checkpoint 4.2 \n 4.3   Identify the primary natural language of a document.   [Priority\u00a03] \nFor example, in HTML set the \"lang\" attribute on the\nHTML element. In XML, use \"xml:lang\". \nServer operators should configure servers to \ntake advantage of HTTP content negotiation mechanisms \n( [RFC2068] , section 14.13) so\nthat clients can automatically retrieve\ndocuments of the preferred language.\n Techniques for checkpoint 4.3 \n Guideline 5.   Create tables that transform gracefully. \n  Ensure that tables have necessary markup to be \ntransformed by accessible browsers and other user agents. \n Tables should be used to mark up truly \n tabular information  (\"data\ntables\"). Content developers should avoid using them to lay out pages\n(\"layout tables\").  Tables for any use also present special problems\nto users of  screen\nreaders  (refer to  checkpoint 10.3 ).\n Some    user agents  allow users to navigate\namong table cells and access header and other table cell\ninformation. Unless marked-up properly, these tables\nwill not provide user agents with the appropriate information.\n( Refer also to guideline 3 .)\n The following checkpoints will directly benefit people who access a\ntable through auditory means (e.g., a screen reader or an \nautomobile-based personal computer) or who view only a\nportion of the page at a time (e.g., users with blindness or low\nvision using speech output or a  braille display,  or other users of\ndevices with small displays, etc.). \n  Checkpoints: \n 5.1  For data tables,  identify row and column headers.   [Priority\u00a01] \n For example, in HTML, use TD to\nidentify data cells and TH to identify headers. \n Techniques for checkpoint 5.1 \n 5.2  For data tables that have two or more logical levels of row or column headers,  use markup to associate data cells and header cells.   [Priority\u00a01] \n For example, in HTML, use THEAD, TFOOT, and TBODY to group\nrows, COL and COLGROUP to group columns, and\nthe \"axis\", \"scope\", and \"headers\" attributes, to describe\nmore complex relationships among data. \n Techniques for checkpoint 5.2 \n 5.3   Do not use tables for layout unless the table makes sense when linearized.  Otherwise, if the table does not make sense, provide an alternative equivalent (which may be a    linearized version ).  [Priority\u00a02] \n Note.   \n Once user agents \nsupport style sheet positioning,\ntables should not be used for layout.  Refer also to checkpoint 3.3 .\n Techniques for checkpoint 5.3 \n 5.4  If a table is used for layout,  do not use any structural markup for the purpose of visual formatting.   [Priority\u00a02] \n For example, in HTML do not use the TH element to\ncause the content of a (non-table header)\ncell to be displayed centered and in bold. \n Techniques for checkpoint 5.4 \n 5.5   Provide summaries for tables.   [Priority\u00a03] \n For example, in HTML, use the \"summary\" attribute \nof the TABLE element. \n Techniques for checkpoint 5.5 \n 5.6   Provide abbreviations for header labels.   [Priority\u00a03] \n For example, in HTML, use the \"abbr\" attribute on the TH\nelement. \n Techniques for checkpoint 5.6 \n Refer also to checkpoint 10.3 .\n Guideline 6.   Ensure that pages featuring\nnew technologies transform gracefully. \n  Ensure that pages are accessible even when newer technologies are\nnot supported or are turned off. \n Although content developers \nare encouraged to use new technologies that\nsolve problems raised by existing technologies, they should know how\nto make their pages still work with older browsers\nand people who choose to turn off features.\n  Checkpoints: \n 6.1   Organize documents so they may be read without style sheets.  For example, when an HTML document is rendered without associated style sheets, it must still be possible to read the document.  [Priority\u00a01] \nWhen content is organized logically, it will be\nrendered in a meaningful order when style sheets\nare turned off or not supported. \n Techniques for checkpoint 6.1 \n 6.2   Ensure that equivalents for dynamic content are updated  when the dynamic content changes.  [Priority\u00a01] \n Techniques for checkpoint 6.2 \n 6.3   Ensure that pages are usable when scripts, applets, or other programmatic objects are turned off or not supported.  If this is not possible, provide equivalent information on an alternative accessible page.  [Priority\u00a01] \nFor example, ensure that links that trigger scripts work\nwhen scripts are turned off or not supported (e.g.,\ndo not use \"javascript:\" as the link target).\nIf it is not possible to make the\npage usable without scripts, provide a text equivalent with the\nNOSCRIPT element, or use a server-side script instead of a client-side\nscript, or provide an alternative accessible page as per\n checkpoint 11.4 .  Refer also to guideline 1 .\n Techniques for checkpoint 6.3 \n 6.4  For scripts and applets,  ensure that event handlers are input device-independent.    [Priority\u00a02] \nRefer to the definition of  \ndevice independence . \n Techniques for checkpoint 6.4 \n 6.5   Ensure that dynamic content is accessible  or provide an alternative presentation or page.  [Priority\u00a02] \n For example, in HTML, use\nNOFRAMES at the end of each frameset. For some applications,\nserver-side scripts may be more accessible than\nclient-side scripts. \n Techniques for checkpoint 6.5 \n Refer also to checkpoint 11.4 .\n Guideline 7.   Ensure user control of time-sensitive content changes. \n  Ensure that moving, blinking, scrolling, or auto-updating objects\nor pages may be paused or stopped. \n Some people with  cognitive  or\nvisual disabilities are unable to read moving text\nquickly enough or at all. Movement can also cause such a distraction\nthat the rest of the page becomes unreadable for people with\ncognitive disabilities.  Screen\nreaders  are unable to read moving text. People with\nphysical disabilities might not be able to move\nquickly or accurately enough to interact with moving objects.  \n Note.  All of the following checkpoints involve\nsome content developer responsibility  until user\nagents  provide adequate feature control mechanisms. \n  Checkpoints: \n 7.1   Until user agents  allow users to control flickering,  avoid causing the screen to flicker.   [Priority\u00a01] \n Note.  People\nwith photosensitive epilepsy can have seizures triggered by\nflickering or flashing in the 4 to 59 flashes per second (Hertz) range\nwith a peak sensitivity at 20 flashes per second as well as quick\nchanges from dark to light (like strobe lights).\n Techniques for checkpoint 7.1 \n 7.2   Until user agents  allow users to control blinking,  avoid causing content to blink  (i.e., change presentation at a regular rate, such as turning on and off).   [Priority\u00a02] \n Techniques for checkpoint 7.2 \n 7.3   Until user agents  allow users to freeze moving content,  avoid movement in pages.   [Priority\u00a02] \n When a page includes moving content,\nprovide a mechanism within a script\nor applet to allow users to  freeze motion or updates.\nUsing style sheets with scripting to create\nmovement allows users to turn off \nor override the effect more easily.\n Refer also to guideline 8 . \n Techniques for checkpoint 7.3 \n 7.4   Until user agents  provide the ability to stop the refresh,  do not create periodically auto-refreshing pages.   [Priority\u00a02] \n For example, in HTML, don't\ncause pages to auto-refresh \nwith \"HTTP-EQUIV=refresh\" until user agents\nallow users to turn off the feature.\n Techniques for checkpoint 7.4 \n 7.5   Until user agents  provide the ability to stop auto-redirect,  do not use markup to redirect pages automatically.  Instead, configure the server to perform redirects.   [Priority\u00a02] \n Techniques for checkpoint 7.5 \n Note.  The BLINK and MARQUEE elements are not\ndefined in any W3C HTML specification and should not be\nused.  Refer also to guideline 11 . \n Guideline 8.   Ensure direct accessibility of embedded user\ninterfaces. \n  Ensure that the user interface follows principles \nof accessible design: device-independent access to\nfunctionality, keyboard operability, self-voicing, etc. \n When an embedded object has its \"own interface\", the interface --\nlike the interface to the browser itself -- must be accessible. If the\ninterface of the embedded object cannot be made accessible, an\nalternative accessible solution must be provided. \n Note.  For information about accessible interfaces,\nplease consult the User Agent Accessibility Guidelines ( [WAI-USERAGENT] ) and the Authoring Tool\nAccessibility Guidelines ( [WAI-AUTOOL] ).\n  Checkpoint: \n 8.1   Make programmatic elements  such as scripts and applets directly accessible or compatible with assistive technologies [ Priority\u00a01  if functionality is  important  and not presented elsewhere, otherwise Priority\u00a02.]\n Refer also to guideline 6 . \n Techniques for checkpoint 8.1 \n Guideline 9.   Design for device-independence. \nUse features that enable activation of page elements via a\nvariety of input devices. \n Device-independent  access\nmeans that the user may interact with the user agent or document\nwith a preferred input (or output) device -- mouse, keyboard, voice,\nhead wand, or other. If, for example, a form\ncontrol can only be activated with a mouse or other pointing device,\nsomeone who is using the page without sight, with voice input, or with\na keyboard or who is using some other non-pointing \ninput device will not be able to use the form.\n Note.  Providing text equivalents for image maps or\nimages used as links makes it possible for users to interact with them\nwithout a pointing device.  Refer also to guideline 1 . \n Generally, pages that allow keyboard interaction are\nalso accessible through speech input or a command line interface.\n  Checkpoints: \n 9.1   Provide client-side image maps instead of server-side image maps  except where the regions cannot be defined with an available geometric shape.  [Priority\u00a01] \nRefer also to  checkpoint 1.1 ,  checkpoint 1.2 ,\nand  checkpoint 1.5 .\n Techniques for checkpoint 9.1 \n 9.2   Ensure that any element that has its own interface can be operated in a device-independent manner.   [Priority\u00a02] \nRefer to the definition of  \ndevice independence . \n Refer also to guideline 8 . \n Techniques for checkpoint 9.2 \n 9.3  For scripts,  specify logical event handlers rather than device-dependent event handlers.   [Priority\u00a02] \n Techniques for checkpoint 9.3 \n 9.4   Create a logical tab order  through links, form controls, and objects.  [Priority\u00a03] \n For example, in HTML, specify tab order via the\n\"tabindex\" attribute or ensure a logical page design. \n Techniques for checkpoint 9.4 \n 9.5   Provide keyboard shortcuts to important links  (including those in  client-side image maps ), form controls, and groups of form controls.  [Priority\u00a03] \n For example, in HTML, specify shortcuts\nvia the \"accesskey\" attribute. \n Techniques for checkpoint 9.5 \n Guideline 10.   Use interim solutions. \n  Use interim accessibility solutions\nso that assistive technologies and older browsers will operate\ncorrectly. \n For example, older browsers do not allow users to\nnavigate to empty edit boxes. Older screen readers read lists of\nconsecutive links as one link. These active elements are therefore\ndifficult or impossible to access.  Also, changing the current window\nor popping up new windows can be very disorienting to users\nwho cannot see that this has happened.\n Note.  The following checkpoints apply  until user agents \n(including  assistive\ntechnologies ) address these issues. These checkpoints are\nclassified as \"interim\", meaning that the Web Content Guidelines\nWorking Group considers them to be valid and necessary to Web\naccessibility  as of the publication of this\ndocument . However, the Working Group does not expect these\ncheckpoints to be necessary in the future, once Web technologies have\nincorporated anticipated features or capabilities. \n  Checkpoints: \n 10.1   Until user agents  allow users to turn off spawned windows,  do not cause pop-ups or other windows  to appear and do not change the current window without informing the user.  [Priority\u00a02] \n For example, in HTML, avoid using a frame whose target\nis a new window. \n Techniques for checkpoint 10.1 \n 10.2   Until user agents  support explicit associations between labels and form controls, for all form controls with implicitly associated labels,  ensure that the label is properly positioned.   [Priority\u00a02] \n The label must immediately precede \nits control on the same line (allowing more than one\ncontrol/label per line) or be in the line preceding the\ncontrol (with only one label and one control per line).\n Refer also to checkpoint 12.4 .\n Techniques for checkpoint 10.2 \n 10.3   Until user agents  (including assistive technologies) render side-by-side text correctly,  provide a linear text alternative  (on the current page or some other) for  all  tables that lay out text in parallel, word-wrapped columns.  [Priority\u00a03] \n Note.  \nPlease consult the definition of  \n linearized table .\nThis checkpoint benefits people with \n user agents \n(such as some  screen readers ) \nthat are unable to handle blocks of text presented side-by-side;\nthe checkpoint should not discourage \ncontent developers from using tables\nto represent  \n tabular information .\n Techniques for checkpoint 10.3 \n 10.4   Until user agents  handle empty controls correctly,  include default, place-holding characters  in edit boxes and text areas.  [Priority\u00a03] \n For example, in HTML, do this for TEXTAREA and\nINPUT. \n Techniques for checkpoint 10.4 \n 10.5   Until user agents  (including assistive technologies) render adjacent links distinctly,  include non-link, printable characters  (surrounded by spaces) between adjacent links.  [Priority\u00a03] \n Techniques for checkpoint 10.5 \n Guideline 11.   Use W3C technologies and guidelines. \n  Use W3C technologies (according to specification) and follow\naccessibility guidelines. Where it is not possible to use a W3C\ntechnology, or doing so results in material that does not transform\ngracefully, provide an alternative version of the content that is\naccessible. \n The current guidelines recommend W3C technologies (e.g., HTML,\nCSS, etc.) for several reasons: \n W3C technologies include \"built-in\" accessibility features.\n W3C specifications undergo early review to ensure that accessibility\nissues are considered during the design phase.\n W3C specifications are developed in an open, industry consensus process.\n Many non-W3C formats (e.g.,  PDF , Shockwave, etc.)  require viewing\nwith either plug-ins or stand-alone applications.  Often, these\nformats cannot be viewed or navigated with standard \n user agents  (including  assistive\ntechnologies ).  Avoiding non-W3C and non-standard features\n(proprietary elements, attributes, properties, and extensions) will\ntend to make pages more accessible to more people using a wider\nvariety of hardware and software.  When inaccessible\ntechnologies (proprietary or not)\nmust be used, equivalent accessible pages must be provided.\n Even when W3C technologies are used, they must be used in\naccordance with accessibility guidelines. When using new technologies,\nensure that they transform gracefully ( Refer also to guideline 6 .).\n Note.  Converting documents (from PDF, PostScript,\n RTF , etc.) to W3C markup languages (HTML, \n XML ) does not always create\nan accessible document.  Therefore, validate each page for\naccessibility and usability \nafter the conversion process (refer to \nthe  section on validation ). \nIf a page does not readily\nconvert, either revise the page until its original\nrepresentation converts appropriately or provide an HTML or plain text\nversion. \n  Checkpoints: \n 11.1   Use W3C technologies when they are available and appropriate for a task and use the latest versions when supported.   [Priority\u00a02] \n Refer to the  list of references \nfor information about where to find the latest W3C specifications\nand  [WAI-UA-SUPPORT] \nfor information about user agent support for W3C technologies.\n Techniques for checkpoint 11.1 \n 11.2   Avoid deprecated features of W3C technologies.   [Priority\u00a02] \n For example, in HTML, don't use the \n deprecated \nFONT element; use style sheets instead\n(e.g., the 'font' property in CSS). \n Techniques for checkpoint 11.2 \n 11.3  Provide information so that users may  receive documents according to their preferences  (e.g., language, content type, etc.)  [Priority\u00a03] \n Note. \nUse content negotiation where possible. \n Techniques for checkpoint 11.3 \n 11.4  If,  after best efforts , you cannot create an  accessible  page,  provide a link to an alternative page  that uses W3C technologies, is accessible, has  equivalent  information (or functionality), and is updated as often as the inaccessible (original) page.  [Priority\u00a01] \n Techniques for checkpoint 11.4 \n Note.  \nContent developers should only resort to alternative\npages when other solutions fail because alternative pages\nare generally updated less often than \"primary\" pages. An out-of-date\npage may be as frustrating as one that is inaccessible since, in both\ncases, the information presented on the original page is\nunavailable.  Automatically generating alternative pages may lead to\nmore frequent updates, but content developers \nmust still be careful to ensure\nthat generated pages always make sense, and that users are able to\nnavigate a site by following links on primary pages, alternative\npages, or both. Before resorting to an alternative page, \nreconsider the design of the original page; making it\naccessible is likely to improve it for all users.\n Guideline 12.   Provide context and orientation information. \n  Provide context and orientation information to help users\nunderstand complex pages or elements. \n Grouping elements and providing contextual information about the\nrelationships between elements can be useful for all\nusers.  Complex relationships between parts of a page may\nbe difficult for people with cognitive disabilities\nand people with visual disabilities to interpret.\n  Checkpoints: \n 12.1   Title each frame  to facilitate frame identification and navigation.  [Priority\u00a01] \n For example, in HTML use the \"title\" attribute on FRAME\nelements. \n Techniques for checkpoint 12.1 \n 12.2   Describe the purpose of frames  and how frames relate to each other if it is not obvious by frame titles alone.   [Priority\u00a02] \n For example, in HTML, use \"longdesc,\" or a\n description link. \n Techniques for checkpoint 12.2 \n 12.3   Divide large blocks of information into more manageable groups  where natural and appropriate.  [Priority\u00a02] \n For example, in HTML, use OPTGROUP\nto group OPTION elements inside a SELECT; \ngroup form controls with FIELDSET and LEGEND;\nuse nested lists where appropriate;\nuse headings to structure documents, etc.\n Refer also to guideline 3 . \n Techniques for checkpoint 12.3 \n 12.4   Associate labels explicitly with their controls.   [Priority\u00a02] \n For example, in HTML use LABEL and its \"for\" attribute. \n Techniques for checkpoint 12.4 \n Guideline 13.   Provide clear navigation mechanisms. \n  Provide clear and consistent navigation mechanisms --\norientation information, navigation bars, a site map, etc. -- to\nincrease the likelihood that a person will find what they are looking\nfor at a site. \n Clear and consistent  \n navigation\nmechanisms  are important to people with cognitive\ndisabilities or blindness, and benefit all users.\n  Checkpoints: \n 13.1   Clearly identify the target of each link.   [Priority\u00a02] \n Link\ntext  should be meaningful enough\nto make sense when read out of context -- \neither on its own or as part of a sequence of links.\nLink text should also be terse.\nFor example, in HTML, write \"Information about\nversion 4.3\" instead of \"click here\". \nIn addition to clear link text, content developers may\nfurther clarify the target of a link\nwith an informative link title\n(e.g., in HTML, the \"title\" attribute).\n Techniques for checkpoint 13.1 \n 13.2   Provide metadata to add semantic information  to pages and sites.  [Priority\u00a02] \n For example, use \n RDF  \n( [RDF] )\nto indicate the document's author, \nthe type of content, etc. \n Note.  Some HTML  \n user agents \ncan build navigation tools from document relations described by\nthe HTML LINK element and \"rel\" or \"rev\" attributes \n(e.g., rel=\"next\", rel=\"previous\", rel=\"index\", etc.).\n Refer also to checkpoint 13.5 . \n Techniques for checkpoint 13.2 \n 13.3   Provide information about the general layout of a site  (e.g., a site map or table of contents).  [Priority\u00a02] \n In describing site layout,\nhighlight and explain available accessibility features. \n Techniques for checkpoint 13.3 \n 13.4   Use navigation mechanisms in a consistent manner.   [Priority\u00a02] \n Techniques for checkpoint 13.4 \n 13.5   Provide navigation bars  to highlight and give access to the navigation mechanism.  [Priority\u00a03] \n Techniques for checkpoint 13.5 \n 13.6   Group related links,  identify the group (for user agents), and,  until user agents  do so, provide a way to bypass the group.  [Priority\u00a03] \n Techniques for checkpoint 13.6 \n 13.7  If search functions are provided,  enable different types of searches for different skill levels and preferences.   [Priority\u00a03] \n Techniques for checkpoint 13.7 \n 13.8   Place distinguishing information at the beginning  of headings, paragraphs, lists, etc.  [Priority\u00a03] \n Note. \nThis is commonly referred to as \"front-loading\" and is\nespecially helpful for people accessing information with serial\ndevices such as speech synthesizers. \n Techniques for checkpoint 13.8 \n 13.9   Provide information about document collections  (i.e., documents comprising multiple pages.).  [Priority\u00a03] \n For example, in HTML\nspecify document collections with the LINK\nelement and the \"rel\" and \"rev\" attributes. \nAnother way to create a collection is by building\nan archive (e.g., with zip, tar and gzip, stuffit, etc.)\nof the multiple pages. \n Note. \nThe performance improvement gained by offline \nprocessing can make browsing much less\nexpensive for people with disabilities who may\nbe browsing slowly.\n Techniques for checkpoint 13.9 \n 13.10   Provide a means to skip over multi-line ASCII art.   [Priority\u00a03] \nRefer to  checkpoint 1.1  and  the example of ascii art\nin the glossary . \n Techniques for checkpoint 13.10 \n Guideline 14.   Ensure that documents\nare clear and simple. \n  Ensure that documents are clear and simple so\nthey may be more easily understood. \n Consistent page layout, recognizable graphics, and easy to understand\nlanguage benefit all users. In particular, they help\npeople with cognitive disabilities or  who\nhave difficulty reading. (However, ensure that images\nhave text equivalents for people who are blind, have\nlow vision, or for any user who cannot or has\nchosen not to view graphics.  Refer also to guideline 1 .)\n Using clear and simple language promotes effective\ncommunication. Access to written information can be difficult for\npeople who have cognitive or learning disabilities. Using clear and\nsimple language also benefits people whose first language differs from\nyour own, including those people who communicate primarily in sign\nlanguage.\n  Checkpoints: \n 14.1   Use the clearest and simplest language  appropriate for a site's content.  [Priority\u00a01] \n Techniques for checkpoint 14.1 \n 14.2   Supplement text with graphic or auditory presentations where they will facilitate comprehension  of the page.   [Priority\u00a03] \n Refer also to guideline 1 . \n Techniques for checkpoint 14.2 \n 14.3   Create a style of presentation that is consistent across pages.   [Priority\u00a03] \n Techniques for checkpoint 14.3 \n   Appendix A. -- Validation \n Validate accessibility with automatic tools and human\nreview. Automated methods are generally rapid and convenient but cannot\nidentify all accessibility issues. Human review can help ensure\nclarity of language and ease of navigation. \n Begin using validation methods at the earliest stages of\ndevelopment.  Accessibility issues identified early are easier to\ncorrect and avoid.\n Following are some important validation methods, discussed in more\ndetail in the   section\non validation in the Techniques Document .\n Use an automated accessibility tool and browser validation tool.\nPlease note that software tools do not address all accessibility\nissues, such as the meaningfulness of link text, the applicability of\na  text equivalent , etc. \n Validate syntax (e.g., HTML, XML, etc.). \n Validate style sheets (e.g., CSS). \n Use a text-only browser or emulator. \n Use multiple graphic browsers, with: \n sounds and graphics loaded,\n graphics not loaded,\n sounds not loaded,\n no mouse,\n frames, scripts, style sheets, and applets not loaded\n Use several browsers, old and new. \n Use a self-voicing\nbrowser, a screen reader, magnification software, a small display,\netc. \n Use spell and grammar checkers. A person reading a page with a\nspeech synthesizer may not be able to decipher the synthesizer's best\nguess for a word with a spelling error. Eliminating grammar problems\nincreases comprehension. \n Review the document for clarity and simplicity.\nReadability statistics, such as those generated by some word\nprocessors may be useful indicators of clarity and simplicity.  Better\nstill, ask an experienced (human) editor to review written content for\nclarity. Editors can also improve the usability of documents by\nidentifying potentially sensitive cultural issues\nthat might arise due to language or icon usage.\n Invite people with disabilities to review documents.  Expert\nand novice users with disabilities will provide valuable feedback\nabout accessibility or usability problems and their severity.\n   Appendix B. -- Glossary  \n Accessible \n Content is accessible when it may\nbe used by someone with a disability. \n Applet \n A program inserted into a Web page. \n Assistive technology \nSoftware or hardware that has been specifically designed to assist\npeople with disabilities in carrying out daily activities.  Assistive\ntechnology includes wheelchairs, reading machines, devices for\ngrasping, etc.  In the area of Web Accessibility, common\nsoftware-based assistive technologies include screen readers, screen\nmagnifiers, speech synthesizers, and voice input software that operate\nin conjunction with graphical desktop browsers (among other  user\nagents ). Hardware assistive technologies include\nalternative keyboards and pointing devices.\n ASCII art \n ASCII art refers to text characters and symbols\nthat are combined to create an image. For example   \";-)\"  is the smiley emoticon. The following is\nan ascii figure showing the relationship between flash frequency and\nphotoconvulsive response in patients with\neyes open and closed [ skip\nover ascii figure  or \nconsult a  description\nof chart ]:\n  %   __ __ __ __ __ __ __ __ __ __ __ __ __ __   \n100 |             *                             |\n 90 |                *  *                       |\n 80 |          *           *                    |\n 70 |             @           *                 |\n 60 |          @                 *              |\n 50 |       *        @              *           |\n 40 |                   @              *        |\n 30 |    *  @              @  @           *     |\n 20 |                                           |\n 10 |    @                       @  @  @  @     |\n      0  5 10 15 20 25 30 35 40 45 50 55 60 65 70\n      Flash frequency (Hertz)\n Authoring tool \n HTML  editors, document conversion tools, tools that\ngenerate Web content from databases are all \nauthoring tools. Refer to the\n\"Authoring Tool Accessibility Guidelines\" ( [WAI-AUTOOLS] ) for information about developing\naccessible tools.\n Backward compatible \n Design that continues to work with earlier versions\nof a language, program, etc. \n Braille \n Braille uses six raised dots in different patterns to represent\nletters and numbers to be read by people who are blind with their\nfingertips. The word \"Accessible\" in braille follows: \n A  braille display , \ncommonly referred to as a \"dynamic braille display,\" raises or lowers\ndot patterns on command from an electronic device, usually a\ncomputer. The result is a line of braille that can change from moment\nto moment. Current dynamic braille displays range in size from one cell (six\nor eight dots) to an eighty-cell line, most having\nbetween twelve and twenty cells per line. \n Content\ndeveloper \n Someone who authors Web pages or designs Web sites. \n Deprecated\nA deprecated element or attribute is one that has been outdated by\nnewer constructs. Deprecated elements may become \nobsolete in future versions of HTML. The\nindex of HTML elements and attributes in\nthe Techniques Document  indicates which elements\nand attributes are deprecated in HTML 4.0. \nAuthors should avoid using deprecated elements and attributes.\nUser agents should continue to support for\nreasons of backward compatibility.\n Device independent \nUsers must be able to interact with a user agent\n(and the document it renders) using the supported input and output\ndevices of their choice and according to their needs. \nInput devices may include pointing devices,\nkeyboards, braille devices, head wands, microphones, and\nothers. Output devices may include monitors, speech synthesizers, and\nbraille devices. \nPlease note that \"device-independent support\" does not mean that\nuser agents must support every input or output device. User agents\nshould offer redundant input and output mechanisms for those devices\nthat are supported.  For example, if a user agent supports keyboard\nand mouse input, users should be able to interact with all features\nusing either the keyboard or the mouse.\n Document Content,\nStructure, and Presentation \n The content of a document refers to\nwhat it says to the user through natural language,\nimages, sounds, movies, animations, etc. \nThe structure of a document is how it is \norganized logically (e.g., by chapter, with an\nintroduction and table of contents, etc.). \nAn  element  \n(e.g., P, STRONG, BLOCKQUOTE in HTML) that specifies document\nstructure is called a  structural\nelement . The presentation of a\ndocument is how the document is rendered (e.g., as print, as a\ntwo-dimensional graphical presentation, as an text-only presentation,\nas synthesized speech, as braille, etc.)\nAn  element  \nthat specifies document presentation (e.g., B, FONT, CENTER) \nis called a  presentation\nelement . \nConsider a document header, for example. \nThe content of the header is what \nthe header says (e.g., \"Sailboats\"). In HTML,\nthe header is a structural element\nmarked up with, for example, an H2 element.\nFinally, the presentation of the header might be\na bold block text in the margin, a centered line of text,\na title spoken with a certain voice style (like an aural\nfont), etc.\n Dynamic\nHTML (DHTML) \n DHTML  is the marketing term applied to\na mixture of standards including HTML, \nstyle sheets , the\nDocument Object Model  [DOM1] \nand scripting.\nHowever, there is no W3C specification that formally defines \nDHTML.  Most guidelines may be applicable\nto applications using DHTML, however the following guidelines focus on\nissues related to scripting and style sheets:  guideline 1 ,\n guideline 3 ,  guideline 6 , \n guideline 7 , and  guideline 9 .   \n Element \n This document uses the term \"element\" both\nin the strict SGML sense (an element is a syntactic construct) and\nmore generally to mean a type\nof content (such as video or sound) or a logical \nconstruct (such as a header or list). The second sense\nemphasizes that a guideline inspired by HTML \ncould easily apply to another markup language.\nNote that some (SGML) elements have content that is rendered\n(e.g., the P, LI, or TABLE elements in HTML), some are replaced\nby external content (e.g., IMG), and some affect\nprocessing (e.g., STYLE and SCRIPT cause information\nto be processed by a style sheet or script engine).\nAn element that causes text characters\nto be part of the document is called a  \ntext element .\n Equivalent \nContent is \"equivalent\" to other content when both fulfill essentially\nthe same function or purpose upon presentation to the user. \nIn the context of\nthis document, the equivalent must fulfill  essentially the same function\nfor the person with a disability (at least insofar as is feasible, given\nthe nature of the disability and the state of technology), as the primary\ncontent does for the person without any disability.\nFor example, the text \"The Full Moon\" might convey the same information\nas an image of a full moon when presented to users. Note that\nequivalent information focuses on  fulfilling\nthe same function . If the image is\npart of a link and understanding the image is crucial\nto guessing the link target, an\nequivalent must also give users an idea of the link target.\nProviding equivalent information for inaccessible\ncontent is one of the primary ways\nauthors can make their documents accessible to people with\ndisabilities.\nAs part of fulfilling the same function of content\nan equivalent may involve a description of that content\n(i.e., what the content looks like or sounds like).\nFor example, in order for users to understand\nthe information conveyed by a complex chart, \nauthors should describe the visual information in the chart.\nSince text content can be presented to the user as synthesized\nspeech, braille, and visually-displayed text, these guidelines\nrequire  text\nequivalents  for graphic and audio information. \nText equivalents must be\nwritten so that they convey all essential content.\n Non-text\nequivalents  (e.g., an\nauditory description of a visual presentation, a video of a person\ntelling a story using sign language as an \nequivalent for a written story, etc.)\nalso improve accessibility for \npeople who cannot access visual information\nor written text, including many individuals with blindness,\ncognitive disabilities, learning disabilities, and deafness.\nEquivalent information may be provided in a number of ways, \nincluding through attributes (e.g., a text value for the \"alt\"\nattribute in HTML and SMIL), as part of element content (e.g., the\nOBJECT in HTML), as part of the document's prose, or via a linked\ndocument (e.g., designated by the \"longdesc\" attribute in HTML or a  description link ).  Depending on the complexity of\nthe equivalent, it may be necessary to combine techniques (e.g., use\n\"alt\" for an abbreviated equivalent, useful to familiar readers, \nin addition to \"longdesc\" for a link to more complete information, \nuseful to first-time readers).  \nThe details of how and when to provide equivalent information\nare part of the  Techniques Document \n( [TECHNIQUES] ).\nA  text transcript  \nis a text equivalent of audio information that includes spoken\nwords and non-spoken sounds such as sound effects. \nA  caption  is a text\ntranscript for the audio track of a video presentation that is\nsynchronized with the video and audio tracks. Captions are generally\nrendered visually by being superimposed over the video, \nwhich benefits people who are deaf and\nhard-of-hearing, and anyone who cannot hear the audio (e.g.,\nwhen in a crowded room). \nA  collated\ntext transcript  combines (collates) captions\nwith text descriptions of video information\n(descriptions of the actions, body language, graphics, and scene\nchanges of the video track). These text equivalents make \npresentations accessible to people who are deaf-blind and to people who\ncannot play movies, animations, etc. It also makes the information\navailable to search engines.\nOne example of a non-text equivalent is an  auditory description \nof the key visual elements of a presentation. \nThe description is either a\nprerecorded human voice or a synthesized voice (recorded or generated\non the fly). The auditory description\nis synchronized with the audio track of the presentation, usually\nduring natural pauses in the audio track. \nAuditory descriptions include information about actions,\nbody language, graphics, and scene changes.\n Image \n A graphical presentation. \n Image map \n An image that has been divided into regions with associated\nactions. Clicking on an active region causes an action to occur. \n When a user clicks on an active region of a \nclient-side image map, \nthe user agent calculates in which region the click occurred and\nfollows the link associated with that region.  \n Clicking on an active\nregion of a server-side image map  causes the coordinates of the click\nto be sent to a server, which then performs some action.\n Content developers \ncan make client-side image maps accessible by providing\ndevice-independent access to the same links associated with the image\nmap's regions. Client-side image maps allow the user agent to provide\nimmediate feedback as to whether or not the user's pointer is over an\nactive region.\n Important \n Information in a document\nis important if understanding that information is\ncrucial to understanding the document. \n Linearized table \n A table rendering process where the contents of\nthe cells become a series of paragraphs (e.g., down\nthe page) one after another.  The paragraphs will occur in the same\norder as the cells are defined in the document source.\nCells should make sense when read in order and should\ninclude  structural\nelements  (that create paragraphs, headers, lists, etc.)\nso the page makes sense after linearization.\n Link text \n The rendered text content of a link.\n Natural\nLanguage \n Spoken, written, or signed human languages such as French,\nJapanese, American Sign Language, and braille. \nThe natural language of content may\nbe indicated with the \"lang\" attribute in HTML ( [HTML40] , section 8.1)\nand the \"xml:lang\"\nattribute in XML ( [XML] , section 2.12).\n Navigation Mechanism \n A navigation mechanism is any means by which a user can\nnavigate a page or site. Some typical mechanisms include: \n navigation bars \n A navigation bar is a collection of links \nto the most important parts of a document or site.\n site maps \n  A site map provides a global view of the\norganization of a page or site.\n tables of contents \n  A table of contents generally lists \n(and links to) the most important sections of a document. \n Personal Digital Assistant\n(PDA) \n A  PDA  is a small,\nportable computing device.  Most PDAs are used to track personal data\nsuch as calendars, contacts, and electronic mail. A PDA is generally a\nhandheld device with a small screen that allows input from various\nsources. \n Screen\nmagnifier \n A software program that magnifies a portion of the screen, so\nthat it can be more easily viewed. Screen magnifiers\nare used primarily by individuals\nwith low vision. \n Screen reader \n A software program that reads the contents of the screen aloud\nto a user. Screen readers are used primarily \nby individuals who are blind. Screen\nreaders can usually only read text that is printed, not painted, to\nthe screen. \n Style sheets \n A style sheet is a set of statements that specify presentation of\na document. Style sheets may have three different origins: they\nmay be written by content providers, created by users, or\nbuilt into user agents. In CSS ( [CSS2] ),\nthe interaction of content provider, user, and user agent\nstyle sheets is called the  cascade .\n Presentation markup \nis markup that achieves a stylistic (rather than structuring) effect\nsuch as the B or I elements in HTML. Note that the STRONG and EM\nelements are not considered presentation markup since they convey\ninformation that is independent of a particular font style.\n Tabular information \nWhen tables are used to represent logical relationships among\ndata -- text, numbers, images, etc., that information is\ncalled \"tabular information\" and the tables are\ncalled \"data tables\". The relationships expressed by a table\nmay be rendered visually (usually on a two-dimensional grid),\naurally (often preceding cells with header information), \nor in other formats.\n Until user agents ... \nIn most of the checkpoints, content developers are asked to\nensure the accessibility of their pages and sites. However, there are\naccessibility needs that would be more appropriately met by \n user\nagents  (including \n assistive technologies ). \nAs of the publication of\nthis document, not all user agents or\nassistive technologies provide the accessibility control users require\n(e.g., some user agents may not allow users to turn off blinking\ncontent, or some screen readers may not handle tables well).\nCheckpoints that contain the phrase \"until user agents ...\"  require\ncontent developers to provide additional support for accessibility\nuntil most user agents readily available to their\naudience include the necessary accessibility features. \n Note.  The W3C WAI Web site \n(refer to  [WAI-UA-SUPPORT] )\nprovides information\nabout user agent support for accessibility features. \nContent developers are encouraged to consult this page\nregularly for updated information.\n User\nagent   Software to access Web\ncontent, including desktop graphical browsers, text browsers, voice\nbrowsers, mobile phones, multimedia players, plug-ins, and some\nsoftware assistive technologies used in conjunction with browsers such as\nscreen readers, screen magnifiers, and voice recognition software. \n   Acknowledgments \n Web Content Guidelines Working Group Co-Chairs: \n Chuck Letourneau ,\nStarling Access Services \n Gregg Vanderheiden ,\nTrace Research and Development \n W3C Team contacts: \n Judy Brewer  and  Daniel Dardailler \n We wish to thank the following people who have contributed their\ntime and valuable comments to shaping these guidelines:\n Harvey Bingham, Kevin Carey, Chetz Colwell, Neal Ewers, Geoff\nFreed, Al Gilman, Larry Goldberg, Jon Gunderson, Eric Hansen,\nPhill Jenkins, Leonard\nKasday, George Kerscher, Marja-Riitta Koivunen, Josh Krieger, Scott\nLuebking, William Loughborough, Murray Maloney, Charles\nMcCathieNevile, MegaZone (Livingston Enterprises), Masafumi Nakane,\nMark Novak, Charles Oppermann, Mike Paciello, David Pawson, Michael Pieper,\nGreg Rosmaita, Liam Quinn, Dave Raggett, T.V. Raman, Robert\nSavellis, Jutta Treviranus, Steve Tyler, Jaap van Lelieveld, and\nJason White \n The original draft of this document is based on \"The Unified Web\nSite Accessibility Guidelines\" ( [UWSAG] )\ncompiled by the Trace R & D Center at the University of Wisconsin.\nThat document includes a list of additional contributors.\n   References \n For the latest version of any W3C specification please consult the\nlist of  W3C Technical Reports . \n [CSS1] \n \"CSS, level 1 Recommendation\", B. Bos, H. Wium Lie, eds.,\n17 December 1996, revised 11 January 1999. \nThe CSS1 Recommendation is:\nhttp://www.w3.org/TR/1999/REC-CSS1-19990111 . \nThe latest version of CSS1 is available at:\nhttp://www.w3.org/TR/REC-CSS1 .\n [CSS2] \n \"CSS, level 2 Recommendation\", B. Bos, H. Wium Lie, C. Lilley,\nand I. Jacobs, eds., 12 May 1998.\nThe CSS2 Recommendation is:\nhttp://www.w3.org/TR/1998/REC-CSS2-19980512 . \nThe latest version of CSS2 is available at:\nhttp://www.w3.org/TR/REC-CSS2 .\n [DOM1] \n \"Document Object Model (DOM) Level 1 Specification\", \nV. Apparao, S. Byrne, M. Champion, S. Isaacs, I. Jacobs, A. Le Hors, G. Nicol,\nJ. Robie, R. Sutor, C. Wilson, and L. Wood, eds., 1 October 1998.\nThe DOM Level 1 Recommendation is: \nhttp://www.w3.org/TR/1998/REC-DOM-Level-1-19981001 .  \nThe latest version of DOM Level 1 is available at:\nhttp://www.w3.org/TR/REC-DOM-Level-1 \n [HTML40] \n \"HTML 4.0 Recommendation\", D. Raggett, A. Le Hors, and I.\nJacobs, eds., 17 December 1997, revised 24 April 1998.\n The HTML 4.0 Recommendation is:\nhttp://www.w3.org/TR/1998/REC-html40-19980424 . \nThe latest version of HTML 4.0 is available at:\nhttp://www.w3.org/TR/REC-html40 .\n [HTML32] \n \"HTML 3.2 Recommendation\", D. Raggett, ed.,\n14 January 1997. The latest version of HTML 3.2\nis available at:\nhttp://www.w3.org/TR/REC-html32 . \n [MATHML] \n \"Mathematical Markup Language\", P. Ion and R. Miner, eds.,\n7 April 1998. The MathML 1.0\nRecommendation is:\nhttp://www.w3.org/TR/1998/REC-MathML-19980407 . \nThe latest version of MathML 1.0 is available at:\nhttp://www.w3.org/TRREC-MathML .\n [PNG] \n \"PNG (Portable Network Graphics) Specification\", T. Boutell, ed.,\nT. Lane, contributing ed., 1 October 1996.\nThe latest version of PNG 1.0 is:\nhttp://www.w3.org/TR/REC-png .\n [RDF] \n \"Resource Description Framework\n(RDF) Model and Syntax Specification\", O. Lassila, R. Swick,\neds., 22 February 1999. The RDF Recommendation is:\nhttp://www.w3.org/TR/1999/REC-rdf-syntax-19990222 . \nThe latest version of RDF 1.0 is available at:\nhttp://www.w3.org/TR/REC-rdf-syntax \n [RFC2068] \n \"HTTP Version 1.1\" , R. Fielding, J. Gettys, J. Mogul, H.\nFrystyk Nielsen, and T. Berners-Lee, January 1997. \n [SMIL] \n \"Synchronized Multimedia Integration Language (SMIL) 1.0\nSpecification\", P. Hoschka, ed., 15 June 1998. \nThe SMIL 1.0 Recommendation is:\nhttp://www.w3.org/TR/1998/REC-smil-19980615 \nThe latest version of SMIL 1.0 is available at:\nhttp://www.w3.org/TR/REC-smil \n [TECHNIQUES] \n \"Techniques for Web Content Accessibility Guidelines 1.0\", W. Chisholm, G. Vanderheiden, I. Jacobs, eds.\nThis document explains how to implement the checkpoints defined\nin \"Web Content Accessibility Guidelines 1.0\". The latest draft of the techniques is\navailable at:\nhttp://www.w3.org/TR/WAI-WEBCONTENT-TECHS/ \n [WAI-AUTOOLS] \n \"Authoring Tool Accessibility Guidelines\", J. Treviranus,\nJ. Richards, I. Jacobs, C. McCathieNevile, eds. \nThe latest Working Draft of these guidelines for designing\naccessible authoring tools is available at:\nhttp://www.w3.org/TR/WAI-AUTOOLS/ \n [WAI-UA-SUPPORT] \n This page documents known support by user agents (including\nassistive technologies) of some accessibility features listed\nin this document. The page is available at:\nhttp://www.w3.org/WAI/Resources/WAI-UA-Support \n [WAI-USERAGENT] \n \"User Agent Accessibility Guidelines\", J. Gunderson \nand I. Jacobs, eds. \nThe latest Working Draft of these guidelines for designing accessible\nuser agents is available at:\nhttp://www.w3.org/TR/WAI-USERAGENT/ \n [WCAG-ICONS] \n Information about conformance icons for this document and how to\nuse them is available at \nhttp://www.w3.org/WAI/WCAG1-Conformance.html \n [UWSAG] \n \"The Unified Web Site Accessibility Guidelines\", G.\nVanderheiden, W. Chisholm, eds. \nThe Unified Web Site Guidelines were compiled by the \n Trace R\n& D Center  at the University of Wisconsin under funding from the\nNational Institute on Disability and Rehabilitation Research\n(NIDRR),\u00a0 U.S. Dept. of Education. This document is\navailable at:\nhttp://www.tracecenter.org/docs/html_guidelines/version8.htm \n [XML] \n \"Extensible Markup Language (XML) 1.0.\", T. Bray, J. Paoli, C.M. \nSperberg-McQueen, eds., 10 February 1998. \nThe XML 1.0 Recommendation is:\nhttp://www.w3.org/TR/1998/REC-xml-19980210 . \nThe latest version of XML 1.0 is available at:\nhttp://www.w3.org/TR/REC-xml \n[ contents ] \u00a0\n[ checklist ]"}