{"url": "https://en.wikipedia.org/wiki/Music_Macro_Language", "content": "Music Macro Language - Wikipedia \n Music Macro Language   \n From Wikipedia, the free encyclopedia   \n\t\t\t\t\tJump to:\t\t\t\t\t navigation , \t\t\t\t\t search \n Not to be confused with the  XML -based  Music Markup Language , though Music Macro Language is sometimes erroneously called by this name. \n Music Macro Language (MML)  is a  music description language  used in  sequencing  music on  computer  and  video game systems . \n Contents \n 1   Background \n 2   Versions \n 2.1   Classical MML \n 2.1.1   Syntax \n 2.1.2   Example \n 2.2   Modern MML \n 2.2.1   Syntax \n 3   Languages, platforms and software \n 4   References \n 5   External links \n Background [ edit ] \n Early automatic music generation functions were used in arcade games, which used many computer sounds. An example of an early popular Arcade game with music is The  Circus  from  Exidy Corporation  in 1977. \n The boom in Japanese video games was heralded in 1978 by the appearance in Japanese game centers ( Amusement arcades ) of  Space Invaders  by  TAITO Corporation . [1] \n The music was all proprietary (closed source). The 1978 release of the  Programmable interval timer  by  Intel  was significant. The  Intel 8253  Mode 3 Square Wave generator was used for music, in the Kit computer  MZ-40K (Microcomputer Doctor  ( Maikon Hakase ,   \u30de\u30a4\u30b3\u30f3\u535a\u58eb/\u307e\u3044\u3053\u3093\u306f\u304b\u305b ) ) by  SHARP Corporation , made in Japan at May 1978. Another Micro computer  BASIC MASTER MB-6880(ja) BASIC Master  ( BASIC Master ,   \u30d9\u30fc\u30b7\u30c3\u30af\u30de\u30b9\u30bf\u30fc )  used a 5Bit D/A converter music automated reference signal. Also important was the development of a method to generate using  BASIC  software. [2]  The machine was assembled by  Hitachi, Ltd.  and made in Japan in September 1978. \n The  MZ-40K  featured an open  architecture  and  program sources . [3] \n Versions [ edit ] \n Classical MML [ edit ] \n The first commands for classical MML appeared in the internal architecture of the SP-1002 MONITOR  IOCS [4]  and SP-5001  BASIC  Operating Systems on the  MZ-80K   8-bit [5]  computer. Made by  SHARP Corporation  at 1978 in  Japan . [6]  It incorporated  Intel 8253  hardware and memory mapped I/O. The sound-related  BASIC  Statements were MUSIC, TEMPO, and BEEP.  [7] \n Syntax [ edit ] \nAn open-sourced scan of page 110 of  Sharp Corporation 's 1987 MZ-80 BASIC Manual, describing the origins of the MML syntax. \n Classical MML as used in  BASIC  is described here. \" MML Commands \" are supplied to the MUSIC statement. Notes are specified in a three-octave range. A song is a sequence of mono single tones. \n \"+\" (or in some old code, \"\uffe3\") indicates upper octave, \"- \" (or in some old code, \"\uff3f\") indicates the lower octave. The characters \"CDEFGAB\" correspond to a scale (\"Doremi Faso Lassi\"). A semitone is indicated by following the note with a '#' character. The note names are followed by a tone length, indicated by a number from 0-9. Similarly, R indicates a rest, and is also followed by a number from 0-9 indicating length. Sound length Internal value \u00d7 TEMPO values.Tone length Demisemiquaver is 0 (SP-1002 Internal value is 1)- Whole note is 9 (SP-1002 Internal value is 32). Music played on Call to $0030 SP-1002  IOCS  program routine. [8] \n The sound length \n Value \n Length \n 0 \n 1/32 \n 1 \n 1/16 \n 2 \n dotted 1/16 \n 3 \n 1/8 \n 4 \n dotted 1/8 \n 5 \n 1/4 \n 6 \n dotted 1/4 \n 7 \n 1/2 \n 8 \n dotted 1/2 \n 9 \n 1 \n Statements TEMPO n is 1-9, the slowest 1.TEMPO 4 is similar T=120. \n Example [ edit ] \n Below is the popular Japanese song \" t\u014dryanse \" written using MML in MZ-731 SHARP  S-BASIC  1Z-007B (SP-5001 Upper compatible). [9] \n   10   TEMPO   4 \n   20   A$ = \"E5R1E3R0D3R0E3R0E1R0D1R0-G4R1\" \n   30   B$ = \"F3R0F1R0F1R0A3R0F1R0E1R0D1R0D1R0E5R0\" \n   40   C$ = \"C3R0C1R0C1R0E3R0C1R0-B1R0C1R0-B1R0-A1R0-A1-B5R0\" \n   50   D$ = \"E1R0E1R0E1R0E1R0E1R0E1R0D1R0E1R0E1R0E1R0D1R0-A1R0-A1R0B3R1\" \n   60   E$ = \"-A1R0-B1R0C1R0D1R0E1R0F1R0E1R0F3R1A3R1B1R0A1R0F3R0E3R0E1R0E4R0\" \n   100   MUSIC   A$ + B$ + B$ \n   110   MUSIC   C$ + C$ + B$ \n   120   MUSIC   C$ + D$ + E$ \n Modern MML [ edit ] \n Modern MML originally appeared in  Microsoft BASIC  and was common in the early 1970s and 1980s on  8-bit  and  16-bit  era  Japanese   personal computers . The  NEC PC-6001  included Microsoft BASIC and the  Programmable Sound Generator  in 1981. The MML was especially popular on  NEC 's personal computers, such as the  NEC PC-8801 . [10]  With the 2001 release of the mck (Music Creation Kit) software for compiling MML to play music on the  Nintendo Entertainment System , [11]  awareness and use of MML increased. [12]  MML is presently popular among  Japanese  electronic musicians [10]  and musicians who create  chiptunes [13]  as a way to write music for the  Nintendo Entertainment System . \n Syntax [ edit ] \n Modern MML originated as a sub-language of  BASIC , then generally included in  ROM  on micro-computers. A  PLAY  statement uses an  argument  to define a string of tones that the sound-chip played. MML code has a simple text format whereby letters and numbers are used to describe the  musical notes  to be played. [10]  In addition, various implementations of MML add system extensions allowing parameters of  audio synthesis  to be altered with specialized commands or to simplify the entry of common musical figures such as  arpeggios . \n Though many platforms feature custom extensions and  letter case  requirements and other minor syntactical features vary slightly in some implementations, the fundamental syntax rules, commands and features that define MML and are present in whole or in part in all implementations are as follows: [10] [14] \n cdefgab \u00a0\u2014 The letters  a  to  g  correspond to the  musical pitches  and cause the corresponding  note  to be played.  Sharp  notes are produced by appending a  +  or  # , and  flat  notes by appending a  - . The length of a note is specified by appending a number representing its length as a fraction of a  whole note \u00a0\u2014 for example,  c8  represents a  C   eighth note , and  f+2  an  F\u266f   half note . \n p \u00a0\u2014 A  pause or rest . Sometimes also  r , although the original IBM and Microsoft BASIC used  p , [15]  as do all clones (e.g. the Linux and BSD speaker devices). [16]  The length of the rest is specified in the same manner as the length of a note\u00a0\u2014 for example,  r1  produces a  whole rest . \n o \u00a0\u2014 Followed by a number,  o  selects the  octave  the instrument will play in. \n > ,  < \u00a0\u2014 Used to step up or down one  octave . \n l \u00a0\u2014 Followed by a number, specifies the default length used by notes or rests which do not explicitly define one. For example,  l8 g a b g l16 g a b g  produces a series of four  eighth notes  followed by a series of four  sixteenth notes . \n v \u00a0\u2014 Followed by a number, sets the  volume  of the instrument. The range of values allowed is dependent upon the specific sound hardware being used. Some implementations also allow an  ADSR envelope  to be applied to the amplitude of each note. \n t \u00a0\u2014 Followed by a number, sets the  tempo  in  beats per minute . On hardware with more than one sound channel, it is often possible to set each channel to a different tempo. \n In addition to these, most implementations add their own keywords and symbols for system-specific enhancements or extensions. \n Languages, platforms and software [ edit ] \n Epic Games 's  ZZT  and  Super ZZT , as well as the open-source clone named  MegaZeux , use a very compact variant of MML for the PLAY command, with only one channel for the  PC Speaker \n Microsoft 's  QBASIC ,  BASICA , and  GW-BASIC  all feature a  PLAY  statement which takes a  string  argument in the SMX format. [17] [18] [19]  The name \"Music Macro Language\" may originate with GW-BASIC, which provided a facility \"to play music by embedding a music macro language into the string data type.\" [20]  The SBasic compiler from the German magazine DOS Extra, produced by DMV Widuch, offers the same PLAY command, and a few-line BASIC programme could be compiled into a small (few KiB) tool to play any MML files (often called *.PLY) given on the command line. \n The  NEC PC-8801 's BASIC dialect, N88-BASIC, used MML in its  PLAY  statement, as did several other implementations of BASIC produced or sold by  NEC . [10] [21] \n Chiptune  composer  Yuzo Koshiro  created a heavily modified version. According to Koshiro, it \"was more a BASIC-style language at first, but I modified it to be something more like  Assembly . I called it \u2018Music Love'. I used it for all the  Bare Knuckle  Games.\" [22] \n The mck, pmck, and ppmck utilities for creating  Nintendo Entertainment System  music, and a number of other tools for creating music for other hardware, such as the  Bandai WonderSwan , the  NEC PC Engine , and the  Sega Mega Drive . [12] \n The xpmck utility for creating music for various systems, including the  Sega Master System ,  Sega Game Gear ,  Sega Mega Drive ,  Nintendo   Game Boy  and  Commodore 64 . [23] \n Some  cellular phones  utilize MML as a  ringtone  format. [24]  The  RTTTL  ringtone language exhibits many of the characteristics of MML. \n An  escape sequence  was defined to allow terminal programs play music encoded in MML. Because of this music in MML is sometimes called ANSI Music. [25] \n On  MSX  computer system built in  MSX BASIC  also uses MML with PLAY-command. Comma separated strings represent separate voice channels. Music hardware expansions such as MSX-Music, MSX-Audio and MSX-MIDI expand PLAY-command so that also FM-chips and external MIDI devices can be controlled through MML. \n OpenBSD  and  MirOS BSD  offer /dev/speaker [26]  in a  GW-BASIC -compatible format \n Sharp Pocket computer music routine PLAYX -  MyArchive .Nihongo ->  ja:\u30dd\u30b1\u30c3\u30c8\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u88fd\u54c1\u4e00\u89a7 . \n Macrotune  is a free MML editor available for Windows and OS X while also offering  Shared libraries  for software/game developers. \n Floppi-Music  uses an extended format with a file header with metadata (such as Author, Title, etc.), a newline, and then one line for each staff, supporting multiple instruments, with bar lines. It\u2019s designed to output to up to eight 3\u00bd\u2033 floppy disc drives on Raspberry Pi GPIO ports. It also contains a  standalone MML parser and MusicXML exporter  library and utility, tested with  MuseScore , allowing easy debugging of especially mass-parallel MML files, score sheet printing (ideally after some minimal postprocessing, but the defaults are usually legible), etc. \u2013 Floppi-Music and MMLlib is Free Software written in pure Python. \n References [ edit ] \n ^   Compiled by \" Tomohiro Nishikado \"  ( \u897f\u89d2\u53cb\u5b8f/\u306b\u3057\u304b\u3069\u3068\u3082\u3072\u308d )  worked in the Pacific Industrial Co.,Ltd. All compiled alone. \n ^   PDF file;Micro Computer BASIC MASTER MB-6880 Music method  -  Kunihiko  ( \u5700\u5f66 ) , Nagai  ( \u9577\u4e95 ) ; Teruhiro  ( \u8f1d\u6d0b ) , Takezawa  ( \u7af9\u6fa4 ) ; Kazuma  ( \u4e00\u99ac ) , Yoshimura  ( \u5409\u6751 ) ; KaTsutoshi  ( \u6d3b\u5229 ) , Tajima  ( \u7530\u5cf6 )  (1979-04-26).  \"Hitachi Hyoron April 1979 Special Features:A micro-computer, the application method\" .  digital.hitachihyoron . HITACHI . Retrieved  26 August  2013 . \u00a0 \n ^   Remains  Apple  Open technology by  Steve Wozniak  in 1977 like  Apple  Red book  Apple Computers . \n ^   \"SHARP MZ.org MZ-80K monitor sub $0030\" . 2012-09-20. \u00a0 \n ^   CPU  is  Z-80   Zilog  Licensed Secondary source \n ^   Nobuaki Ohishi (2012-09-20).  \"Nibbles lab.SHARP Museum,MZ-80K Photo and Catalog\" . \u00a0 \n ^   SHARP Corporation; nagusa_kei (1978).  MZ-80 BASIC SP-5030 \u30de\u30cb\u30e5\u30a2\u30eb . SHARP Corporation. p.\u00a0110. \u00a0 -Document(validation) Upper Version SP-5030  \"twitter oec_Nibbleslab\" . 2012-09-22. \u00a0 - \"twitter PlayTrueName\" . 2012-09-22 . Retrieved  2012-09-22 . \u00a0 \"twitter(twilog) PlayTrueName\" . 2012-09-22 . Retrieved  2012-12-28 . \u00a0   SHARP Corporation (1978).  MZ-80 BASIC \u30de\u30cb\u30e5\u30a2\u30eb . SHARP Corporation. p.\u00a0110. \u00a0 \n ^   \"SHARP MZ.org MZ-80K monitor sub $0030\" . 2012-09-20. \u00a0 / \"SHARP MZ.org MZ-700 monitor sub $0030\" . 2012-09-20. \u00a0 \n ^   Motoi, Kenkichi.  \"Viewpoint of the eye. She said \"you playing\" I'm crying/Awamomo Office\" . Retrieved  2012-09-20 . \u00a0  Programmed and arranged by  Motoi, Kenkichi.  \"Twitter @PlayTrueName \u03a3:D\u300eSo long time wake up to the\u25ceProgramming to sound of music\" . Retrieved  2012-09-22 . \u00a0  Licensed #AAAP(Including  Creative Commons CC-BY-SA  and  Text of GNU Free Documentation License. ). \n ^  a   b   c   d   e   Selfridge-Field, Eleanor (1997).  Beyond Midi: The Handbook of Musical Codes . Cambridge:  MIT Press .  ISBN \u00a0 0-262-19394-9 . \u00a0 \n ^   \"VORC Internet Chiptune Encyclopedia - mck\" . Archived from  the original  on 2008-01-03 . Retrieved  2008-02-13 . \u00a0 \n ^  a   b   \"VORC Internet Chiptune Encyclopedia - MML\" . Archived from  the original  on 2007-11-23 . Retrieved  2008-02-13 . \u00a0 \n ^   \"VORC: VGM or Chiptune of The Year 2001\" . 2001-12-31. \u00a0 \n ^   Johnson, Jeremiah .  \"MCK/MML Beginners Guide\" . Retrieved  2008-02-13 . \u00a0 \n ^   IBM BASIC manual, Second Edition (May 1982), Version 1.10 \n ^   MirBSD speaker device documentation \n ^   \"QBasic manual\". Microsoft Corporation. 1991. \u00a0 \n ^   \"IBM Personal Computer BASIC manual\". IBM Corporation. 1982. \u00a0 \n ^   \"BASICA manual\". Microsoft Corporation. 1982. \u00a0 \n ^   \"GW-BASIC manual\". Microsoft Corporation. 1987. \u00a0 \n ^   Koshiro, Y\u016bz\u014d .  \"Yuzo Koshiro Interview\"  (Interview). Interview with Kikizo Games . Retrieved  2008-02-13 . \u00a0 \n ^   Szczepaniak, John.  \"Retro Japanese Computers: Gaming's Final Frontier\" . Hardcore Gaming 101 . Retrieved  2011-03-29 . \u00a0  Reprinted from  Retro Gamer   (67), 2009 \u00a0 \n ^   Swimm, Peter (December 21, 2009).  \"XPMCK - Cross Platform Music Compiler Kit updated\" . True Chip Till Death . Retrieved  December 29,  2011 . \u00a0 \n ^   \"\u7740\u4fe1\u30e1\u30ed\u30c7\u30a3\u306f\u518d\u3073\u81ea\u5206\u3067\u4f5c\u308b\u6642\u4ee3\u306b\uff1f\u2500\u2500MIDI\u30d5\u30a1\u30a4\u30eb\u3084WAV\u30d5\u30a1\u30a4\u30eb\u3092\u7740\u30e1\u30ed\u306b\u5909\u63db\" . ITmedia, Inc. 2001-04-03 . Retrieved  2008-02-13 . \u00a0 \n ^   \"ANSI Music - The Technical Details\" . Retrieved  2009-01-16 . \u00a0 \n ^   speaker(4) manual page \n External links [ edit ] \n mck  compiler utility, which turns MML into  Nintendo Entertainment System   assembly language  which can then be assembled into an NES program \n (in Japanese)   ppmck , an advanced patched version of mck with added features \n xpmck  compiler utility, which turns MML into  assembly language  which can then be assembled into programs for various video game consoles. It can also convert MML directly to  VGM  files with support for the  SN76489  and  YM2612 . \n (in Japanese)   mml2mid , a utility for converting MML to MIDI sequences \n Ultimate PPMCK MML Reference \n v \n t \n e \n Video game music \n Composers \n Japanese \n Takeshi Abo \n Yoshino Aoki \n Kenichiro Fukui \n Masashi Hamauzu \n Miki Higashino \n Wataru Hokoyama \n Shinji Hosoe \n Kenji Ito \n Noriyuki Iwadare \n Akari Kaida \n Hiroshi Kawaguchi \n Motohiro Kawashima \n Hiroki Kikuta \n Koji Kondo \n Yuzo Koshiro \n Jun Maeda \n Junichi Masuda \n Manami Matsumae \n Shoji Meguro \n Yasunori Mitsuda \n Takenobu Mitsuyoshi \n Yuu Miyake \n Masato Nakamura \n Junya Nakano \n Manabu Namiki \n Michiko Naruke \n Hitoshi Sakimoto \n Motoi Sakuraba \n Nobuyoshi Sano \n Tsuyoshi Sekito \n Yoko Shimomura \n Koichi Sugiyama \n Keiichi Suzuki \n Masafumi Takada \n Hirokazu Tanaka \n Kazumi Totaka \n Nobuo Uematsu \n Ryu Umemoto \n Ippo Yamada \n Michiru Yamane \n Akira Yamaoka \n Kinuyo Yamashita \n Kenji Yamazaki \n Western \n Clint Bajakian \n Danny Baranowsky \n Michiel van den Bos \n Alexander Brandon \n Bill Brown \n Ben Daglish \n Rom Di Prisco \n Eveline Fischer \n Tim Follin \n Dan Gardop\u00e9e \n Michael Giacchino \n Mick Gordon \n Jason Graves \n Peter Hajba \n James Hannigan \n Rob Hubbard \n Chris Huelsbeck \n Richard Jacques \n Jake Kaufman \n Grant Kirkhope \n Frank Klepacki \n Darren Korb \n Jesper Kyd \n Michael Land \n Peter McConnell \n Spencer Nilsen \n Graeme Norgate \n Martin O'Donnell \n Bobby Prince \n Winifred Phillips \n Marcin Przyby\u0142owicz \n Kevin Riepl \n George Sanger \n Garry Schyman \n Andrew Sega \n Jeremy Soule \n Tommy Tallarico \n Chance Thomas \n Jonne Valtonen \n Jack Wall \n David Wise \n Austin Wintory \n Inon Zur \n Sound teams \nand bands \n Alph Lyla \n The Black Mages \n Earthbound Papas \n Gamadelic \n Konami Kukeiha Club \n SoundTeMP \n S.S.T. Band \n Straylight Productions \n Terra \n Zuntata \n Compositions \nand scores \n \" Baba Yetu \" \n Final Fantasy \n Hitman: Codename 47 / Hitman 2: Silent Assassin \n Journey \n Space Invaders \n \" Still Alive \" \n Super Mario Bros.  theme \n Touhou Project \n Concert series \nand festivals \n Active \n Final Fantasy  concerts \n The Legend of Zelda : Symphony of the Goddesses \n MAGFest \n Pok\u00e9mon : Symphonic Evolutions \n Press Start: Symphony of Games \n Symphonic Game Music Concerts \n Video Games Live \n Inactive \n Eminence Symphony Orchestra \n Game Music Concert \n PLAY! A Video Game Symphony \n Scenes \n Demoscene \n D\u014djin music \n OverClocked ReMix \n VGMusic.com \n Technology \n Adaptive music \n Audiokinetic Wwise \n FMOD \n iMUSE \n Music Macro Language \n Music tracker \n Sound chips \n Streaming audio in video games \n Sound formats \n GBS \n IMF \n MOD \n Portable Sound Format \n SAP \n SID \n SPC \n VGM \n Related genres \n Chiptune \n Bitpop \n Nintendocore \n Tracker (MOD) music \n\t\t\t\t\t\tRetrieved from \" https://en.wikipedia.org/w/index.php?title=Music_Macro_Language&oldid=803995254 \"\t\t\t\t\t \n Categories :  Music notation file formats Video game music Video game music file formats Audio programming languages Free audio software Electronic music software Hidden categories:  Articles containing Japanese-language text Articles with Japanese-language external links   \n Navigation menu \n Personal tools \n Not logged in Talk Contributions Create account Log in   \n Namespaces \n Article Talk   \n Variants \n Views \n Read Edit View history   \n More \n Search \n Navigation \n Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store   \n Interaction \n Help About Wikipedia Community portal Recent changes Contact page   \n Tools \n What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page   \n Print/export \n Create a book Download as PDF Printable version   \n Languages \n \u65e5\u672c\u8a9e \u4e2d\u6587   \n Edit links   \n  This page was last edited on 6 October 2017, at 00:31. \n Text is available under the  Creative Commons Attribution-ShareAlike License ;\nadditional terms may apply.  By using this site, you agree to the  Terms of Use  and  Privacy Policy . Wikipedia\u00ae is a registered trademark of the  Wikimedia Foundation, Inc. , a non-profit organization. \n Privacy policy \n About Wikipedia \n Disclaimers \n Contact Wikipedia \n Developers \n Cookie statement \n Mobile view"}