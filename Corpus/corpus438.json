{"url": "https://en.wikipedia.org/wiki/Protein_design", "content": "Protein design - Wikipedia \n Protein design   \n From Wikipedia, the free encyclopedia   \n\t\t\t\t\tJump to:\t\t\t\t\t navigation , \t\t\t\t\t search \n This article is about rational protein design. For the broader engineering of proteins, see  Protein engineering . \n Protein design  is the  rational design  of new  protein  molecules to fold to a target  protein structure , with the end goal of designing novel function and/or behavior. Proteins can be designed from scratch ( de novo  design) or by making calculated variants of a known protein structure and its sequence (termed  protein redesign ).  Rational protein design  approaches make protein-sequence predictions that will fold to specific structures. These predicted sequences can then be validated experimentally through methods such as  peptide synthesis ,  site-directed mutagenesis , or  artificial gene synthesis . \n Rational protein design dates back to the mid-1970s, although initial protein design approaches were based mostly on sequence composition and did not account for specific interactions between side-chains at the atomic level. [1]  Recently, however, improvements in molecular force fields, protein design algorithms, and  structural bioinformatics , such as  libraries of amino acid conformations , have enabled the development of advanced computational protein design tools. These computational tools can make complex calculations on protein energetics and flexibility, and perform searches over vast  configuration spaces , which would be unfeasible to perform manually. Due to the development of computational protein design programs, and important successes in the field (see  examples  below), rational protein design has become one of the most important tools in  protein engineering . \n Contents \n 1   Overview and history \n 2   Underlying models of protein structure and function \n 2.1   Target structure \n 2.2   Sequence space \n 2.3   Structural flexibility \n 2.4   Energy function \n 2.4.1   Challenges for effective design energy functions \n 3   As an optimization problem \n 4   Algorithms \n 4.1   With mathematical guarantees \n 4.1.1   Dead-end elimination \n 4.1.2   Branch and bound \n 4.1.3   Integer linear programming \n 4.1.4   Message-passing based approximations to the linear programming dual \n 4.2   Optimization algorithms without guarantees \n 4.2.1   Monte Carlo and simulated annealing \n 4.2.2   FASTER \n 4.2.3   Belief propagation \n 5   Applications and examples of designed proteins \n 5.1   Enzyme design \n 5.2   Design for affinity \n 5.2.1   Scoring binding predictions \n 5.3   Design for specificity \n 5.4   Protein resurfacing \n 5.5   Design of globular proteins \n 5.6   Design of transmembrane proteins \n 5.7   Design of fibrous proteins \n 5.8   Other applications \n 6   See also \n 7   References \n 8   Further reading \n Overview and history [ edit ] \n The goal in rational protein design is to predict  amino acid   sequences  that will  fold  to a specific protein structure. Although the number of possible protein sequences is vast, growing exponentially with the size of the protein chain, only a subset of them will fold reliably and quickly to one  native state . Protein design involves identifying novel sequences within this subset. The native state of a protein is the conformational  free energy  minimum for the chain. Thus, protein design is the search for sequences that have the chosen structure as a free energy minimum. In a sense, it is the reverse of  protein structure prediction . In design, a  tertiary structure  is specified, and a sequence that will fold to it is identified. Hence, it is also termed  inverse folding . Protein design is then an optimization problem: using some scoring criteria, an optimized sequence that will fold to the desired structure is chosen. \n When the first proteins were rationally designed during the 1970s and 1980s, the sequence for these was optimized manually based on analyses of other known proteins, the sequence composition, amino acid charges, and the geometry of the desired structure. [1]  The first designed proteins are attributed to Bernd Gutte, who designed a reduced version of a known catalyst, bovine ribonuclease, and tertiary structures consisting of beta-sheets and alpha-helices, including a binder of  DDT . Urry and colleagues later designed  elastin -like  fibrous  peptides based on rules on sequence composition. Richardson and coworkers designed a 79-residue protein with no sequence homology to a known protein. [1]  In the 1990s, the advent of powerful computers,  libraries of amino acid conformations , and force fields developed mainly for  molecular dynamics  simulations enabled the development of structure-based computational protein design tools. Following the development of these computational tools, great success has been achieved over the last 30 years in protein design. The first protein successfully designed completely  de novo  was done by  Stephen Mayo  and coworkers in 1997, [2]  and, shortly after, in 1999  Peter S. Kim  and coworkers designed dimers, trimers, and tetramers of unnatural right-handed  coiled coils . [3] [4]  In 2003,  David Baker 's laboratory designed a full protein to a fold never seen before in nature. [5]  Later, in 2008, Baker's group computationally designed enzymes for two different reactions. [6]  In 2010, one of the most powerful broadly neutralizing antibodies was isolated from patient serum using a computationally designed protein probe. [7]  Due to these and other successes (e.g., see  examples  below), protein design has become one of the most important tools available for  protein engineering . There is great hope that the design of new proteins, small and large, will have uses in  biomedicine  and  bioengineering . \n Underlying models of protein structure and function [ edit ] \n Protein design programs use  computer models  of the molecular forces that drive proteins in  in vivo  environments. In order to make the problem tractable, these forces are simplified by protein design models. Although protein design programs vary greatly, they have to address four main modeling questions: What is the target structure of the design, what flexibility is allowed on the target structure, which sequences are included in the search, and which force field will be used to score sequences and structures. \n Target structure [ edit ] \nThe  Top7  protein was one of the first proteins designed for a fold that had never been seen before in nature [5] \n Protein function is heavily dependent on protein structure, and rational protein design uses this relationship to design function by designing proteins that have a target structure or fold. Thus, by definition, in rational protein design the target structure or ensemble of structures must be known beforehand. This contrasts with other forms of protein engineering, such as  directed evolution , where a variety of methods are used to find proteins that achieve a specific function, and with  protein structure prediction  where the sequence is known, but the structure is unknown. \n Most often, the target structure is based on a known structure of another protein. However, novel folds not seen in nature have been made increasingly possible. Peter S. Kim and coworkers designed trimers and tetramers of unnatural coiled coils, which had not been seen before in nature. [3] [4]  The protein Top7, developed in  David Baker 's lab, was designed completely using protein design algorithms, to a completely novel fold. [5]  More recently, Baker and coworkers developed a series of principles to design ideal  globular-protein  structures based on  protein folding funnels  that bridge between secondary structure prediction and tertiary structures. These principles, which build on both protein structure prediction and protein design, were used to design five different novel protein topologies. [8] \n Sequence space [ edit ] \nFSD-1 (shown in blue, PDB id: 1FSV) was the first  de novo  computational design of a full protein. [2]  The target fold was that of the zinc finger in residues 33\u201360 of the structure of protein Zif268 (shown in red, PDB id: 1ZAA). The designed sequence had very little sequence identity with any known protein sequence. \n In rational protein design, proteins can be redesigned from the sequence and structure of a known protein, or completely from scratch in  de novo  protein design. In protein redesign, most of the residues in the sequence are maintained as their wild-type amino-acid while a few are allowed to mutate. In  de novo  design, the entire sequence is designed anew, based on no prior sequence. \n Both  de novo  designs and protein redesigns can establish rules on the  sequence space : the specific amino acids that are allowed at each mutable residue position. For example, the composition of the surface of the  RSC3 probe  to select HIV-broadly neutralizing antibodies was restricted based on evolutionary data and charge balancing. Many of the earliest attempts on protein design were heavily based on empiric  rules  on the sequence space. [1]  Moreover, the  design of fibrous proteins  usually follows strict rules on the sequence space.  Collagen -based designed proteins, for example, are often composed of Gly-Pro-X repeating patterns. [1]  The advent of computational techniques allows designing proteins with no human intervention in sequence selection. [2] \n Structural flexibility [ edit ] \nCommon protein design programs use rotamer libraries to simplify the conformational space of protein side chains. This animation loops through all the rotamers of the isoleucine amino acid based on the Penultimate Rotamer Library. [9] \n In protein design, the target structure (or structures) of the protein are known. However, a rational protein design approach must model some  flexibility  on the target structure in order to increase the number of sequences that can be designed for that structure and to minimize the chance of a sequence folding to a different structure. For example, in a protein redesign of one small amino acid (such as alanine) in the tightly packed core of a protein, very few mutants would be predicted by a rational design approach to fold to the target structure, if the surrounding side-chains are not allowed to be repacked. \n Thus, an essential parameter of any design process is the amount of flexibility allowed for both the side-chains and the backbone. In the simplest models, the protein backbone is kept rigid while some of the protein side-chains are allowed to change conformations. However, side-chains can have many degrees of freedom in their bond lengths, bond angles, and  \u03c7  dihedral angles . To simplify this space, protein design methods use rotamer libraries that assume ideal values for bond lengths and bond angles, while restricting  \u03c7  dihedral angles to a few oft-observed low-energy conformations termed  rotamers . \n Rotamer libraries describe rotamers based on an analysis of many protein structures. Backbone-independent rotamer libraries describe all rotamers. [9]  Backbone-dependent rotamer libraries, in contrast, describe the rotamers as how likely they are to appear depending on the protein backbone arrangement around the side chain. [10]  The rotamers described by rotamer libraries are usually regions in space. Most protein design programs use one conformation (e.g., the modal value for rotamer dihedrals in space) or several points in the region described by the rotamer; the  OSPREY  protein design program, in contrast, models the entire continuous region. [11] \n Although rational protein design must preserve the general backbone fold a protein, allowing some backbone flexibility can significantly increase the number of sequences that fold to the structure while maintaining the general fold of the protein. [12]  Backbone flexibility is especially important in protein redesign because sequence mutations often result in small changes to the backbone structure. Moreover, backbone flexibility can be essential for more advanced applications of protein design, such as binding prediction and enzyme design. Some models of protein design backbone flexibility include small and continuous global backbone movements, discrete backbone samples around the target fold, backrub motions, and protein loop flexibility. [12] [13] \n Energy function [ edit ] \nComparison of various potential energy functions. The most accurate energy are those that use quantum mechanical calculations, but these are too slow for protein design. On the other extreme, heuristic energy functions, are based on statistical terms and are very fast. In the middle are molecular mechanics energy functions that are physically-based but are not as computationally expensive as quantum mechanical simulations. [14] \n Rational protein design techniques must be able to discriminate sequences that will be stable under the target fold from those that would prefer other low-energy competing states. Thus, protein design requires accurate  energy functions  that can rank and score sequences by how well they fold to the target structure. At the same time, however, these energy functions must consider the computational  challenges  behind protein design. One of the most challenging requirements for successful design is an energy function that is both accurate and simple for computational calculations. \n The most accurate energy functions are those based on quantum mechanical simulations. However, such simulations are too slow and typically impractical for protein design. Instead, many protein design algorithms use either physics-based energy functions adapted from  molecular mechanics  simulation programs,  knowledge based energy-functions , or a hybrid mix of both. The trend has been toward using more physics-based potential energy functions. [14] \n Physics-based energy functions, such as  AMBER  and  CHARMM , are typically derived from quantum mechanical simulations, and experimental data from thermodynamics, crystallography, and spectroscopy. [15]  These energy functions typically simplify physical energy function and make them pairwise decomposable, meaning that the total energy of a protein conformation can be calculated by adding the pairwise energy between each atom pair, which makes them attractive for optimization algorithms. Physics-based energy functions typically model an attractive-repulsive  Lennard-Jones  term between atoms and a pairwise  electrostatics  coulombic term [16]  between non-bonded atoms. \nWater-mediated hydrogen bonds play a key role in protein\u2013protein binding. One such interaction is shown between residues D457, S365 in the heavy chain of the HIV-broadly-neutralizing antibody VRC01 (green) and residues N58 and Y59 in the HIV envelope protein GP120 (purple). [17] \n Statistical potentials, in contrast to physics-based potentials, have the advantage of being fast to compute, of accounting implicitly of complex effects and being less sensitive to small changes in the protein structure. [18]  These energy functions are  based on deriving energy values  from frequency of appearance on a structural database. \n Protein design, however, has requirements that can sometimes be limited in molecular mechanics force-fields. Molecular mechanics force-fields, which have been used mostly in molecular dynamics simulations, are optimized for the simulation of single sequences, but protein design searches through many conformations of many sequences. Thus, molecular mechanics force-fields must be tailored for protein design. In practice, protein design energy functions often incorporate both statistical terms and physics-based terms. For example, the Rosetta energy function, one of the most-used energy functions, incorporates physics-based energy terms originating in the CHARMM energy function, and statistical energy terms, such as rotamer probability and knowledge-based electrostatics. Typically, energy functions are highly customized between laboratories, and specifically tailored for every design. [15] \n Challenges for effective design energy functions [ edit ] \n Water makes up most of the molecules surrounding proteins and is the main driver of protein structure. Thus, modeling the interaction between water and protein is vital in protein design. The number of water molecules that interact with a protein at any given time is huge and each one has a large number of degrees of freedom and interaction partners. Instead, protein design programs model most of such water molecules as a continuum, modeling both the hydrophobic effect and solvation polarization. [15] \n Individual water molecules can sometimes have a crucial structural role in the core of proteins, and in protein\u2013protein or protein\u2013ligand interactions. Failing to model such waters can result in mispredictions of the optimal sequence of a protein\u2013protein interface. As an alternative, water molecules can be added to rotamers. \n [15] \n As an optimization problem [ edit ] \nThis animation illustrates the complexity of a protein design search, which typically compares all the rotamer-conformations from all possible mutations at all residues. In this example, the residues Phe36 and His 106 are allowed to mutate to, respectively, the amino acids Tyr and Asn. Phe and Tyr have 4 rotamers each in the rotamer library, while Asn and His have 7 and 8 rotamers, respectively, in the rotamer library (from the Richardson's penultimate rotamer library [9] ). The animation loops through all (4 + 4) x (7 + 8) = 120 possibilities. The structure shown is that of myoglobin, PDB id: 1mbn. \n The goal of protein design is to find a protein sequence that will fold to a target structure. A protein design algorithm must, thus, search all the conformations of each sequence, with respect to the target fold, and rank sequences according to the lowest-energy conformation of each one, as determined by the protein design energy function. Thus, a typical input to the protein design algorithm is the target fold, the sequence space, the structural flexibility, and the energy function, while the output is one or more sequences that are predicted to fold stably to the target structure. \n The number of candidate protein sequences, however, grows exponentially with the number of protein residues; for example, there are 20 100  protein sequences of length 100. Furthermore, even if amino acid side-chain conformations are limited to a few rotamers (see  Structural flexibility ), this results in an exponential number of conformations for each sequence. Thus, in our 100 residue protein, and assuming that each amino acid has exactly 10 rotamers, a search algorithm that searches this space will have to search over 200 100  protein conformations. \n The most common energy functions can be decomposed into pairwise terms between rotamers and amino acid types, which casts the problem as a combinatorial one, and powerful optimization algorithms can be used to solve it. In those cases, the total energy of each conformation belonging to each sequence can be formulated as a sum of individual and pairwise terms between residue positions. If a designer is interested only in the best sequence, the protein design algorithm only requires the lowest-energy conformation of the lowest-energy sequence. In these cases, the amino acid identity of each rotamer can be ignored and all rotamers belonging to different amino acids can be treated the same. Let  r i  be a rotamer at residue position  i  in the protein chain, and  E( r i ) the potential energy between the internal atoms of the rotamer. Let  E ( r i ,  r j ) be the potential energy between  r i  and rotamer  r j  at residue position  j . Then, we define the optimization problem as one of finding the conformation of minimum energy ( E T ): \n min \n E \n T \n = \n \u2211 \n i \n [ \n E \n i \n ( \n r \n i \n ) \n + \n \u2211 \n i \n \u2260 \n j \n E \n i \n j \n ( \n r \n i \n , \n r \n j \n ) \n ] \n {\\displaystyle \\min E_{T}=\\sum _{i}{\\Big [}E_{i}(r_{i})+\\sum _{i\\neq j}E_{ij}(r_{i},r_{j}){\\Big ]}\\,} \n \u00a0 \n \u00a0 \n \u00a0 \n \u00a0 \n ( 1 ) \n The problem of minimizing  E T  is an  NP-hard  problem. [13] [19] [20]  Even though the class of problems is NP-hard, in practice many instances of protein design can be solved exactly or optimized satisfactorily through heuristic methods. \n Algorithms [ edit ] \n Several algorithms have been developed specifically for the protein design problem. These algorithms can be divided into two broad classes: exact algorithms, such as  dead-end elimination , that lack  runtime  guarantees but guarantee the quality of the solution; and  heuristic  algorithms, such as Monte Carlo, that are faster than exact algorithms but have no guarantees on the optimality of the results. Exact algorithms guarantee that the optimization process produced the optimal according to the protein design model. Thus, if the predictions of exact algorithms fail when these are experimentally validated, then the source of error can be attributed to the energy function, the allowed flexibility, the sequence space or the target structure (e.g., if it cannot be designed for) [21] \n Some protein design algorithms are listed below. Although these algorithms address only the most basic formulation of the protein design problem, Equation ( 1 ), when the optimization goal changes because designers introduce improvements and extensions to the protein design model, such as improvements to the structural flexibility allowed (e.g., protein backbone flexibility) or including sophisticated energy terms, many of the extensions on protein design that improve modeling are built atop these algorithms. For example, Rosetta Design incorporates sophisticated energy terms, and backbone flexibility using Monte Carlo as the underlying optimizing algorithm. OSPREY's algorithms build on the dead-end elimination algorithm and A* to incorporate continuous backbone and side-chain movements. Thus, these algorithms provide a good perspective on the different kinds of algorithms available for protein design. \n With mathematical guarantees [ edit ] \n Dead-end elimination [ edit ] \n Main article:  Dead-end elimination \n The dead-end elimination (DEE) algorithm reduces the search space of the problem iteratively by removing rotamers that can be provably shown to be not part of the global lowest energy conformation (GMEC). On each iteration, the dead-end elimination algorithm compares all possible pairs of rotamers at each residue position, and removes each rotamer  r\u2032 i  that can be shown to always be of higher energy than another rotamer  r i  and is thus not part of the GMEC: \n E \n ( \n r \n i \n \u2032 \n ) \n + \n \u2211 \n j \n \u2260 \n i \n min \n r \n j \n E \n ( \n r \n i \n \u2032 \n , \n r \n j \n ) \n > \n E \n ( \n r \n i \n ) \n + \n \u2211 \n j \n \u2260 \n i \n max \n r \n j \n E \n ( \n r \n i \n , \n r \n j \n ) \n {\\displaystyle E(r_{i}^{\\prime })+\\sum _{j\\neq i}\\min _{r_{j}}E(r_{i}^{\\prime },r_{j})>E(r_{i})+\\sum _{j\\neq i}\\max _{r_{j}}E(r_{i},r_{j})} \n Other powerful extensions to the dead-end elimination algorithm include the  pairs elimination criterion , and the  generalized dead-end elimination criterion . This algorithm has also been extended to handle continuous rotamers with provable guarantees. \n Although the Dead-end elimination algorithm runs in polynomial time on each iteration, it cannot guarantee convergence. If, after a certain number of iterations, the dead-end elimination algorithm does not prune any more rotamers, then either rotamers have to be merged or another search algorithm must be used to search the remaining search space. In such cases, the dead-end elimination acts as a pre-filtering algorithm to reduce the search space, while other algorithms, such as A*, Monte Carlo, Linear Programming, or FASTER are used to search the remaining search space. [13] \n Branch and bound [ edit ] \n Main article:  Branch and bound \n The protein design conformational space can be represented as a  tree , where the protein residues are ordered in an arbitrary way, and the tree branches at each of the rotamers in a residue.  Branch and bound  algorithms use this representation to efficiently explore the conformation tree: At each  branching , branch and bound algorithms  bound  the conformation space and explore only the promising branches. [13] [22] [23] \n A popular search algorithm for protein design is the  A* search algorithm . [13] [23]  A* computes a lower-bound score on each partial tree path that lower bounds (with guarantees) the energy of each of the expanded rotamers. Each partial conformation is added to a priority queue and at each iteration the partial path with the lowest lower bound is popped from the queue and expanded. The algorithm stops once a full conformation has been enumerated and guarantees that the conformation is the optimal. \n The A* score  f  in protein design consists of two parts,  f=g+h .  g  is the exact energy of the rotamers that have already been assigned in the partial conformation.  h  is a lower bound on the energy of the rotamers that have not yet been assigned. Each is designed as follows, where  d  is the index of the last assigned residue in the partial conformation. \n g \n = \n \u2211 \n i \n = \n 1 \n d \n ( \n E \n ( \n r \n i \n ) \n + \n \u2211 \n j \n = \n i \n + \n 1 \n d \n E \n ( \n r \n i \n , \n r \n j \n ) \n ) \n {\\displaystyle g=\\sum _{i=1}^{d}(E(r_{i})+\\sum _{j=i+1}^{d}E(r_{i},r_{j}))} \n h \n = \n \u2211 \n j \n = \n d \n + \n 1 \n n \n [ \n min \n r \n j \n ( \n E \n ( \n r \n j \n ) \n + \n \u2211 \n i \n = \n 1 \n d \n E \n ( \n r \n i \n , \n r \n j \n ) \n + \n \u2211 \n k \n = \n j \n + \n 1 \n n \n min \n r \n k \n E \n ( \n r \n j \n , \n r \n k \n ) \n ) \n ] \n {\\displaystyle h=\\sum _{j=d+1}^{n}[\\min _{r_{j}}(E(r_{j})+\\sum _{i=1}^{d}E(r_{i},r_{j})+\\sum _{k=j+1}^{n}\\min _{r_{k}}E(r_{j},r_{k}))]} \n Integer linear programming [ edit ] \n Further information:  Linear programming \u00a7\u00a0Integer unknowns , and  Integer programming \n The problem of optimizing  E T  (Equation ( 1 )) can be easily formulated as an  integer linear program  (ILP). [24]  One of the most powerful formulations uses binary variables to represent the presence of a rotamer and edges in the final solution, and constraints the solution to have exactly one rotamer for each residue and one pairwise interaction for each pair of residues: \n \u00a0 \n min \n \u2211 \n i \n \u2211 \n r \n i \n E \n i \n ( \n r \n i \n ) \n q \n i \n ( \n r \n i \n ) \n + \n \u2211 \n j \n \u2260 \n i \n \u2211 \n r \n j \n E \n i \n j \n ( \n r \n i \n , \n r \n j \n ) \n q \n i \n j \n ( \n r \n i \n , \n r \n j \n ) \n {\\displaystyle \\ \\min \\sum _{i}\\sum _{r_{i}}E_{i}(r_{i})q_{i}(r_{i})+\\sum _{j\\neq i}\\sum _{r_{j}}E_{ij}(r_{i},r_{j})q_{ij}(r_{i},r_{j})\\,} \n s.t. \n \u2211 \n r \n i \n q \n i \n ( \n r \n i \n ) \n = \n 1 \n , \n \u00a0 \n \u2200 \n i \n {\\displaystyle \\sum _{r_{i}}q_{i}(r_{i})=1,\\ \\forall i} \n \u2211 \n r \n j \n q \n i \n j \n ( \n r \n i \n , \n r \n j \n ) \n = \n q \n i \n ( \n r \n i \n ) \n , \n \u2200 \n i \n , \n r \n i \n , \n j \n {\\displaystyle \\sum _{r_{j}}q_{ij}(r_{i},r_{j})=q_{i}(r_{i}),\\forall i,r_{i},j} \n q \n i \n , \n q \n i \n j \n \u2208 \n { \n 0 \n , \n 1 \n } \n {\\displaystyle q_{i},q_{ij}\\in \\{0,1\\}} \n ILP solvers, such as  CPLEX , can compute the exact optimal solution for large instances of protein design problems. These solvers use a  linear programming relaxation  of the problem, where  q i  and  q ij  are allowed to take continuous values, in combination with a  branch and cut  algorithm to search only a small portion of the conformation space for the optimal solution. ILP solvers have been shown to solve many instances of the side-chain placement problem. [24] \n Message-passing based approximations to the linear programming dual [ edit ] \n ILP solvers depend on linear programming (LP) algorithms, such as the  Simplex  or  barrier -based methods to perform the LP relaxation at each branch. These LP algorithms were developed as general-purpose optimization methods and are not optimized for the protein design problem (Equation ( 1 )). In consequence, the LP relaxation becomes the bottleneck of ILP solvers when the problem size is large. [25]  Recently, several alternatives based on  message-passing algorithms  have been designed specifically for the optimization of the LP relaxation of the protein design problem. These algorithms can approximate both the  dual  or the  primal  instances of the integer programming, but in order to maintain guarantees on optimality, they are most useful when used to approximate the dual of the protein design problem, because approximating the dual guarantees that no solutions are missed. Message-passing based approximations include the  tree reweighted max-product message passing  algorithm, [26] [27]  and the  message passing linear programming  algorithm. [28] \n Optimization algorithms without guarantees [ edit ] \n Monte Carlo and simulated annealing [ edit ] \n Monte Carlo is one of the most widely used algorithms for protein design. In its simplest form, a Monte Carlo algorithm selects a residue at random, and in that residue a randomly chosen rotamer (of any amino acid) is evaluated. [20]  The new energy of the protein,  E new  is compared against the old energy  E old  and the new rotamer is  accepted  with a probability of: \n p \n = \n e \n \u2212 \n \u03b2 \n ( \n E \n new \n \u2212 \n E \n old \n ) \n ) \n , \n {\\displaystyle p=e^{-\\beta (E_{\\text{new}}-E_{\\text{old}}))},} \n where  \u03b2  is the  Boltzmann constant  and the temperature  T  can be chosen such that in the initial rounds it is high and it is slowly  annealed  to overcome local minima. [11] \n FASTER [ edit ] \n The FASTER algorithm uses a combination of deterministic and stochastic criteria to optimize amino acid sequences. FASTER first uses DEE to eliminate rotamers that are not part of the optimal solution. Then, a series of iterative steps optimize the rotamer assignment. [29] [30] \n Belief propagation [ edit ] \n In  belief propagation  for protein design, the algorithm exchanges messages that describe the  belief  that each residue has about the probability of each rotamer in neighboring residues. The algorithm updates messages on every iteration and iterates until convergence or until a fixed number of iterations. Convergence is not guaranteed in protein design. The message  m i\u2192 j (r j  that a residue  i  sends to every rotamer  (r j  at neighboring residue  j  is defined as: \n m \n i \n \u2192 \n j \n ( \n r \n j \n ) \n = \n max \n r \n i \n ( \n e \n \u2212 \n E \n i \n ( \n r \n i \n ) \n \u2212 \n E \n i \n j \n ( \n r \n i \n , \n r \n j \n ) \n T \n ) \n \u220f \n k \n \u2208 \n N \n ( \n i \n ) \n \u2216 \n j \n m \n k \n \u2192 \n i \n ( \n r \n i \n ) \n {\\displaystyle m_{i\\to j}(r_{j})=\\max _{r_{i}}{\\Big (}e^{\\frac {-E_{i}(r_{i})-E_{ij}(r_{i},r_{j})}{T}}{\\Big )}\\prod _{k\\in N(i)\\backslash j}m_{k\\to i(r_{i})}} \n Both max-product and sum-product belief propagation have been used to optimize protein design. \n Applications and examples of designed proteins [ edit ] \n Enzyme design [ edit ] \n The design of new  enzymes  is a use of protein design with huge bioengineering and biomedical applications. In general, designing a protein structure can be different from designing an enzyme, because the design of enzymes must consider many states involved in the  catalytic mechanism . However protein design is a prerequisite of  de novo  enzyme design because, at the very least, the design of catalysts requires a scaffold in which the catalytic mechanism can be inserted. [31] \n Great progress in  de novo  enzyme design, and redesign, was made in the first decade of the 21st century. In three major studies, David Baker and coworkers  de novo  designed enzymes for the retro- aldol reaction , [32]  a Kemp-elimination reaction, [33]  and for the  Diels-Alder reaction . [34]  Furthermore, Stephen Mayo and coworkers developed an iterative method to design the most efficient known enzyme for the Kemp-elimination reaction. [35]  Also, in the laboratory of  Bruce Donald , computational protein design was used to switch the specificity of one of the  protein domains  of the  nonribosomal peptide synthetase  that produces  Gramicidin S , from its natural substrate  phenylalanine  to other noncognate substrates including charged amino acids; the redesigned enzymes had activities close to those of the wild-type. [36] \n Design for affinity [ edit ] \n Protein\u2013protein interactions  are involved in most biotic processes. Many of the hardest-to-treat diseases, such as  Alzheimer 's, many forms of  cancer  (e.g.,  TP53 ), and human immunodeficiency virus ( HIV ) infection involve protein\u2013protein interactions. Thus, to treat such diseases, it is desirable to design protein or protein-like therapeutics that bind one of the partners of the interaction and, thus, disrupt the disease-causing interaction. This requires designing protein-therapeutics for  affinity  toward its partner. \n Protein\u2013protein interactions can be designed using protein design algorithms because the principles that rule protein stability also rule protein\u2013protein binding. Protein\u2013protein interaction design, however, presents challenges not commonly present in protein design. One of the most important challenges is that, in general, the interfaces between proteins are more polar than protein cores, and binding involves a tradeoff between desolvation and hydrogen bond formation. [37]  To overcome this challenge, Bruce Tidor and coworkers developed a method to improve the affinity of antibodies by focusing on electrostatic contributions. They found that, for the antibodies designed in the study, reducing the desolvation costs of the residues in the interface increased the affinity of the binding pair. [37] [38] [39] \n Scoring binding predictions [ edit ] \n Protein design energy functions must be adapted to score binding predictions because binding involves a trade-off between the lowest- energy  conformations of the free proteins ( E P  and  E L ) and the lowest-energy conformation of the bound complex ( E PL ): \n \u0394 \n G \n = \n E \n P \n L \n \u2212 \n E \n P \n \u2212 \n E \n L \n {\\displaystyle \\Delta _{G}=E_{PL}-E_{P}-E_{L}} \n . \n The K* algorithm approximates the binding constant of the algorithm by including conformational entropy into the free energy calculation. The K* algorithm considers only the lowest-energy conformations of the free and bound complexes (denoted by the sets  P ,  L , and  PL ) to approximate the partition functions of each complex: [13] \n K \n \u2217 \n = \n \u2211 \n x \n \u2208 \n P \n L \n e \n \u2212 \n E \n ( \n x \n ) \n / \n R \n T \n \u2211 \n x \n \u2208 \n P \n e \n \u2212 \n E \n ( \n x \n ) \n / \n R \n T \n \u2211 \n x \n \u2208 \n L \n e \n \u2212 \n E \n ( \n x \n ) \n / \n R \n T \n {\\displaystyle K^{*}={\\frac {\\sum \\limits _{x\\in PL}e^{-E(x)/RT}}{\\sum \\limits _{x\\in P}e^{-E(x)/RT}\\sum \\limits _{x\\in L}e^{-E(x)/RT}}}} \n Design for specificity [ edit ] \n The design of protein\u2013protein interactions must be highly specific because proteins can interact with a large number of proteins; successful design requires selective binders. Thus, protein design algorithms must be able to distinguish between on-target (or  positive design ) and off-target binding (or  negative design ). [1] [37]  One of the most prominent examples of design for specificity is the design of specific  bZIP -binding peptides by Amy Keating and coworkers for 19 out of the 20 bZIP families; 8 of these peptides were specific for their intended partner over competing peptides. [37] [40] [41]  Further, positive and negative design was also used by Anderson and coworkers to predict mutations in the active site of a drug target that conferred resistance to a new drug; positive design was used to maintain wild-type activity, while negative design was used to disrupt binding of the drug. [42]  Recent computational redesign by Costas Maranas and coworkers was also capable of experimentally switching the  cofactor  specificity of  Candida boidinii  xylose reductase from  NADPH  to  NADH . [43] \n Protein resurfacing [ edit ] \n Protein resurfacing consists of designing a protein's surface while preserving the overall fold, core, and boundary regions of the protein intact. Protein resurfacing is especially useful to alter the binding of a protein to other proteins. One of the most important applications of protein resurfacing was the design of the RSC3 probe to select broadly neutralizing HIV antibodies at the NIH Vaccine Research Center. First, residues outside of the binding interface between the gp120 HIV envelope protein and the formerly discovered b12-antibody were selected to be designed. Then, the sequence spaced was selected based on evolutionary information, solubility, similarity with the wild-type, and other considerations. Then the RosettaDesign software was used to find optimal sequences in the selected sequence space. RSC3 was later used to discover the broadly neutralizing antibody VRC01 in the serum of a long-term HIV-infected non-progressor individual. [44] \n Design of globular proteins [ edit ] \n Globular proteins  are proteins that contain a hydrophobic core and a hydrophilic surface. Globular proteins often assume a stable structure, unlike  fibrous proteins , which have multiple conformations. The three-dimensional structure of globular proteins is typically easier to determine through  X-ray crystallography  and  nuclear magnetic resonance  than both fibrous proteins and  membrane proteins , which makes globular proteins more attractive for protein design than the other types of proteins. Most successful protein designs have involved globular proteins. Both  RSD-1 , and  Top7  were  de novo  designs of globular proteins. Five more protein structures were designed, synthesized, and verified in 2012 by the Baker group. These new proteins serve no biotic function, but the structures are intended to act as building-blocks that can be expanded to incorporate functional active sites. The structures were found computationally by using new heuristics based on analyzing the connecting loops between parts of the sequence that specify secondary structures. [45] \n Design of transmembrane proteins [ edit ] \n Membrane proteins are inherently hard to design, in large part because it is hard to validate the designs experimentally for several reasons. Membrane proteins are hard to purify. Their structure is hard to characterize because they adopt their native conformation only in the presence of a membrane. Crystallization is inherently hard, and NMR studies of membrane proteins can fail because of their size. \n Design of fibrous proteins [ edit ] \n Fibrous proteins , such as  elastin  or  collagen , typically have no one structure. However, such proteins likely lack random folds, and instead have folds defined within an ensemble of structures. This ensemble defines their behavior. Thus, in theory it is possible to rationally design fibrous proteins by selecting a sequence that will populate a specific ensemble. \n Other applications [ edit ] \n One of the most desirable uses for protein design is for  biosensors , proteins that will sense the presence of specific compounds. Some attempts in the design of biosensors include sensors for unnatural molecules including  TNT . [46]  More recently, Kuhlman and coworkers designed a biosensor of the  PAK1 . [47] \n See also [ edit ] \n Molecular design software \n Protein engineering \n Protein structure prediction software \n Comparison of software for molecular mechanics modeling \n References [ edit ] \n ^  a   b   c   d   e   f   Richardson, JS; Richardson, DC (July 1989). \"The de novo design of protein structures\".  Trends in Biochemical Sciences .  14  (7): 304\u20139.  doi : 10.1016/0968-0004(89)90070-4 .  PMID \u00a0 2672455 . \u00a0 \n ^  a   b   c   Dahiyat, BI; Mayo, SL (October 3, 1997). \"De novo protein design: fully automated sequence selection\".  Science .  278  (5335): 82\u20137.  doi : 10.1126/science.278.5335.82 .  PMID \u00a0 9311930 . \u00a0 \n ^  a   b   Gordon, DB; Marshall, SA; Mayo, SL (August 1999). \"Energy functions for protein design\".  Current Opinion in Structural Biology .  9  (4): 509\u201313.  doi : 10.1016/s0959-440x(99)80072-4 .  PMID \u00a0 10449371 . \u00a0 \n ^  a   b   Harbury, PB; Plecs, JJ; Tidor, B; Alber, T; Kim, PS (November 20, 1998). \"High-resolution protein design with backbone freedom\".  Science .  282  (5393): 1462\u20137.  doi : 10.1126/science.282.5393.1462 .  PMID \u00a0 9822371 . \u00a0 \n ^  a   b   c   Kuhlman, B; Dantas, G; Ireton, GC; Varani, G; Stoddard, BL; Baker, D (November 21, 2003). \"Design of a novel globular protein fold with atomic-level accuracy\".  Science .  302  (5649): 1364\u20138.  Bibcode : 2003Sci...302.1364K .  doi : 10.1126/science.1089427 .  PMID \u00a0 14631033 . \u00a0 \n ^   Sterner, R; Merkl, R; Raushel, FM (May 2008). \"Computational design of enzymes\".  Chemistry & Biology .  15  (5): 421\u20133.  doi : 10.1016/j.chembiol.2008.04.007 .  PMID \u00a0 18482694 . \u00a0 \n ^   Wu, X; Yang, ZY; Li, Y; Hogerkorp, CM; Schief, WR; Seaman, MS; Zhou, T; Schmidt, SD; Wu, L; Xu, L; Longo, NS; McKee, K; O'Dell, S; Louder, MK; Wycuff, DL; Feng, Y; Nason, M; Doria-Rose, N; Connors, M; Kwong, PD; Roederer, M; Wyatt, RT; Nabel, GJ; Mascola, JR (August 13, 2010).  \"Rational design of envelope identifies broadly neutralizing human monoclonal antibodies to HIV-1\" .  Science .  329  (5993): 856\u201361.  Bibcode : 2010Sci...329..856W .  doi : 10.1126/science.1187659 .  PMC \u00a0 2965066 \u202f .  PMID \u00a0 20616233 . \u00a0 CS1 maint: Multiple names: authors list ( link ) \n ^   H\u00f6cker, B (November 8, 2012). \"Structural biology: A toolbox for protein design\".  Nature .  491  (7423): 204\u20135.  Bibcode : 2012Natur.491..204H .  doi : 10.1038/491204a .  PMID \u00a0 23135466 . \u00a0 \n ^  a   b   c   Lovell, SC; Word, JM; Richardson, JS; Richardson, DC (August 15, 2000). \"The penultimate rotamer library\".  Proteins .  40  (3): 389\u2013408.  doi : 10.1002/1097-0134(20000815)40:3<389::aid-prot50>3.3.co;2-u .  PMID \u00a0 10861930 . \u00a0 \n ^   Shapovalov, MV; Dunbrack RL, Jr (June 8, 2011).  \"A smoothed backbone-dependent rotamer library for proteins derived from adaptive kernel density estimates and regressions\" .  Structure .  19  (6): 844\u201358.  doi : 10.1016/j.str.2011.03.019 .  PMC \u00a0 3118414 \u202f .  PMID \u00a0 21645855 . \u00a0 \n ^  a   b   Samish, I; MacDermaid, CM; Perez-Aguilar, JM; Saven, JG (2011). \"Theoretical and computational protein design\".  Annual Review of Physical Chemistry .  62 : 129\u201349.  Bibcode : 2011ARPC...62..129S .  doi : 10.1146/annurev-physchem-032210-103509 .  PMID \u00a0 21128762 . \u00a0 \n ^  a   b   Mandell, DJ; Kortemme, T (August 2009). \"Backbone flexibility in computational protein design\".  Current Opinion in Biotechnology .  20  (4): 420\u20138.  doi : 10.1016/j.copbio.2009.07.006 .  PMID \u00a0 19709874 . \u00a0 \n ^  a   b   c   d   e   f   Donald, Bruce R.  (2011).  Algorithms in Structural Molecular Biology . Cambridge, MA: MIT Press. \u00a0 \n ^  a   b   Boas, F. E. & Harbury, P. B. (2007). \"Potential energy functions for protein design\".  Current Opinion in Structural Biology .  17  (2): 199\u2013204.  doi : 10.1016/j.sbi.2007.03.006 .  PMID \u00a0 17387014 . \u00a0 \n ^  a   b   c   d   Boas, FE; Harbury, PB (April 2007). \"Potential energy functions for protein design\".  Current Opinion in Structural Biology .  17  (2): 199\u2013204.  doi : 10.1016/j.sbi.2007.03.006 .  PMID \u00a0 17387014 . \u00a0 \n ^   Vizcarra, CL; Mayo, SL (December 2005). \"Electrostatics in computational protein design\".  Current Opinion in Chemical Biology .  9  (6): 622\u20136.  doi : 10.1016/j.cbpa.2005.10.014 .  PMID \u00a0 16257567 . \u00a0 \n ^   Zhou, T; Georgiev, I; Wu, X; Yang, ZY; Dai, K; Finzi, A; Kwon, YD; Scheid, JF; Shi, W; Xu, L; Yang, Y; Zhu, J; Nussenzweig, MC; Sodroski, J; Shapiro, L; Nabel, GJ; Mascola, JR; Kwong, PD (August 13, 2010).  \"Structural basis for broad and potent neutralization of HIV-1 by antibody VRC01\" .  Science .  329  (5993): 811\u20137.  Bibcode : 2010Sci...329..811Z .  doi : 10.1126/science.1192819 .  PMC \u00a0 2981354 \u202f .  PMID \u00a0 20616231 . \u00a0 CS1 maint: Multiple names: authors list ( link ) \n ^   Mendes, J; Guerois, R; Serrano, L (August 2002). \"Energy estimation in protein design\".  Current Opinion in Structural Biology .  12  (4): 441\u20136.  doi : 10.1016/s0959-440x(02)00345-7 .  PMID \u00a0 12163065 . \u00a0 \n ^   Pierce, NA; Winfree, E (October 2002). \"Protein design is NP-hard\".  Protein engineering .  15  (10): 779\u201382.  doi : 10.1093/protein/15.10.779 .  PMID \u00a0 12468711 . \u00a0 \n ^  a   b   Voigt, CA; Gordon, DB; Mayo, SL (June 9, 2000). \"Trading accuracy for speed: A quantitative comparison of search algorithms in protein sequence design\".  Journal of Molecular Biology .  299  (3): 789\u2013803.  doi : 10.1006/jmbi.2000.3758 .  PMID \u00a0 10835284 . \u00a0 \n ^   Hong, EJ; Lippow, SM; Tidor, B; Lozano-P\u00e9rez, T (September 2009).  \"Rotamer optimization for protein design through MAP estimation and problem-size reduction\" .  Journal of computational chemistry .  30  (12): 1923\u201345.  doi : 10.1002/jcc.21188 .  PMC \u00a0 3495010 \u202f .  PMID \u00a0 19123203 . \u00a0 \n ^   Gordon, DB; Mayo, SL (September 15, 1999). \"Branch-and-terminate: a combinatorial optimization algorithm for protein design\".  Structure .  7  (9): 1089\u201398.  doi : 10.1016/s0969-2126(99)80176-2 .  PMID \u00a0 10508778 . \u00a0 \n ^  a   b   Leach, AR; Lemon, AP (November 1, 1998). \"Exploring the conformational space of protein side chains using dead-end elimination and the A* algorithm\".  Proteins .  33  (2): 227\u201339.  doi : 10.1002/(sici)1097-0134(19981101)33:2<227::aid-prot7>3.0.co;2-f .  PMID \u00a0 9779790 . \u00a0 \n ^  a   b   Kingsford, CL; Chazelle, B; Singh, M (April 1, 2005). \"Solving and analyzing side-chain positioning problems using linear and integer programming\".  Bioinformatics .  21  (7): 1028\u201336.  doi : 10.1093/bioinformatics/bti144 .  PMID \u00a0 15546935 . \u00a0 \n ^   Yanover, Chen; Talya Meltzer; Yair Weiss (2006). \"Linear Programming Relaxations and Belief Propagation \u2013 An Empirical Study\".  Journal of Machine Learning Research .  7 : 1887\u20131907. \u00a0 \n ^   Wainwright, Martin J; Tommi S. Jaakkola; Alan S. Willsky (2005). \"MAP estimation via agreement on trees: message-passing and linear programming\".  IEEE Transactions on Information Theory .  51 : 3697\u20133717.  doi : 10.1109/tit.2005.856938 . \u00a0 \n ^   Kolmogorov, Vladimir (October 28, 2006). \"Convergent tree-reweighted message passing for energy minimization\".  Pattern Analysis and Machine Intelligence, IEEE Transactions : 1568\u20131583. \u00a0 \n ^   Globerson, Amir; Tommi S. Jaakkola (2007). \"Fixing max-product: Convergent message passing algorithms for MAP LP-relaxations\".  Advances in Neural Information Processing Systems . \u00a0 \n ^   Allen, BD; Mayo, SL (July 30, 2006). \"Dramatic performance enhancements for the FASTER optimization algorithm\".  Journal of computational chemistry .  27  (10): 1071\u20135.  doi : 10.1002/jcc.20420 .  PMID \u00a0 16685715 . \u00a0 \n ^   Desmet, J; Spriet, J; Lasters, I (July 1, 2002). \"Fast and accurate side-chain topology and energy refinement (FASTER) as a new method for protein structure optimization\".  Proteins .  48  (1): 31\u201343.  doi : 10.1002/prot.10131 .  PMID \u00a0 12012335 . \u00a0 \n ^   Baker, D (October 2010).  \"An exciting but challenging road ahead for computational enzyme design\" .  Protein Science .  19  (10): 1817\u20139.  doi : 10.1002/pro.481 .  PMC \u00a0 2998717 \u202f .  PMID \u00a0 20717908 . \u00a0 \n ^   Jiang, Lin; Althoff, Eric A.; Clemente, Fernando R.; Doyle, Lindsey; Rothlisberger, Daniela; Zanghellini, Alexandre; Gallaher, Jasmine L.; Betker, Jamie L.; Tanaka, Fujie (2008).  \"De Novo Computational Design of Retro-Aldol Enzymes\" .  Science .  319  (5868): 1387\u201391.  Bibcode : 2008Sci...319.1387J .  doi : 10.1126/science.1152692 .  PMC \u00a0 3431203 \u202f .  PMID \u00a0 18323453 . \u00a0 \n ^   R\u00f6thlisberger, Daniela; Khersonsky, Olga; Wollacott, Andrew M.; Jiang, Lin; Dechancie, Jason; Betker, Jamie; Gallaher, Jasmine L.; Althoff, Eric A.; Zanghellini, Alexandre (2008). \"Kemp elimination catalysts by computational enzyme design\".  Nature .  453  (7192): 190\u20135.  Bibcode : 2008Natur.453..190R .  doi : 10.1038/nature06879 .  PMID \u00a0 18354394 . \u00a0 \n ^   Siegel, JB; Zanghellini, A; Lovick, HM; Kiss, G; Lambert, AR; St Clair, JL; Gallaher, JL; Hilvert, D; Gelb, MH; Stoddard, BL; Houk, KN; Michael, FE; Baker, D (July 16, 2010).  \"Computational design of an enzyme catalyst for a stereoselective bimolecular Diels-Alder reaction\" .  Science .  329  (5989): 309\u201313.  Bibcode : 2010Sci...329..309S .  doi : 10.1126/science.1190239 .  PMC \u00a0 3241958 \u202f .  PMID \u00a0 20647463 . \u00a0 CS1 maint: Multiple names: authors list ( link ) \n ^   Privett, HK; Kiss, G; Lee, TM; Blomberg, R; Chica, RA; Thomas, LM; Hilvert, D; Houk, KN; Mayo, SL (March 6, 2012).  \"Iterative approach to computational enzyme design\" .  Proceedings of the National Academy of Sciences of the United States of America .  109  (10): 3790\u20135.  Bibcode : 2012PNAS..109.3790P .  doi : 10.1073/pnas.1118082108 .  PMC \u00a0 3309769 \u202f .  PMID \u00a0 22357762 . \u00a0 \n ^   Chen, CY; Georgiev, I; Anderson, AC; Donald, BR (March 10, 2009).  \"Computational structure-based redesign of enzyme activity\" .  Proceedings of the National Academy of Sciences of the United States of America .  106  (10): 3764\u20139.  Bibcode : 2009PNAS..106.3764C .  doi : 10.1073/pnas.0900266106 .  PMC \u00a0 2645347 \u202f .  PMID \u00a0 19228942 . \u00a0 \n ^  a   b   c   d   Karanicolas, J; Kuhlman, B (August 2009).  \"Computational design of affinity and specificity at protein\u2013protein interfaces\" .  Current Opinion in Structural Biology .  19  (4): 458\u201363.  doi : 10.1016/j.sbi.2009.07.005 .  PMC \u00a0 2882636 \u202f .  PMID \u00a0 19646858 . \u00a0 \n ^   Shoichet, BK (October 2007). \"No free energy lunch\".  Nature Biotechnology .  25  (10): 1109\u201310.  doi : 10.1038/nbt1007-1109 .  PMID \u00a0 17921992 . \u00a0 \n ^   Lippow, SM; Wittrup, KD; Tidor, B (October 2007).  \"Computational design of antibody-affinity improvement beyond in vivo maturation\" .  Nature Biotechnology .  25  (10): 1171\u20136.  doi : 10.1038/nbt1336 .  PMC \u00a0 2803018 \u202f .  PMID \u00a0 17891135 . \u00a0 \n ^   Schreiber, G; Keating, AE (February 2011).  \"Protein binding specificity versus promiscuity\" .  Current Opinion in Structural Biology .  21  (1): 50\u201361.  doi : 10.1016/j.sbi.2010.10.002 .  PMC \u00a0 3053118 \u202f .  PMID \u00a0 21071205 . \u00a0 \n ^   Grigoryan, G; Reinke, AW; Keating, AE (April 16, 2009).  \"Design of protein-interaction specificity gives selective bZIP-binding peptides\" .  Nature .  458  (7240): 859\u201364.  Bibcode : 2009Natur.458..859G .  doi : 10.1038/nature07885 .  PMC \u00a0 2748673 \u202f .  PMID \u00a0 19370028 . \u00a0 \n ^   Frey, KM; Georgiev, I; Donald, BR; Anderson, AC (August 3, 2010).  \"Predicting resistance mutations using protein design algorithms\" .  Proceedings of the National Academy of Sciences of the United States of America .  107  (31): 13707\u201312.  Bibcode : 2010PNAS..10713707F .  doi : 10.1073/pnas.1002162107 .  PMC \u00a0 2922245 \u202f .  PMID \u00a0 20643959 . \u00a0 \n ^   Khoury, GA; Fazelinia, H; Chin, JW; Pantazes, RJ; Cirino, PC; Maranas, CD (October 2009).  \"Computational design of Candida boidinii xylose reductase for altered cofactor specificity\" .  Protein Science .  18  (10): 2125\u201338.  doi : 10.1002/pro.227 .  PMC \u00a0 2786976 \u202f .  PMID \u00a0 19693930 . \u00a0 \n ^   Burton, DR; Weiss, RA (August 13, 2010). \"AIDS/HIV. A boost for HIV vaccine design\".  Science .  329  (5993): 770\u20133.  Bibcode : 2010Sci...329..770B .  doi : 10.1126/science.1194693 .  PMID \u00a0 20705840 . \u00a0 \n ^   Jessica Marshall (November 7, 2012).  \"Proteins made to order\" .  Nature News . Retrieved  November 17,  2012 . \u00a0 \n ^   Looger, Loren L.; Dwyer, Mary A.; Smith, James J. & Hellinga, Homme W. (2003). \"Computational design of receptor and sensor proteins with novel functions\".  Nature .  423  (6936): 185\u2013190.  Bibcode : 2003Natur.423..185L .  doi : 10.1038/nature01556 .  PMID \u00a0 12736688 . \u00a0 \n ^   Jha, RK; Wu, YI; Zawistowski, JS; MacNevin, C; Hahn, KM; Kuhlman, B (October 21, 2011).  \"Redesign of the PAK1 autoinhibitory domain for enhanced stability and affinity in biosensor applications\" .  Journal of Molecular Biology .  413  (2): 513\u201322.  doi : 10.1016/j.jmb.2011.08.022 .  PMC \u00a0 3202338 \u202f .  PMID \u00a0 21888918 . \u00a0 \n Further reading [ edit ] \n Donald, Bruce R.  (2011).  Algorithms in Structural Molecular Biology . Cambridge, MA: MIT Press. \u00a0 \n Sander, Chris; Vriend, Gerrit; Bazan, Fernando; Horovitz, Amnon; Nakamura, Haruki; Ribas, Luis; Finkelstein, Alexei V.; Lockhart, Andrew; Merkl, Rainer; et al. (1992). \"Protein Design on computers. Five new proteins: Shpilka, Grendel, Fingerclasp, Leather and Aida\".  Proteins: Structure, Function, and Bioinformatics .  12  (2): 105\u2013110.  doi : 10.1002/prot.340120203 .  PMID \u00a0 1603799 . \u00a0 \n Jin, Wenzhen; Kambara, Ohki; Sasakawa, Hiroaki; Tamura, Atsuo & Takada, Shoji (2003). \"De Novo Design of Foldable Proteins with Smooth Folding Funnel: Automated Negative Design and Experimental Verification\".  Structure .  11  (5): 581\u2013590.  doi : 10.1016/S0969-2126(03)00075-3 .  PMID \u00a0 12737823 . \u00a0 \n Pokala, Navin & Handel, Tracy M. (2005). \"Energy Functions for Protein Design: Adjustment with Protein\u2013Protein Complex Affinities, Models for the Unfolded State, and Negative Design of Solubility and Specificity\".  Journal of Molecular Biology .  347  (1): 203\u2013227.  doi : 10.1016/j.jmb.2004.12.019 .  PMID \u00a0 15733929 . \u00a0 \n v \n t \n e \n Biomolecular structure \n Protein structure \n Primary \n Secondary \n Tertiary \n Quaternary \n Determination \n Prediction \n Design \n Thermodynamics \n Nucleic acid structure \n Primary \n Secondary \n Tertiary \n Quaternary \n Determination \n Prediction \n Design \n Thermodynamics \n See also \n Protein \n Protein domain \n Protein engineering \n Nucleic acid \n DNA \n RNA \n Nucleic acid double helix \n v \n t \n e \n Design \n Outline \n Portal \n Designer \n Disciplines \n Communication \ndesign \n Advertising \n Book design \n Corporate design \n Exhibit design \n Film title design \n Graphic design \n Motion \n Postage stamp design \n Print design \n Illustration \n Information design \n Instructional design \n News design \n Photography \n Retail design \n Signage \u00a0/  Traffic sign design \n Typography \u00a0/  Type design \n Video design \n Visual merchandising \n Environmental \ndesign \n Architecture \n Architectural lighting design \n Building design \n Passive solar \n Ecological design \n Environmental impact design \n Garden design \n Computer-aided \n Healthy community design \n Hotel design \n Interior architecture \n Interior design \n EID \n Keyline design \n Landscape architecture \n Sustainable \n Landscape design \n Spatial design \n Urban design \n Industrial \ndesign \n Automotive design \n Automotive suspension design \n CMF design \n Corrugated box design \n Electric guitar design \n Furniture design \n Sustainable \n Hardware interface design \n Motorcycle design \n Packaging and labeling \n Photographic lens design \n Product design \n Production design \n Sensory design \n Service design \n Interaction \ndesign \n Experience design \n EED \n Game design \n Level design \n Video game design \n Hardware interface design \n Icon design \n Immersive design \n Information design \n Sonic interaction design \n User experience design \n User interface design \n Web design \n Other \n applied arts \n Public art design \n Ceramic \u00a0/  glass design \n Fashion design \n Costume design \n Jewelry design \n Floral design \n Game art design \n Property design \n Scenic design \n Sound design \n Stage/set lighting design \n Textile design \n Other \ndesign \n&  engineering \n Algorithm design \n Boiler design \n Conceptual design \n Database design \n Drug design \n Electrical system design \n Experimental design \n Filter design \n Job design \n Integrated circuit design \n Circuit design \n Physical design \n Power network design \n Mechanism design \n Nuclear weapon design \n Nucleic acid design \n Organization design \n Process design \n Processor design \n Protein design \n Research design \n Social design \n Software design \n Spacecraft design \n Strategic design \n Systems design \n Approaches \n Activity-centered \n Adaptive web \n Affective \n Brainstorming \n By committee \n By contract \n C-K theory \n Closure \n Co-design \n Concept-oriented \n Configuration \n Contextual \n Continuous \n Cradle-to-cradle \n Creative problem-solving \n Creativity techniques \n Critical \n Design fiction \n Defensive \n Design\u2013bid\u2013build \n Design\u2013build \n architect-led \n Domain-driven \n Ecodesign \n Energy neutral \n Engineering design process \n Probabilistic design \n Error-tolerant \n Fault-tolerant \n Framework-oriented \n For assembly \n For behaviour change \n For manufacturability \n For Six Sigma \n For testing \n For X \n Functional \n Generative \n Geodesign \n High-level \n Integrated \n Integrated topside \n Intelligence-based \n Iterative \n KISS principle \n Low-level \n Metadesign \n Mind mapping \n Modular \n New Wave \n Object-oriented \n Open \n Parametric \n Participatory \n Platform-based \n Policy-based \n Process-centered \n Public interest \n Rational \n Regenerative \n Reliability engineering \n Research-based \n Responsibility-driven \n RWD \n Safe-life \n Sustainable \n Systemic \n SOD \n Tableless web \n Theory of constraints \n Top-down and bottom-up \n Transformation \n Transgenerational \n TRIZ \n Universal \n Design for All \n Usage-centered \n Use-centered \n User-centered \n Empathic \n User innovation \n Value-driven \n Value sensitive \n Privacy by \n Design  choice \n computing \n controls \n flow \n leadership \n management \n marker \n methods \n pattern \n research \n science \n strategy \n theory \n thinking \n Tools \n Intellectual property \n Organizations \n Awards \n Tools \n AAD \n Architectural model \n Blueprint \n Comprehensive layout \n CAD \n CAID \n Virtual home design software \n CAutoD \n Design quality indicator \n Electronic design automation \n Flowchart \n Mockup \n Product design specification \n Prototype \n Sketch \n Storyboard \n Technical drawing \n Web design program \n Website wireframe \n Intellectual \nproperty \n Community design \n Design around \n Design patent \n Geschmacksmuster \n Industrial design rights \n European Union \n Organizations \n AIGA \n Chartered Society of Designers \n Design and Industries Association \n Design Council \n International Forum Design \n The Design Society \n Design Research Society \n Awards \n European Design Award \n German Design Award \n Good Design Award (Chicago) \n Good Design Award (Japan) \n Graphex \n IF product design award \n James Dyson Award \n Prince Philip Designers Prize \n Related topics \n Aesthetics \n Agile \n Concept art \n Creative industries \n Cultural icon \n .design \n Enterprise architecture \n Futures studies \n Innovation Management \n Intelligent design \n Lean Startup \n New product development \n OODA Loop \n Philosophy of design \n Process simulation \n Slow design \n STEAM fields \n Unintelligent design \n Visualization \n Wicked problem \n Design  brief \n change \n classic \n director \n education \n elements and principles \n engineer \n firm \n history \n knowledge \n language \n life \n load \n museum \n paradigm \n rationale \n review \n specification \n studio \n technology \n Commons \n Wikibooks \n Wikinews \n Wikiquote \n Wikisource \n Wiktionary \n\t\t\t\t\t\tRetrieved from \" https://en.wikipedia.org/w/index.php?title=Protein_design&oldid=807911682 \"\t\t\t\t\t \n Categories :  Protein structure Protein engineering Hidden categories:  CS1 maint: Multiple names: authors list Use mdy dates from April 2016   \n Navigation menu \n Personal tools \n Not logged in Talk Contributions Create account Log in   \n Namespaces \n Article Talk   \n Variants \n Views \n Read Edit View history   \n More \n Search \n Navigation \n Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store   \n Interaction \n Help About Wikipedia Community portal Recent changes Contact page   \n Tools \n What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page   \n Print/export \n Create a book Download as PDF Printable version   \n Languages \n Catal\u00e0 Deutsch \u0641\u0627\u0631\u0633\u06cc Hrvatski Italiano \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438   \n Edit links   \n  This page was last edited on 30 October 2017, at 20:07. \n Text is available under the  Creative Commons Attribution-ShareAlike License ;\nadditional terms may apply.  By using this site, you agree to the  Terms of Use  and  Privacy Policy . Wikipedia\u00ae is a registered trademark of the  Wikimedia Foundation, Inc. , a non-profit organization. \n Privacy policy \n About Wikipedia \n Disclaimers \n Contact Wikipedia \n Developers \n Cookie statement \n Mobile view"}