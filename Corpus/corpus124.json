{"url": "http://www.w3.org/TR/2000/REC-ATAG10-20000203/", "content": "Authoring Tool Accessibility Guidelines 1.0 \n [ contents ] \u00a0 [ tabular checklist ] \u00a0 [ linear checklist ] \u00a0 \n Authoring Tool Accessibility Guidelines 1.0 \n W3C Recommendation 3 February 2000 \n This version: \n http://www.w3.org/TR/2000/REC-ATAG10-20000203 \n ( plain text ,  \nHTML gzip tar archive ,  HTML zip archive ,\n PostScript ,  \nPDF ) \n Latest version: \n http://www.w3.org/TR/ATAG10 \n Previous version: \n http://www.w3.org/TR/1999/PR-WAI-AUTOOLS-19991026  \n Editors: \n Jutta Treviranus -  \nATRC , University of Toronto \n Charles McCathieNevile -  W3C \n Ian Jacobs -  W3C \n Jan Richards - University of Toronto \n Copyright \n\u00a92000  W3C \u00ae  ( MIT ,  \nINRIA ,  Keio ), All Rights\nReserved. W3C  liability ,\ntrademark ,  document\nuse  and  software\nlicensing  rules apply. \n Abstract \n This specification provides guidelines for Web authoring tool developers.\nIts purpose is two-fold: to assist developers in designing authoring tools that\nproduce accessible Web content and to assist developers in creating an\naccessible authoring interface. \n Authoring tools can enable, encourage, and assist users (\"authors\") in the\ncreation of accessible Web content through prompts, alerts, checking and repair\nfunctions, help files and automated tools. It is just as important that all\npeople be able to author content as it is for all people to have access to it.\nThe tools used to create this information must therefore be accessible\nthemselves. Adoption of these guidelines will contribute to the proliferation\nof Web content that can be read by a broader range of readers and authoring\ntools that can be used by a broader range of authors. \n This document is part of a series of accessibility documents published by\nthe  W3C   Web Accessibility Initiative \n( WAI ). \n Status of this document \n This section describes the status of this document at the time of its\npublication. Other documents may supersede this document. The latest status of\nthis document series is maintained at the  W3C . \n This document has been reviewed by W3C Members and other interested parties\nand has been endorsed by the Director as a  W3C Recommendation . It is a\nstable document and may be used as reference material or cited as a normative\nreference from another document. W3C's role in making the Recommendation is to\ndraw attention to the specification and to promote its widespread deployment.\nThis enhances the functionality and interoperability of the Web. \n A  log of changes between\nsuccessive Working Drafts  is available. \n For further information about Working Group decisions, please consult the  minutes of  AUWG  Meetings . \n This document has been produced by the  \nAuthoring Tool Accessibility Guidelines Working Group ( AUWG )  as part of the  Web Accessibility Initiative ( WAI ) . The goals of the Working Group are\ndiscussed in the  AUWG\ncharter . \n Please send general comments about this document to the public mailing list:\n w3c-wai-au@w3.org  ( public archives ). \n The English version of this specification is the only normative version.\nInformation about translations of this document is available at  http://www.w3.org/WAI/AU/ATAG-TRANSLATIONS . \n The list of known errors in this document is available at  http://www.w3.org/WAI/AU/ATAG-ERRATA . Please report errors in this document to  wai-atag-editor@w3.org . \n A list of current W3C Recommendations and other technical documents\nincluding Working Drafts and Notes can be found at  http://www.w3.org/TR . \n Table of Contents \n Abstract \n Status of this\ndocument \n 1.\nIntroduction \n 1.1 How the\nGuidelines are organized \n 1.2 Checkpoint\nPriorities \n 1.3 Conformance to\nthese Guidelines \n 2. Guidelines \n 1. Support\naccessible authoring practices. \n 2. Generate\nstandard markup. \n 3. Support\nthe creation of accessible content. \n 4. Provide\nways of checking and correcting inaccessible content. \n 5.\nIntegrate accessibility solutions into the overall \"look and feel\". \n 6. Promote\naccessibility in help and documentation. \n 7. Ensure\nthat the authoring tool is accessible to authors with disabilities. \n 3. Glossary of\nTerms and Definitions \n 4.\nAcknowledgments \n 5.\nReferences \n An appendix to this document  [ATAG10-CHECKLIST]  lists all checkpoints for\nconvenient reference. \n 1.  Introduction \n In these guidelines, the term \" authoring\ntool \" refers to the wide range of software used for creating Web\ncontent, including: \n Editing tools specifically designed to produce Web content (e.g., WYSIWYG\nHTML and XML editors); \n Tools that offer the option of saving material in a Web format (e.g., word\nprocessors or desktop publishing packages); \n Tools that transform documents into Web formats (e.g., filters to transform\ndesktop publishing formats to HTML); \n Tools that produce multimedia, especially where it is intended for use on\nthe Web (e.g., video production and editing suites, SMIL authoring\npackages); \n Tools for site management or site publication, including tools that\nautomatically generate Web sites dynamically from a database, on-the-fly\nconversion tools, and Web site publishing tools; \n Tools for management of layout (e.g., CSS formatting tools). \n The goals of this document can be stated as follows: that the authoring tool\nbe accessible to authors regardless of disability, that it produce accessible\ncontent by default, and that it support and encourage the author in creating\naccessible content. Because most of the content of the Web is created using\nauthoring tools, they play a critical role in ensuring the  accessibility  of the Web. Since the Web is both\na means of receiving information and communicating information, it is important\nthat both the Web content produced and the authoring tool itself be\naccessible. \n To achieve these goals, authoring tool developers must take steps such as\nensuring conformance to accessible standards (e.g., HTML 4), checking and\ncorrecting accessibility problems, prompting, and providing appropriate\ndocumentation and help. For detailed information about what constitutes\naccessible content, these guidelines rely on the Web Content Accessibility\nGuidelines 1.0  \n[WCAG10] . Similarly, rather than directly reproducing existing\nspecifications that address general accessible software design, these\nguidelines rely on other sources. The present guidelines do address accessible\ndesign considerations specific to Web authoring tools such as providing\nflexible editing views, navigation aids and access to display properties for\nauthors. \n The principles set forth in these guidelines will benefit many people who do\nnot have a disability but who have similar needs. This includes people who work\nin noisy or quiet environments where the use of sound is not practical, people\nwho need to use their eyes for another task and are unable to view a screen,\nand people who use small mobile devices that have a small screen, no keyboard,\nand no mouse. \n A separate document, entitled \"Techniques for Authoring Tool Accessibility Guidelines 1.0\"  [ATAG10-TECHS] , provides suggestions\nand examples of how each checkpoint might be satisfied. It also includes\nreferences to other accessibility resources (such as platform-specific software\naccessibility guidelines) that provide additional information on how a tool may\nsatisfy each checkpoint. Readers are strongly encouraged to become familiar\nwith the Techniques Document as well as \"Techniques for Web Content\nAccessibility Guidelines 1.0\"  [WCAG10-TECHS]  and \"Techniques for User Agent\nAccessibility Guidelines 1.0\"  [UAAG10-TECHS] . \n Note:  The techniques in  [ATAG10-TECHS]  are informative examples\nonly. Other strategies may be used to satisfy the checkpoints in addition to,\nor in place of, those discussed in  [ATAG10-TECHS] . \n Note:  Authoring tools that conform to this document will\npropagate accessible Web content and be useful to anyone regardless of\ndisability. There will also be authoring tools that produce accessible content\nin favorable circumstances (e.g., a text editor used by a motivated author), or\nprovide an accessible interface to authors with certain disabilities, but that\ndo not conform to these guidelines. \n 1.1  How the Guidelines are organized \n The seven guidelines in this document are general principles for accessible\ndesign. Each guideline includes: \n The guideline number; \n The statement of the guideline; \n The rationale behind the guideline; \n A list of checkpoint definitions. \n The checkpoint definitions in each guideline specify requirements for\nauthoring tools to follow the guideline. Each checkpoint definition\nincludes: \n The checkpoint number; \n The statement of the checkpoint; \n The priority of the checkpoint; \n In some cases informative notes, clarifying examples, or cross references\nto related guidelines or checkpoints; \n A link to a section of \"Techniques for Authoring Tool Accessibility Guidelines 1.0\"  [ATAG10-TECHS]  where implementations\nand examples of the checkpoint are discussed. \n Each checkpoint is intended to be specific enough that it can be verified,\nwhile being sufficiently general to allow developers the freedom to use the\nmost appropriate strategies to satisfy it. \n An appendix to this specification  [ATAG10-CHECKLIST]  lists all\ncheckpoints for convenient reference. \n 1.2  Checkpoint Priorities \n Each checkpoint has a priority level. The priority level reflects the impact\nof the checkpoint in meeting the goals of this specification. These goals\nare: \n That the authoring tool be accessible; \n That the authoring tool produce accessible content by default; \n That the authoring tool encourage the creation of accessible content. \n The priority levels are assigned as follows: \n [Priority 1] \n If the checkpoint is essential to meeting the goals. \n [Priority 2] \n If the checkpoint is important to meeting the goals. \n [ Priority 3] \n If the checkpoint is beneficial to meeting the goals. \n [Relative Priority] \n Some checkpoints that refer to generating, authoring, or checking Web\ncontent have multiple priorities. The priority depends on the corresponding\npriority in the Web Content Accessibility Guidelines ( WCAG ) 1.0  [WCAG10] . \n It is priority 1 to satisfy the checkpoint for content features that are a\npriority 1 requirement in  \nWCAG  1.0. \n It is priority 2 to satisfy the checkpoint for content features that are a\npriority 2 requirement in  \nWCAG  1.0. \n It is priority 3 to satisfy the checkpoint for content features that are a\npriority 3 requirement in  \nWCAG  1.0. \n For example: \n Providing  text equivalents \nfor images and audio is a priority 1 requirement in  WCAG  1.0 since without it one or more groups\nwill find it impossible to access the information. Therefore, it is a priority\n1 requirement for the authoring tool to check for ( 4.1 ) or ask the author for ( 3.1 ) equivalent\nalternatives for these types of content. \n Grouping links in navigation bars is a priority 3 in  WCAG 1.0 . Therefore, it is only\npriority 3 for the authoring tool to check for ( 4.1 ) or ask the author for ( 3.2 ) groups of links\nthat are not grouped in the markup as a navigation mechanism. \n When a checkpoint in this document refers to the  WCAG  1.0  [WCAG10] , only the  WCAG  1.0 checkpoints that refer to content supported or\nautomatically generated by the authoring tool apply. Some of the applicable\n WCAG  1.0 checkpoints\nmay be satisfied automatically (without author participation) while others\nrequire human judgment and support from the tool in the form of prompts and\ndocumentation. Different tools may satisfy the same checkpoint differently. \n The priority level for each checkpoint has been chosen based on the\nassumption that the author is a competent, but not necessarily expert, user of\nthe authoring tool, and that the author has little or no knowledge of\naccessibility. For example, the author is not expected to have read all of the\ndocumentation, but is expected to know how to turn to the documentation for\nassistance. \n 1.3  Conformance to these Guidelines \n This section explains how to make a  valid\nclaim  that an authoring tool conforms to this document. Anyone may make a\nclaim (e.g., vendors about their own products, third parties about those\nproducts, journalists about products, etc.). Claims may be published anywhere\n(e.g., on the Web or in product documentation). \n Claimants are solely responsible for their claims and the use of the  conformance icons . If the subject of the claim\n(i.e., the software) changes after the date of the claim, the claimant is\nresponsible for updating the claim. Claimants are encouraged to conform to the\nmost recent guidelines available. \n Details about the  conformance icons  are\nprovided on the Web (refer to  [CONFORMANCE] ). \n Conformance levels \n A conformance claim must indicate what conformance level is met: \n Conformance Level \"A\" : all Priority 1 checkpoints\n(including Relative Priority checkpoints) are satisfied. \n Conformance Level \"Double-A\" : all Priority 1 and 2\ncheckpoints (including Relative Priority checkpoints) are satisfied. \n Conformance Level \"Triple-A\" : all Priority 1, 2, and 3\ncheckpoints (including Relative Priority checkpoints) are satisfied. \n Note:  Conformance levels are spelled out in text (e.g.,\n\"Double-A\" rather than \"AA\") so they may be understood when rendered as\nspeech. \n Well-formed conformance claims \n A well-formed claim must include the following information: \n The guidelines title/version: \"Authoring Tool Accessibility Guidelines 1.0\"; \n The URI of the guidelines: http://www.w3.org/TR/2000/REC-ATAG10-20000203; \n The  conformance level  satisfied: \"A\",\n\"Double-A\", or \"Triple-A\"; \n The version number and operating system of the software covered by the\nclaim. Also indicate whether any upgrades or plug-ins are required; \n The date of the claim; \n The checkpoints of the chosen conformance level considered not applicable.\nClaimants should use the checklist  [ATAG10-CHECKLIST]  for this purpose. \n This information may be provided in text or metadata markup (e.g., using the\nResource Description Framework ( RDF )  [RDF10]  and an  RDF  schema designed\nfor  WAI  conformance claims). All content in the claim must be\naccessible according to the Web Content Accessibility Guidelines 1.0  [WCAG10] . \n Here is an example of a claim expressed in HTML: \n <p>MyAuthoringTool version 2.3 on MyOperatingSystem conforms to\n<abbr title=\"the World Wide Web Consortium\">W3C</abbr>'s\n\"Authoring Tool Accessibility Guidelines 1.0\", available at http://www.w3.org/TR/2000/REC-ATAG10-20000203, level Double-A. Details of this\nclaim are provided at <a href=\"http://somewhere.com/details\">\nhttp://somewhere.com/details</a>.</p> \n Validity of a claim \n A conformance claim is valid for a given  \nconformance level  if: \n The claim is  well-formed , and \n The authoring tool satisfies all the checkpoints for that level. \n Claimants (or relevant assuring parties) are responsible for the validity of\na claim. As of the publication of this document, W3C does not act as an\nassuring party, but it may do so in the future, or establish recommendations\nfor assuring parties. \n Claimants are expected to modify or retract a claim if it may be\ndemonstrated that the claim is not valid. Please note that it is not currently\npossible to validate claims completely automatically. \n Conformance Icons \n As part of a conformance claim, people may use a conformance icon on a Web\nsite, on product packaging, in documentation, etc. Each conformance icon\n(chosen according to the appropriate  conformance\nlevel ) must link to the W3C explanation of the icon. The appearance of a\nconformance icon does not imply that W3C has reviewed or validated the claim.\nAn icon must be accompanied by a  well-formed\nclaim . \n 2.  Guidelines \n Guideline 1.  Support\naccessible authoring practices. \n If the tool automatically generates markup, many authors will be unaware of\nthe accessibility status of the final content unless they expend extra effort\nto review it and make appropriate corrections by hand. Since many authors are\nunfamiliar with accessibility, authoring tools are responsible for\nautomatically generating accessible markup, and where appropriate, for guiding\nthe author in producing accessible content. \n Many applications feature the ability to convert  \ndocuments  from other formats (e.g., Rich Text Format) into a markup\nformat specifically intended for the Web such as HTML. Markup changes may also\nbe made to facilitate efficient editing and manipulation. It is essential that\nthese processes do not introduce  inaccessible markup  or remove accessibility content,\nparticularly when a tool hides the markup changes from the author's view. \n Checkpoints: \n 1.1  Ensure that the author can\nproduce  accessible content  in\nthe  markup language(s) \nsupported by the tool.  [Priority\u00a01] \n Techniques\nfor checkpoint 1.1 \n 1.2  Ensure that the tool preserves all\n accessibility information \nduring authoring,  \ntransformations , and  \nconversions .  [Priority\u00a01] \n Techniques for\ncheckpoint 1.2 \n 1.3  Ensure that when the tool\nautomatically generates markup it conforms to the  W3C 's Web Content Accessibility Guidelines 1.0  [WCAG10] .  [Relative\u00a0Priority] \n Techniques\nfor checkpoint 1.3 \n 1.4  Ensure that templates provided\nby the tool conform to the Web Content Accessibility Guidelines 1.0  [WCAG10] .  [Relative\u00a0Priority] \n Techniques\nfor checkpoint 1.4 \n Guideline 2.  Generate\nstandard markup. \n Conformance with standards promotes interoperability and accessibility by\nmaking it easier to create specialized  user\nagents  that address the needs of users with disabilities. In\nparticular, many assistive technologies used with browsers and multimedia\nplayers are only able to provide access to Web  \ndocuments  that use valid markup. Therefore, valid markup is an\nessential aspect of authoring tool accessibility. \n Where applicable use  W3C \nRecommendations, which have been reviewed to ensure accessibility and\ninteroperability. If there are no applicable  W3C  Recommendations, use a published standard that enables\naccessibility. \n Checkpoints: \n2.1  Use the latest versions of  W3C  Recommendations when they are available and appropriate\nfor a task.  [Priority\u00a02] \n W3C specifications have undergone review specifically to ensure that they\ndo not compromise accessibility, and where possible, they enhance it. \n Techniques for checkpoint\n2.1 \n 2.2  Ensure that the tool automatically\ngenerates valid markup.  [Priority\u00a01] \n This is necessary for  user agents  to\nbe able to render Web content in a manner appropriate to a particular user's\nneeds. \n Techniques for\ncheckpoint 2.2 \n 2.3  If markup produced by the tool does\nnot conform to W3C specifications,  \ninform  the author.  [Priority\u00a03] \n Techniques for\ncheckpoint 2.3 \n Guideline 3.  Support the\ncreation of accessible content. \n Well-structured information and  equivalent\nalternative information  are cornerstones of accessible design,\nallowing information to be presented in a way most appropriate for the needs of\nthe user without constraining the creativity of the author. Yet producing\nequivalent information, such as text alternatives for images and auditory\ndescriptions of video, can be one of the most challenging aspects of Web\ndesign, and authoring tool developers should attempt to facilitate and automate\nthe mechanics of this process. For example, prompting authors to include\nequivalent alternative information such as  text\nequivalents ,  captions , and  \n auditory descriptions  at appropriate\ntimes can greatly ease the burden for authors. Where such information can be\nmechanically determined and offered as a choice for the author (e.g., the\nfunction of icons in an automatically-generated navigation bar, or expansion of\nacronyms from a dictionary), the tool can assist the author. At the same time,\nthe tool can reinforce the need for such information and the author's role in\nensuring that it is used appropriately in each instance. \n Checkpoints: \n 3.1   Prompt  the author to provide  equivalent alternative information  (e.g.,\n captions ,  auditory descriptions , and  collated text transcripts  for video).\n [Relative\u00a0Priority] \n Note:  Some checkpoints in the Web Content Accessibility\nGuidelines 1.0  \n[WCAG10]  may not apply. \n Techniques for\ncheckpoint 3.1 \n 3.2  Help the author create structured\ncontent and separate information from its presentation.  [Relative\u00a0Priority] \n Note:  Some checkpoints in Web Content\nAccessibility Guidelines 1.0  [WCAG10]  may not apply. \n Techniques\nfor checkpoint 3.2 \n 3.3  Ensure that prepackaged content\nconforms to the Web Content Accessibility Guidelines 1.0  [WCAG10] .  \n[Relative\u00a0Priority] \n For example, include  captions , an  \n auditory description , and a  collated text transcript  with prepackaged movies.  Refer also to checkpoint\n3.4 . \n Techniques for\ncheckpoint 3.3 \n3.4  Do not automatically generate  equivalent alternatives . Do not reuse\npreviously authored alternatives without author confirmation, except when the\nfunction is known with certainty.  \n[Priority\u00a01] \n For example,  prompt  the author\nfor a  text equivalent  of an image.\nIf the author has already provided a text equivalent for the same image used in\nanother document, offer to reuse that text and prompt the author for\nconfirmation. If the tool automatically generates a \"Search\" icon, it would be\nappropriate to automatically reuse the previously authored text equivalent for\nthat icon. Refer also to  \ncheckpoint 3.3  and  \ncheckpoint 3.5 . \n Note:  Human-authored equivalent alternatives may be\navailable for an object (for example, through  checkpoint 3.5  and/or  checkpoint 3.3 ). It is\nappropriate for the tool to offer these to the author as defaults. \n Techniques for\ncheckpoint 3.4 \n 3.5  Provide functionality for managing,\nediting, and reusing  alternative\nequivalents  for multimedia objects.  \n[Priority\u00a03] \n Note:  These alternative equivalents may be packaged with\nthe tool, written by the author, retrieved from the Web, etc. \n Techniques for\ncheckpoint 3.5 \n Guideline 4.  Provide ways of\nchecking and correcting inaccessible content. \n Many authoring tools allow authors to create documents with little or no\nknowledge about the underlying markup. To ensure accessibility, authoring tools\nmust be designed so that they can (where possible, automatically) identify  inaccessible markup ,\nand enable its correction even when the markup itself is hidden from the\nauthor. \n Authoring tool support for the creation of accessible Web content should\naccount for different authoring styles. Authors who can configure the tool's\naccessibility features to support their regular work patterns are more likely\nto accept accessible authoring practices (refer to  guideline 5 ). For example,\nsome authors may prefer to be alerted to  accessibility problems  when they occur, whereas\nothers may prefer to perform a check at the end of an editing session. This is\nanalogous to programming environments that allow users to decide whether to\ncheck for correct code during editing or at compilation. \n Note:  Validation of markup is an essential aspect of\nchecking the accessibility of content. \n Checkpoints: \n 4.1   Check for  and  inform  the author of  accessibility problems .\n [Relative\u00a0Priority] \n Note:  Accessibility problems should be\ndetected automatically where possible. Where this is not possible, the tool may\nneed to  prompt  the author to make decisions or to\nmanually check for certain types of problems. \n Techniques for\ncheckpoint 4.1 \n 4.2  Assist authors in correcting  accessibility\nproblems .  [Relative\u00a0Priority] \n At a minimum, provide context-sensitive help with the\naccessibility checking required by  checkpoint 4.1 \n Techniques\nfor checkpoint 4.2 \n4.3  Allow the author to preserve markup not recognized by the tool.\n [Priority\u00a02] \n Note:  The author may have included or\nimported markup that enhances accessibility but is not recognized by the\ntool. \n Techniques for\ncheckpoint 4.3 \n 4.4  Provide the author with a summary of\nthe document's accessibility status.  \n[Priority\u00a03] \n Techniques for\ncheckpoint 4.4 \n 4.5  Allow the author to transform  presentation markup  that\nis misused to convey structure into  structural markup , and to\ntransform presentation markup used for style into style sheets.  [Priority\u00a03] \n Techniques for\ncheckpoint 4.5 \n Guideline 5.  Integrate\naccessibility solutions into the overall \"look and feel\". \n When a new feature is added to an existing software tool without proper\nintegration, the result is often an obvious discontinuity. Differing color\nschemes, fonts, interaction styles, and even software stability can be factors\naffecting author acceptance of the new feature. In addition, the relative\nprominence of different ways to accomplish the same task can influence which\none the author chooses. Therefore, it is important that creating accessible\ncontent be a natural process when using an authoring tool. \n Checkpoints: \n 5.1  Ensure that functionality related to\n accessible authoring\npractices  is naturally integrated into the overall look and feel of the\ntool.  [Priority\u00a02] \n Techniques for\ncheckpoint 5.1 \n5.2  Ensure that  accessible authoring\npractices  supporting Web Content Accessibility Guidelines 1.0  [WCAG10]  Priority 1\ncheckpoints are among the most obvious and easily initiated by the author.\n [Priority\u00a02] \n Techniques for\ncheckpoint 5.2 \n Guideline 6.  Promote\naccessibility in help and documentation. \n Web authors may not be familiar with accessibility issues that arise when\ncreating Web content. Therefore, help and documentation must include\nexplanations of  accessibility\nproblems , and should demonstrate solutions with examples. \n Checkpoints: \n 6.1  Document all features that promote the\nproduction of accessible content.  \n[Priority\u00a01] \n Techniques for\ncheckpoint 6.1 \n 6.2  Ensure that creating accessible\ncontent is a naturally integrated part of the documentation, including\nexamples.  [Priority\u00a02] \n Techniques\nfor checkpoint 6.2 \n 6.3  In a dedicated section,\ndocument all features of the tool that promote the production of accessible\ncontent.  [Priority\u00a03] \nTechniques for checkpoint 6.3 \n Guideline 7.  Ensure that the\nauthoring tool is accessible to authors with disabilities. \n The authoring tool is a software program with standard user interface\nelements and as such must be designed according to relevant user interface\naccessibility guidelines. When custom interface components are created, it is\nessential that they be accessible through the standard access mechanisms for\nthe relevant platform so that assistive technologies can be used with them. \n Some additional user interface design considerations apply specifically to\n Web authoring tools.  For instance,\nauthoring tools must ensure that the author can edit (in an  editing view ) using one set of stylistic preferences\nand publish using different styles. Authors with low vision may need large text\nwhen editing but want to publish with a smaller default text size. The style\npreferences of the editing view must not affect the markup of the published\ndocument. \n Authoring tools must also ensure that the author can navigate a document\nefficiently while editing, regardless of disability. Authors who use screen\nreaders, refreshable braille displays, or screen magnifiers can make limited\nuse (if at all) of graphical artifacts that communicate the structure of the\ndocument and act as signposts when traversing it. Authors who cannot use a\nmouse (e.g., people with physical disabilities or who are blind) must use the\nslow and tiring process of moving one step at a time through the document to\naccess the desired content, unless more efficient navigation methods are\navailable. Authoring tools should therefore provide an  \nediting view  that conveys a sense of the overall structure and\nallows structured navigation. \n Note:  Documentation, help files, and installation are part\nof the software and need to be available in an  \naccessible  form. \n Checkpoints: \n 7.1  Use all applicable operating\nsystem and accessibility standards and conventions (Priority 1 for standards\nand conventions that are essential to accessibility; Priority 2 for those that\nare important to accessibility; Priority 3 for those that are beneficial to\naccessibility). \n The techniques for this checkpoint include references to checklists and\nguidelines for a number of platforms and to general guidelines for  accessible  applications. \n Techniques\nfor checkpoint 7.1 \n 7.2  Allow the author to change the\npresentation within  editing views \nwithout affecting the document markup.  \n[Priority\u00a01] \n This allows the author to edit the document according to personal\nrequirements, without changing the way the document is rendered when\npublished. \n Techniques for\ncheckpoint 7.2 \n7.3  Allow the author to edit all  properties  of each  element  and object in an accessible\nfashion.  [Priority\u00a01] \n Techniques for\ncheckpoint 7.3 \n 7.4  Ensure that the  editing view  allows navigation via the\nstructure of the document in an accessible fashion.  \n[Priority\u00a01] \n Techniques for\ncheckpoint 7.4 \n7.5  Enable editing of the structure of the document in an accessible\nfashion.  [Priority\u00a02] \n Techniques for\ncheckpoint 7.5 \n7.6  Allow the author to search within  editing views .  \n[Priority\u00a02] \n Techniques for\ncheckpoint 7.6 \n 3.  Glossary of Terms and Definitions \n Accessibility  (Also:  Accessible ) \n Within these guidelines, \"accessible Web content\" and \"accessible authoring\ntool\" mean that the content and tool can be used by people regardless of\ndisability. \n To understand the accessibility issues relevant to authoring tool design,\nconsider that many authors may be creating content in contexts very different\nfrom your own: \n They may not be able to see, hear, move, or may not be able to process some\ntypes of information easily or at all; \n They may have difficulty reading or comprehending text; \n They may not have or be able to use a keyboard or mouse; \n They may have a text-only display, or a small screen. \n Accessible design will benefit people in these different authoring\nscenarios and also many people who do not have a physical disability but who\nhave similar needs. For example, someone may be working in a noisy environment\nand thus require an alternative representation of audio information. Similarly,\nsomeone may be working in an eyes-busy environment and thus require an audio\nequivalent to information they cannot view. Users of small mobile devices (with\nsmall screens, no keyboard, and no mouse) have similar functional needs as some\nusers with disabilities. \n Accessibility\nInformation \n \"Accessibility information\" is content, including information and markup,\nthat is used to improve the accessibility of a document. Accessibility\ninformation includes, but is not limited to,  equivalent alternative information . \n Accessibility\nProblem  (Also:  \nInaccessible Markup ) \n Inaccessible Web content or authoring tools cannot be used by some people\nwith disabilities. The Web Content Accessibility Guidelines 1.0  [WCAG10]  describes how to\ncreate accessible Web content. \n Accessible Authoring\nPractice \n \"Accessible authoring practices\" improve the accessibility of Web content.\nBoth authors and tools engage in accessible authoring practices. For example,\nauthors write clearly, structure their content, and provide navigation aids.\nTools automatically generate valid markup and assist authors in providing and\nmanaging appropriate equivalent alternatives. \n Alert \n An \"alert\" draws the author's attention to an event or situation. It may\nrequire a response from the author. \n Alternative Information  (Also:\n Equivalent\nAlternative ) \n Content is \"equivalent\" to other content when both fulfill essentially the\nsame function or purpose upon presentation to the user. Equivalent alternatives\nplay an important role in accessible authoring practices since certain types of\ncontent may not be accessible to all users (e.g., video, images, audio, etc.).\nAuthors are encouraged to provide text equivalents for non-text content since\ntext may be rendered as synthesized speech for individuals who have visual or\nlearning disabilities, as braille for individuals who are blind, or as\ngraphical text for individuals who are deaf or do not have a disability. For\nmore information about equivalent alternatives, please refer to the Web Content\nAccessibility Guidelines  \nWCAG  1.0  \n[WCAG10] . \n Attribute \n This document uses the term \"attribute\" as used in SGML and XML ( [XML] ): Element types may be\ndefined as having any number of attributes. Some attributes are integral to the\naccessibility of content (e.g., the  \"alt\" ,  \"title\" ,\nand  \"longdesc\"  attributes in HTML). \n Auditory Description \n An \"auditory description\" provides information about actions, body\nlanguage, graphics, and scene changes in a video. Auditory descriptions are\ncommonly used by people who are blind or have low vision, although they may\nalso be used as a low-bandwidth equivalent on the Web. An auditory description\nis either a pre-recorded human voice or a synthesized voice (recorded or\nautomatically generated in real time). The auditory description must be\nsynchronized with the auditory track of a video presentation, usually during\nnatural pauses in the auditory track. \n Authoring Tool \n An \"authoring tool\" is any software that is used to produce content for\npublishing on the Web. Authoring tools include: \n Editing tools specifically designed to produce Web content (e.g., WYSIWYG\nHTML and XML editors); \n Tools that offer the option of saving material in a Web format (e.g., word\nprocessors or desktop publishing packages); \n Tools that transform documents into Web formats (e.g., filters to transform\ndesktop publishing formats to HTML); \n Tools that produce multimedia, especially where it is intended for use on\nthe Web (e.g., video production and editing suites, SMIL authoring\npackages); \n Tools for site management or site publication, including tools that\nautomatically generate Web sites dynamically from a database, on-the-fly\nconversion and Web site publishing tools; \n Tools for management of layout (e.g., CSS formatting tools). \n Captions \n \"Captions\" are essential  text equivalents  for movie audio. Captions consist of\na  \n text transcript  of the auditory track of\nthe movie (or other video presentation) that is synchronized with the video and\nauditory tracks. Captions are generally rendered graphically and benefit people\nwho can see but are deaf, hard-of-hearing, or cannot hear the audio. \n Conversion Tool \n A \"conversion tool\" is any application or application feature (e.g., \"Save\nas HTML\") that transforms convent in one format to another format (such as a\nmarkup language). \n Check for \n As used in  checkpoint\n4.1 , \"check for\" can refer to three types of checking: \n In some instances, an authoring tool will be able to check for\naccessibility problems automatically. For example, checking for validity ( checkpoint 2.2 ) or\ntesting whether an image is the only content of a link. \n In some cases, the tool will be able to \"suspect\" or \"guess\" that there is\na problem, but will need confirmation from the author. For example, in making\nsure that a sensible reading order is preserved a tool can present a linearized\nversion of a page to the author. \n In some cases, a tool must rely mostly on the author, and can only ask the\nauthor to check. For example, the tool may prompt the author to verify that\nequivalent alternatives for multimedia are appropriate. This is the minimal\nstandard to be satisfied. Subtle, rather than extensive, prompting is more\nlikely to be effective in encouraging the author to verify accessibility where\nit cannot be done automatically. \n Document \n A \"document\" is a series of elements that are defined by a  \n markup language  (e.g., HTML 4 or an XML\napplication). \n Editing View \n An \"editing view\" is a  view  provided by the authoring\ntool that allows editing. \n Element \n An \"element\" is any identifiable object within a document, for example, a\ncharacter, word, image, paragraph or spreadsheet cell. In  [HTML4]  and  [XML] , an element refers to a pair of tags and their\ncontent, or an \"empty\" tag - one that requires no closing tag or content. \n Inform \n To \"inform\" is to make the author aware of an event or situation through  alert ,  prompt , sound,\nflash, or other means. \n Markup Language \n Authors encode information using a \"markup language\" such as HTML  [HTML4] , SVG  [SVG] , or MathML  [MATHML] . \n Presentation\nMarkup \n \"Presentation markup\" is  markup\nlanguage  that encodes information about the desired presentation or\nlayout of the content. For example, Cascading Style Sheets ( [CSS1] ,  [CSS2] ) can be used to control fonts, colors, aural\nrendering, and graphical positioning. Presentation markup should not be used in\nplace of  structural markup  to\nconvey structure. For example, authors should mark up lists in HTML with proper\nlist markup and style them with CSS (e.g., to control spacing, bullets,\nnumbering, etc.). Authors should not use other CSS or HTML incorrectly to lay\nout content graphically so that it resembles a list. \n Prompt \n A \"prompt\" is a request for author input, either information or a decision.\nA prompt requires author response. For example, a  text equivalent  entry field prominently displayed in\nan image insertion dialog would constitute a prompt. Prompts can be used to\nencourage authors to provide information needed to make content accessible\n(such as  alternative text\nequivalents ). \n Property \n A \"property\" is a piece of information about an element, for example\nstructural information (e.g., it is item number 7 in a list, or plain text) or\npresentation information (e.g., that it is marked as bold, its font size is\n14). In XML and HTML, properties of an element include the type of the element\n(e.g.,  IMG  or  DL ), the values of its  attributes , and information associated by means of a\nstyle sheet. In a database, properties of a particular element may include\nvalues of the entry, and acceptable data types for that entry. \n Structural\nMarkup \n \"Structural markup\" is  markup\nlanguage  that encodes information about the structural role of\nelements of the content. For example, headings, sections, members of a list,\nand components of a complex diagram can be identified using structural markup.\nStructural markup should not be used incorrectly to control presentation or\nlayout. For example, authors should not use the  BLOCKQUOTE  element\nin HTML  [HTML4]  to\nachieve an indentation visual layout effect. Structural markup should be used\ncorrectly to communicate the roles of the elements of the content and  presentation markup  should be\nused separately to control the presentation and layout. \n Transcript \n A \"transcript\" is a text representation of sounds in an audio clip or an\nauditory track of a multimedia presentation. A \"collated text transcript\" for a\nvideo combines (collates) caption text with text descriptions of video\ninformation (descriptions of the actions, body language, graphics, and scene\nchanges of the visual track). Collated text transcripts are essential for\nindividuals who are deaf-blind and rely on braille for access to movies and\nother content. \n Transformation \n A \"transformation\" is a process that changes a document or object into\nanother, equivalent, object according to a discrete set of rules. This includes\n conversion tools , software that\nallows the author to change the  \nDTD  defined for the original document to another  DTD , and the ability to change the markup of lists and\nconvert them into tables. \n User Agent \n A \"user agent\" is software that retrieves and renders Web content. User\nagents include browsers, plug-ins for a particular media type, and some\nassistive technologies. \n View \n Authoring tools may render the same content in a variety of ways; each\nrendering is called a \"view.\" Some authoring tools will have several different\ntypes of view, and some allow views of several documents at once. For instance,\none view may show raw markup, a second may show a structured tree, a third may\nshow markup with rendered objects while a final view shows an example of how\nthe document may appear if it were to be rendered by a particular browser. A\ntypical way to distinguish views in a graphic environment is to place each in a\nseparate window. \n 4.  Acknowledgments \n Many thanks to the following people who have contributed through review and\ncomment: Jim Allan, Denis Anson, Kitch Barnicle, Kynn Bartlett, Harvey Bingham,\nJudy Brewer, Carl Brown, Dick Brown, Wendy Chisholm, Aaron Cohen, Rob Cumming,\nDaniel Dardailler, Mark Day, BK Delong, Martin D\u00fcrst, Kelly Ford, Jamie\nFox, Edna French, Sylvain Galineau, Al Gilman, Jon Gunderson, Eric Hansen,\nPhill Jenkins, Len Kasday, Brian Kelly, Marja-Riitta Koivunen, Sho Kuwamoto,\nJaap van Lelieveld, Susan Lesch, William Loughborough, Greg Lowney, Karen\nMcCall, Thierry Michel, Charles Oppermann, Dave Pawson, Dave Poehlman, Loretta\nReid, Bruce Roberts, Chris Ridpath, Gregory Rosmaita, Bridie Saccocio, Janina\nSajka, John Slatin, Jim Thatcher, Ir\u00e8ne Vatton, Gregg Vanderheiden,\nPawan Vora, Jason White, and Lauren Wood. \n 5.  References \n For the latest version of any  \nW3C  specification please consult the list of  W3C \nTechnical Reports  at http://www.w3.org/TR. \n [ATAG10-CHECKLIST] \n An appendix to this document lists all of the checkpoints, sorted by\npriority. The checklist is available in either  tabular\nform  (at http://www.w3.org/TR/2000/REC-ATAG10-20000203/atag10-chktable) or  list form  (at\nhttp://www.w3.org/TR/2000/REC-ATAG10-20000203/atag10-chklist). \n [ATAG10-TECHS] \n \" Techniques for Authoring Tool Accessibility Guidelines 1.0 ,\" J. Treviranus,\nJ. Richards, I. Jacobs, and C. McCathieNevile eds. The latest version is\navailable at http://www.w3.org/TR/ATAG10-TECHS. \n [CONFORMANCE] \n \" Conformance icons\nfor  ATAG  1.0 .\" Information about ATAG 1.0 conformance icons is\navailable at http://www.w3.org/WAI/ATAG10-Conformance. \n [CSS1] \n \" CSS, level 1\nRecommendation ,\" B. Bos and H. Wium Lie, eds., 17 December 1996, revised 11\nJanuary 1999. This CSS1 Recommendation is\nhttp://www.w3.org/TR/1999/REC-CSS1-19990111. The  latest version of CSS1  is available at\nhttp://www.w3.org/TR/REC-CSS1.  Note:  CSS1 has been superseded\nby CSS2. Tools should implement the CSS2 cascade. \n [CSS2] \n \" CSS, level 2\nRecommendation ,\" B. Bos, H. Wium Lie, C. Lilley, and I. Jacobs, eds., 12\nMay 1998. This CSS2 Recommendation is\nhttp://www.w3.org/TR/1998/REC-CSS2-19980512. The  latest version of CSS2  is available at\nhttp://www.w3.org/TR/REC-CSS2. \n [HTML4] \n \" HTML 4.01\nRecommendation ,\" D. Raggett, A. Le Hors, and I. Jacobs, eds., 24 December\n1999. This HTML 4.01 Recommendation is\nhttp://www.w3.org/TR/1999/REC-html401-19991224. The  latest version of HTML 4  is available at\nhttp://www.w3.org/TR/html4. \n [MATHML] \n \" Mathematical\nMarkup Language ,\" P. Ion and R. Miner, eds., 7 April 1998, revised 7 July\n1999. This MathML 1.0 Recommendation is\nhttp://www.w3.org/TR/1998/REC-MathML-19990707. The  latest version of MathML 1.0  is available\nat http://www.w3.org/TR/REC-MathML. \n [RDF10] \n \" Resource\nDescription Framework (RDF) Model and Syntax Specification ,\" O. Lassila, R.\nSwick, eds. The 22 February 1999 Recommendation is\nhttp://www.w3.org/TR/1999/REC-rdf-syntax-19990222. The  latest version of RDF 1.0  is\navailable at http://www.w3.org/TR/REC-rdf-syntax. \n [SVG] \n \" Scalable Vector Graphics (SVG) 1.0\nSpecification (Working Draft) ,\" J. Ferraiolo, ed. The latest version of the\nSVG specification is available at http://www.w3.org/TR/SVG. \n [UAAG10-TECHS] \n \" Techniques for User Agent\nAccessibility Guidelines 1.0 ,\" J. Gunderson, and I. Jacobs, eds. The  latest version of Techniques for User\nAgent Accessibility Guidelines 1.0  is available at\nhttp://www.w3.org/TR/UAAG10-TECHS/. \n [WCAG10] \n \" Web Content\nAccessibility Guidelines 1.0 ,\" W. Chisholm, G. Vanderheiden, and I. Jacobs,\neds., 5 May 1999. This Recommendation is\nhttp://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505. The latest version of the  Web Content Accessibility Guidelines\n1.0\"  is available at http://www.w3.org/TR/WCAG10/. \n [WCAG10-TECHS] \n \" Techniques for Web Content\nAccessibility Guidelines 1.0 ,\" W. Chisholm, G. Vanderheiden, and I. Jacobs,\neds. The  latest version of\nTechniques for Web Content Accessibility Guidelines 1.0  is available at\nhttp://www.w3.org/TR/WCAG10-TECHS/. \n [XML] \n \" The Extensible Markup\nLanguage (XML) 1.0 ,\" T. Bray, J. Paoli, C. M. Sperberg-McQueen, eds., 10\nFebruary 1998. This XML 1.0 Recommendation is\nhttp://www.w3.org/TR/1998/REC-xml-19980210. The  latest version of the XML specification  is\navailable at http://www.w3.org/TR/REC-xml. \n [ contents ] \u00a0 [ tabular checklist ] \u00a0 [ linear checklist ]"}