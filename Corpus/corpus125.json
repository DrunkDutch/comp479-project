{"url": "http://www.w3.org/TR/CSS1/", "content": "Cascading Style Sheets, level 1 \n REC-CSS1-20080411 \n Cascading Style Sheets, level 1 \n W3C Recommendation 17 Dec 1996, revised 11 Apr 2008 \n This version:\n             http://www.w3.org/TR/2008/REC-CSS1-20080411 \n Latest version:\n             http://www.w3.org/TR/CSS1 \n Previous version:\n             http://www.w3.org/TR/1999/REC-CSS1-19990111 \n Authors:\n             H\u00e5kon Wium Lie  (howcome@w3.org) \n             Bert Bos  (bert@w3.org)\n Note:\n This paragraph is informative.  This document is currently not\nmaintained. The CSS Working Group is developing  CSS Level\u00a02\nRevision\u00a01,  which has much more precise and Web-compatible\ndefinitions of the features described here. The CSS Working Group\nencourages authors and implementors to reference CSS\u00a02.1 (or its\n successor ) instead\nof this document and when features common to CSS1 and CSS\u00a02.1 are\ndefined differently to follow the definitions in\nCSS\u00a02.1. \n Status of this document \n This document is a W3C Recommendation. It has been reviewed by  W3C  (http://www.w3.org/) Members and\ngeneral consensus that the specification is appropriate for use has\nbeen reached. It is a stable document and may be used as reference\nmaterial or cited as a normative reference from another document. W3C\npromotes widespread deployment of this Recommendation.\n A list of current W3C Recommendations and other technical documents\ncan be found at  \nhttp://www.w3.org/TR/ .\n This document is a revised version of the document first\nreleased on 17 December 1996. Changes from the original version are\nlisted in  Appendix F . The list of known\nerrors in this specification is available at  http://www.w3.org/Style/CSS/Errata/REC-CSS1-19990111-errata \n Abstract \n This document specifies level 1 of the Cascading Style Sheet\nmechanism (CSS1). CSS1 is a simple style sheet mechanism that allows\nauthors and readers to attach style (e.g. fonts, colors and spacing)\nto HTML documents. The CSS1 language is human readable and writable,\nand expresses style in common desktop publishing terminology.\n One of the fundamental features of CSS is that style sheets\ncascade; authors can attach a preferred style sheet, while the reader\nmay have a personal style sheet to adjust for human or technological\nhandicaps. The rules for resolving conflicts between different style\nsheets are defined in this specification.\n This Recommendation results from W3C activities in the area of  Style Sheets . For\nbackground information on style sheets, see  [1] .\n Table of contents \n Abstract \n Terminology \n 1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Basic concepts \n 1.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Containment in HTML \n 1.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Grouping \n 1.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Inheritance \n 1.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Class as selector \n 1.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ID as selector \n 1.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Contextual selectors \n 1.7\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Comments \n 2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Pseudo-classes and\n  pseudo-elements \n 2.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Anchor pseudo-classes \n 2.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Typographical\n  pseudo-elements \n 2.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The 'first-line'\n  pseudo-element \n 2.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The 'first-letter'\n  pseudo-element \n 2.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Pseudo-elements in\n  selectors \n 2.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Multiple\n  pseudo-elements \n 3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The cascade \n 3.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'important' \n 3.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Cascading order \n 4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Formatting model \n 4.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Block-level elements \n 4.1.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Vertical formatting \n 4.1.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Horizontal formatting \n 4.1.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0List-item elements \n 4.1.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Floating elements \n 4.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Inline elements \n 4.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Replaced elements \n 4.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The height of lines \n 4.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0The canvas \n 4.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'BR' elements \n 5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CSS1 properties \n 5.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Notation for property\n  values \n 5.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Font properties \n 5.2.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Font matching \n 5.2.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'font-family' \n 5.2.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'font-style' \n 5.2.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'font-variant' \n 5.2.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'font-weight' \n 5.2.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'font-size' \n 5.2.7\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'font' \n 5.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Color and background\n  properties \n 5.3.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'color' \n 5.3.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'background-color' \n 5.3.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'background-image' \n 5.3.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'background-repeat' \n 5.3.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'background-attachment' \n 5.3.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'background-position' \n 5.3.7\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'background' \n 5.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Text properties \n 5.4.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'word-spacing' \n 5.4.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'letter-spacing' \n 5.4.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'text-decoration' \n 5.4.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'vertical-align' \n 5.4.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'text-transform' \n 5.4.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'text-align' \n 5.4.7\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'text-indent' \n 5.4.8\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'line-height' \n 5.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Box properties \n 5.5.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'margin-top' \n 5.5.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'margin-right' \n 5.5.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'margin-bottom' \n 5.5.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'margin-left' \n 5.5.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'margin' \n 5.5.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'padding-top' \n 5.5.7\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'padding-right' \n 5.5.8\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'padding-bottom' \n 5.5.9\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'padding-left' \n 5.5.10\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'padding' \n 5.5.11\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-top-width' \n 5.5.12\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-right-width' \n 5.5.13\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-bottom-width' \n 5.5.14\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-left-width' \n 5.5.15\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-width' \n 5.5.16\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-color' \n 5.5.17\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-style' \n 5.5.18\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-top' \n 5.5.19\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-right' \n 5.5.20\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-bottom' \n 5.5.21\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border-left' \n 5.5.22\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'border' \n 5.5.23\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'width' \n 5.5.24\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'height' \n 5.5.25\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'float' \n 5.5.26\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'clear' \n 5.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Classification\n  properties \n 5.6.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'display' \n 5.6.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'white-space' \n 5.6.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'list-style-type' \n 5.6.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'list-style-image' \n 5.6.5\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'list-style-position' \n 5.6.6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0'list-style' \n 6\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Units \n 6.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Length units \n 6.2\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Percentage units \n 6.3\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Color units \n 6.4\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0URL \n 7\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0CSS1 conformance \n 7.1\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Forward-compatible\n  parsing \n 8\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0References \n 9\n  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Acknowledgments \n Appendix A: Sample style sheet for HTML 2.0 \n Appendix B: CSS1 grammar \n Appendix C: Encoding \n Appendix D: Gamma correction \n Appendix E: The applicability and extensibility of CSS1 \n Appendix F: Changes from the 17 December 1996 version \n Terminology \n      attribute\n      HTML attribute\n      author\n      the author of an HTML document\n      block-level element\n      an element which has a line break before and after (e.g. 'H1' in\n      HTML)\n      canvas\n      the part of the UA's drawing surface onto which documents are\n      rendered\n      child element\n      a  subelement  in SGML  [5] \n      terminology\n      contextual selector\n      a selector that matches elements based on their position in the\n      document structure. A contextual selector consists of several\n      simple selectors. E.g., the contextual selector 'H1.initial B'\n      consists of two simple selectors, 'H1.initial' and 'B'.\n      CSS\n      Cascading Style Sheets\n      CSS1\n      Cascading Style Sheets, level 1. This document defines CSS1\n      which is a simple style sheet mechanism for the web.\n      CSS1 advanced features\n      features that are described in this specification but labeled as\n      not among the CSS1 core features\n      CSS1 core features\n      the part of CSS1 that is required in all CSS1 conforming UAs\n      CSS1 parser\n      a User Agent that reads CSS1 style sheets\n      declaration\n      a property (e.g. 'font-size') and a corresponding value (e.g.\n      '12pt')\n      designer\n      the designer of a style sheet\n      document\n      HTML document\n      element\n      HTML element\n      element type\n      a  generic identifier  in SGML  [5] \n      terminology\n      fictional tag sequence\n      a tool for describing the behavior of pseudo-classes and\n      pseudo-elements\n      font size\n      The size for which a font is designed. Typically, the size of a\n      font is approximately equal to the distance from the bottom of\n      the lowest letter with a descender to the top of the tallest\n      letter with an ascender and (optionally) with a diacritical\n      mark.\n      HTML\n      Hypertext Markup Language  [2] , an\n      application of SGML.\n      HTML extension\n      Markup introduced by UA vendors, most often to support certain\n      visual effects. The \"FONT\", \"CENTER\" and \"BLINK\" elements are\n      examples of HTML extensions, as is the \"BGCOLOR\" attribute. One\n      of the goals of CSS is to provide an alternative to HTML\n      extensions.\n      inline element\n      an element which does not have a line break before and after\n      (e.g. 'STRONG' in HTML)\n      intrinsic dimensions\n      the width and height as defined by the element itself, not\n      imposed by the surroundings. In this specification it is assumed\n      that all replaced elements -- and only replaced elements -- come\n      with intrinsic dimensions.\n      parent element\n      the  containing element  in SGML  [5] \n      terminology\n      pseudo-element\n      pseudo-elements are used in CSS selectors to address\n      typographical items (e.g. the first line of an element) rather\n      than structural elements.\n      pseudo-class\n      pseudo-classes are used in CSS selectors to allow information\n      external to the HTML source (e.g. the fact that an anchor has\n      been visited or not) to classify elements.\n      property\n      a stylistic parameter that can be influenced through CSS. This\n      specification defines a list of properties and their\n      corresponding values.\n      reader\n      the person for whom the document is rendered\n      replaced element\n      an element that the CSS formatter only knows the intrinsic\n      dimensions of. In HTML, 'IMG', 'INPUT', 'TEXTAREA', 'SELECT' and\n      'OBJECT' elements can be examples of replaced elements. E.g.,\n      the content of the 'IMG' element is often replaced by the image\n      that the SRC attribute points to. CSS1 does not define how the\n      intrinsic dimensions are found.\n      rule\n      a declaration (e.g. 'font-family: helvetica') and its selector\n      (e.g. 'H1')\n      selector\n      a string that identifies what elements the corresponding rule\n      applies to. A selector can either be a simple selector (e.g.\n      'H1') or a contextual selector (e.g. 'H1 B') which consists of\n      several simple selectors.\n      SGML\n      Standard Generalized Markup Language  [5] , of\n      which HTML is an application\n      simple selector\n      a selector that matches elements based on the element type\n      and/or attributes, and not he element's position in the document\n      structure. E.g., 'H1.initial' is a simple selector.\n      style sheet\n      a collection of rules\n      UA\n      User Agent, often a  web browser  or  web client \n      user\n      synonymous with  reader \n      weight\n      the priority of a rule\n In the text of this specification, single quotes ('...') denote\nHTML and CSS excerpts.\n 1 \u00a0\u00a0 Basic concepts \n Designing simple style sheets is easy. One needs only to know a\nlittle HTML and some basic desktop publishing terminology. E.g., to\nset the text color of 'H1' elements to blue, one can say:\nH1 { color: blue }\n The example above is a simple CSS rule. A rule consists of two main\nparts: selector ('H1') and declaration ('color: blue'). The\ndeclaration has two parts: property ('color') and value ('blue').\nWhile the example above tries to influence only one of the properties\nneeded for rendering an HTML document, it qualifies as a style sheet\non its own. Combined with other style sheets (one fundamental feature\nof CSS is that style sheets are combined) it will determine the final\npresentation of the document.\n The selector is the link between the HTML document and the style\nsheet, and all HTML element types are possible selectors. HTML element\ntypes are defined in the HTML specification  [2] .\n The  'color'  property is one of around 50\nproperties that determine the presentation of an HTML document. The\nlist of  properties and their possible\nvalues  is defined in this specification.\n HTML authors need to write style sheets only if they want to\nsuggest a specific style for their documents. Each User Agent (UA,\noften a \"web browser\" or \"web client\") will have a default style sheet\nthat presents documents in a reasonable -- but arguably mundane --\nmanner.  Appendix A  contains a sample style\nsheet to present HTML documents as suggested in the HTML 2.0\nspecification  [3] .\n The formal grammar for the CSS1 language is defined in  Appendix B .\n 1.1 \u00a0\u00a0 Containment in\nHTML \n In order for the style sheets to influence the presentation, the UA\nmust be aware of their existence. The HTML specification  [2]  define how to link HTML with style sheets. This\nsection is therefore informative, but not normative:\n<HTML>\n  <HEAD>\n    <TITLE>title</TITLE>\n    <LINK REL=STYLESHEET TYPE=\"text/css\" \n      HREF=\"http://style.com/cool\" TITLE=\"Cool\">\n    <STYLE TYPE=\"text/css\">\n      @import url(http://style.com/basic);\n      H1 { color: blue }\n    </STYLE>\n  </HEAD>\n  <BODY>\n    <H1>Headline is blue</H1>\n    <P STYLE=\"color: green\">While the paragraph is green.\n  </BODY>\n</HTML>\n The example shows four ways to combine style and HTML: using the\n'LINK' element to link an external style sheet, a 'STYLE' element\ninside the 'HEAD' element, an imported style sheet using the CSS\n'@import' notation, and a 'STYLE' attribute on an element inside\n'BODY'. The latter option mixes style with content and loses the\ncorresponding advantages of traditional style sheets.\n The 'LINK' element references alternative style sheets that the\nreader can select, while imported style sheets are automatically\nmerged with the rest of the style sheet.\n Traditionally, UAs have silently ignored unknown tags.  As a result , old UAs will\nignore the 'STYLE' element, but its content will be treated as part of\nthe document body, and rendered as such. During a transition phase,\n'STYLE' element content may be hidden using SGML comments:\n<STYLE TYPE=\"text/css\"><!--\n  H1 { color: green }\n--></STYLE>\n Since the 'STYLE' element is declared as \"CDATA\" in the DTD (as\ndefined in  [2] ), conforming SGML parsers will not\nconsider the above style sheet to be a comment that is to be removed.\n 1.2 \u00a0\u00a0 Grouping \n To reduce the size of style sheets, one can group selectors in\ncomma-separated lists:\nH1, H2, H3 { font-family: helvetica }\n Similarly, declarations can be grouped:\nH1 { \n  font-weight: bold; \n  font-size: 12pt;\n  line-height: 14pt; \n  font-family: helvetica; \n  font-variant: normal;\n  font-style: normal;\n}\n In addition, some properties have their own grouping syntax:\nH1 { font: bold 12pt/14pt helvetica }\n which is equivalent to the previous example.\n 1.3 \u00a0\u00a0 Inheritance \n In the first example, the color of 'H1' elements was set to blue.\nSuppose there is an 'H1' element with an emphasized element inside:\n<H1>The headline <EM>is</EM> important!</H1>\n If no color has been assigned to the 'EM' element, the emphasized\n\"is\" will inherit the color of the parent element, i.e. it will also\nappear in blue. Other style properties are likewise inherited, e.g.  'font-family'  and  'font-size' .\n To set a \"default\" style property for a document, one can set the\nproperty on an element from which all visible elements descend. In\nHTML documents, the 'BODY' element can serve this function:\nBODY { \n  color: black;\n  background: url(texture.gif) white;\n}\n This will work even if the author has omitted the 'BODY' tag (which\nis legal) since the HTML parser will infer the missing tag. The\nexample above sets the text color to be black and the background to be\nan image. The background will be white if the image is not available.\n(See section 5.3 for more on this.)\n Some style properties are not inherited from the parent element to\nthe child element. Most often it is intuitive why this is not the\ncase. E.g., the  'background'  property does\nnot inherit, but the parent element's background will shine through by\ndefault.\n Often, the value of a property is a percentage that refers to\nanother property:\nP { font-size: 10pt }\nP { line-height: 120% }  /* relative to 'font-size', i.e. 12pt */\n For each property that allows percentage values, it is defined what\nproperty it refers to. Children elements of 'P' will inherit the\ncomputed value of  'line-height'  (i.e.\n12pt), not the  percentage .\n 1.4 \u00a0\u00a0 Class as\nselector \n To increase the granularity of control over elements, a new\nattribute has been added to HTML  [2] : 'CLASS'. All\nelements inside the 'BODY' element can be classed, and the class can\nbe addressed in the style sheet:\n<HTML>\n <HEAD>\n  <TITLE>Title</TITLE>\n  <STYLE TYPE=\"text/css\">\n    H1.pastoral { color: #00FF00 }\n  </STYLE>\n </HEAD>\n <BODY>\n  <H1 CLASS=pastoral>Way too green</H1>\n </BODY>\n</HTML>\n The normal inheritance rules apply to classed elements; they\ninherit values from their parent in the document structure.\n One can address all elements of the same class by omitting the tag\nname in the selector:\n.pastoral { color: green }  /* all elements with CLASS pastoral */\n Only one class can be specified per selector. 'P.pastoral.marine'\nis therefore an invalid selector in CSS1. (Contextual selectors,\ndescribed below, can have one class per simple selector)\n CSS gives so much power to the CLASS attribute, that in many cases\nit doesn't even matter what HTML element the class is set on -- you\ncan make any element emulate almost any other. Relying on this power\nis not recommended, since it removes the level of structure that has a\nuniversal meaning (HTML elements). A structure based on CLASS is only\nuseful within a restricted domain, where the meaning of a class has\nbeen mutually agreed upon.\n 1.5 \u00a0\u00a0 ID as selector \n HTML  [2]  also introduces the 'ID' attribute\nwhich is guaranteed to have a unique value over the document. It can\ntherefore be of special importance as a style sheet selector, and can\nbe addressed with a preceding '#':\n#z98y { letter-spacing: 0.3em }\nH1#z98y { letter-spacing: 0.5em }\n<P ID=z98y>Wide text</P>\n In the above example, the first selector matches the 'P' element\ndue to the 'ID' attribute value. The second selector specifies both an\nelement type ('H1') and an ID value, and will therefore not match the\n'P' element.\n By using the ID attribute as selector, one can set style properties\non a per-element basis. While style sheets have been designed to\naugment document structure, this feature will allow authors to create\ndocuments that present well on the canvas without taking advantage of\nthe structural elements of HTML. This use of style sheets is\ndiscouraged.\n 1.6 \u00a0\u00a0 Contextual\nselectors \n Inheritance saves CSS designers typing. Instead of setting all\nstyle properties, one can create defaults and then list the\nexceptions. To give 'EM' elements within 'H1' a different color, one\nmay specify:\nH1 { color: blue }\nEM { color: red }\n When this style sheet is in effect, all emphasized sections within\nor outside 'H1' will turn red. Probably, one wanted only 'EM' elements\nwithin 'H1' to turn red and this can be specified with:\nH1 EM { color: red }\n The selector is now a search pattern on the stack of open elements,\nand this type of selector is referred to as a  contextual\nselector . Contextual selectors consist of several simple\nselectors separated by whitespace (all selectors described up to now\nhave been simple selectors). Only elements that match the last simple\nselector (in this case the 'EM' element) are addressed, and only if\nthe search pattern matches. Contextual selectors in CSS1 look for\nancestor relationships, but other relationships (e.g. parent-child)\nmay be introduced in later revisions. In the example above, the search\npattern matches if 'EM' is a descendant of 'H1', i.e. if 'EM' is\ninside an 'H1' element.\nUL LI    { font-size: small }    \nUL UL LI { font-size: x-small }\n Here, the first selector matches 'LI' elements with at least one\n'UL' ancestor. The second selector matches a subset of the first, i.e.\n'LI' elements with at least two 'UL' ancestors. The conflict is\nresolved by the second selector being more specific because of the\nlonger search pattern. See the  cascading\norder (section 3.2)  for more on this.\n Contextual selectors can look for element types, CLASS attributes,\nID attributes or combinations of these:\nDIV P           { font: small sans-serif }\n.reddish H1     { color: red }\n#x78y CODE      { background: blue }\nDIV.sidenote H1 { font-size: large }\n The first selector matches all 'P' elements that have a 'DIV' among\nthe ancestors.  The second selector\nmatches all 'H1' elements that have an ancestor of class\n'reddish'.  The third selector matches all 'CODE' elements that\nare descendants of the element with 'ID=x78y'. The fourth selector\nmatches all 'H1' elements that have a 'DIV' ancestor with class\n'sidenote'.\n Several contextual selectors can be grouped together:\nH1 B, H2 B, H1 EM, H2 EM { color: red }\n Which is equivalent to:\nH1 B { color: red }\nH2 B { color: red }\nH1 EM { color: red }\nH2 EM { color: red }\n 1.7 \u00a0\u00a0 Comments \n Textual comments in CSS style sheets are similar to those in the C\nprogramming language  [7] :\nEM { color: red }  /* red, really red!! */\n Comments cannot be nested. For a CSS1 parser, a comment is\nequivalent to whitespace.\n 2 \u00a0\u00a0\nPseudo-classes and pseudo-elements \n In CSS1, style is normally attached to an element based on its\nposition in the document structure. This simple model is sufficient\nfor a wide variety of styles, but doesn't cover some common effects.\nThe concept of pseudo-classes and pseudo-elements extend addressing in\nCSS1 to allow external information to influence the formatting\nprocess.\n Pseudo-classes and pseudo-elements can be used in CSS selectors,\nbut do not exist in the HTML source. Rather, they are \"inserted\" by\nthe UA under certain conditions to be used for addressing in style\nsheets. They are referred to as \"classes\" and \"elements\" since this is\na convenient way of describing their behavior. More specifically,\ntheir behavior is defined by a  fictional tag sequence .\n Pseudo-elements are used to address sub-parts of elements, while\npseudo-classes allow style sheets to differentiate between different\nelement types.\n 2.1 \u00a0\u00a0 Anchor\npseudo-classes \n User agents commonly display newly visited anchors differently from\nolder ones. In CSS1, this is handled through pseudo-classes on the 'A'\nelement:\nA:link { color: red }       /* unvisited link */\nA:visited { color: blue }   /* visited links */\nA:active { color: lime }    /* active links */\n All 'A' elements with an 'HREF' attribute will be put into one and\nonly one of these groups (i.e. target anchors are not affected). UAs\nmay choose to move an element from 'visited' to 'link' after a certain\ntime. An 'active' link is one that is currently being selected (e.g.\nby a mouse button press) by the reader.\n The formatting of an anchor pseudo-class is as if the class had\nbeen inserted manually. A UA is not required to reformat a currently\ndisplayed document due to anchor pseudo-class transitions. E.g., a\nstyle sheet can legally specify that the 'font-size' of an 'active'\nlink should be larger  than  a 'visited' link, but the UA is not\nrequired to dynamically reformat the document when the reader selects\nthe 'visited' link.\n Pseudo-class selectors do not match normal classes, and vice versa.\nThe style rule in the example below will therefore not have any\ninfluence:\nA:link { color: red }\n<A CLASS=link NAME=target5> ... </A>\n In CSS1, anchor pseudo-classes have no effect on elements other\nthan 'A'. Therefore, the element type can be omitted from the\nselector:\nA:link { color: red }\n:link { color: red }\n The two selectors above will select the same elements in CSS1.\n Pseudo-class names are case-insensitive.\n Pseudo-classes can be used in contextual selectors:\nA:link IMG { border: solid blue }\n Also, pseudo-classes can be combined with normal classes:\nA.external:visited { color: blue }\n<A CLASS=external HREF=\"http://out.side/\">external link</A>\n If the link in the above example has been visited, it will be\nrendered in blue. Note that normal class names precede pseudo-classes\nin the selector.\n 2.2 \u00a0\u00a0\nTypographical pseudo-elements \n Some common typographical effects are associated not with\nstructural elements but rather with typographical items as formatted\non the canvas. In CSS1, two such typographical items can be addressed\nthrough pseudo-elements: the first line of an element, and the first\nletter.\n CSS1 core:  UAs may ignore all rules with ':first-line' or\n':first-letter' in the selector, or, alternatively, only support a\nsubset of the properties on these pseudo-elements. (see  section 7 )\n 2.3 \u00a0\u00a0 The\n'first-line' pseudo-element \n The 'first-line' pseudo-element is used to apply special styles to\nthe first line as formatted on the canvas:\n<STYLE TYPE=\"text/css\">\n  P:first-line {  font-variant: small-caps  }\n</STYLE>\n<P>The first line of an article in Newsweek.\n On a text-based UA, this could be formatted as:\nTHE FIRST LINE OF AN\narticle in Newsweek.\n The fictional tag sequence in the above example is:\n<P>\n<P:first-line>\nThe first line of an \n</P:first-line>\narticle in Newsweek.\n</P>\n The 'first-line' end tag is inserted at the end of the first line\nas formatted on the canvas.\n The 'first-line' pseudo-element can only be attached to a\nblock-level element.\n The 'first-line' pseudo-element is similar to an inline element,\nbut with certain restrictions. Only the following properties apply to\na 'first-line' element: font properties ( 5.2 ), color and background properties ( 5.3 ), 'word-spacing' ( 5.4.1 ), 'letter-spacing' ( 5.4.2 ), 'text-decoration' ( 5.4.3 ),  'vertical-align'  ( 5.4.4 ), 'text-transform' ( 5.4.5 ), 'line-height' ( 5.4.8 ), 'clear' ( 5.5.26 ).\n 2.4 \u00a0\u00a0 The\n'first-letter' pseudo-element \n The 'first-letter' pseudo-element is used for \"initial caps\" and\n\"drop caps\", which are common typographical effects. It is similar to\nan inline element if its 'float' property is 'none', otherwise it is\nsimilar to a floating element. These are the properties that apply to\n'first-letter' pseudo-elements: font properties ( 5.2 ), color and background properties ( 5.3 ), 'text-decoration'\n( 5.4.3 ),  'vertical-align'  (only if 'float' is 'none',  5.4.4 ), 'text-transform' ( 5.4.5 ), 'line-height' ( 5.4.8 ), margin properties ( 5.5.1 - 5.5.5 ), padding\nproperties ( 5.5.6 - 5.5.10 ), border properties ( 5.5.11 - 5.5.22 ),\n'float' ( 5.5.25 ), 'clear' ( 5.5.26 ).\n This is how you could make a dropcap initial letter span two lines:\n<HTML>\n <HEAD>\n  <TITLE>Title</TITLE>\n  <STYLE TYPE=\"text/css\">\n   P              { font-size: 12pt; line-height: 12pt }\n   P:first-letter { font-size: 200%; float: left }\n   SPAN           { text-transform: uppercase }\n  </STYLE>\n </HEAD>\n <BODY>\n  <P><SPAN>The first</SPAN> few words of an article in The Economist.</P>\n </BODY>\n</HTML>\n If a text-based UA supports the 'first-letter' pseudo-element (they\nprobably will not), the above could be formatted as:\n___\n | HE FIRST few\n | words of an \narticle in the\nEconomist.\n The fictional tag sequence is:\n<P>\n<SPAN>\n<P:first-letter>\nT\n</P:first-letter>he first\n</SPAN> \nfew words of an article in the Economist.\n</P>\n Note that the 'first-letter' pseudo-element tags abut the content\n(i.e. the initial character), while the 'first-line' pseudo-element\nstart tag is inserted right after the start tag of the element it is\nattached to.\n The UA defines what characters are inside the 'first-letter'\nelement. Normally, quotes that precede the first letter should be\nincluded:\n||   /\\    bird in \n    /  \\   the hand\n   /----\\  is worth\n  /      \\ two in\nthe bush,\" says an \nold proverb.\n When the paragraph starts with other punctuation (e.g. parenthesis\nand ellipsis points) or other characters that are normally not\nconsidered letters (e.g. digits and mathematical symbols),\n'first-letter' pseudo-elements are usually ignored.\n Some languages may have specific rules about how to treat certain\nletter combinations. In Dutch, for example, if the letter combination\n\"ij\" appears at the beginning of a word, they should both be\nconsidered within the 'first-letter' pseudo-element.\n The 'first-letter' pseudo-element can only be attached to a\nblock-level element.\n 2.5 \u00a0\u00a0\nPseudo-elements in selectors \n In a contextual selector, pseudo-elements are only allowed at the\nend of the selector:\nBODY P:first-letter { color: purple }\n Pseudo-elements can be combined with classes in selectors:\nP.initial:first-letter { color: red }\n<P CLASS=initial>First paragraph</A>\n The above example would make the first letter of all 'P' elements\nwith 'CLASS=initial' red. When combined with classes or\npseudo-classes, pseudo-elements must be specified at the end of the\nselector. Only one pseudo-element can be specified per selector.\n 2.6 \u00a0\u00a0 Multiple\npseudo-elements \n Several pseudo elements can be combined:\nP { color: red; font-size: 12pt }\nP:first-letter { color: green; font-size: 200% }\nP:first-line { color: blue }\n<P>Some text that ends up on two lines</P>\n In this example, the first letter of each 'P' element would be\ngreen with a font size of 24pt. The rest of the first line (as\nformatted on the canvas) would be blue while the rest of the paragraph\nwould be red. Assuming that a line break will occur before the word\n\"ends\", the fictional tag sequence is:\n<P>\n<P:first-line>\n<P:first-letter> \nS \n</P:first-letter>ome text that \n</P:first-line> \nends up on two lines \n</P>\n Note that the 'first-letter' element is inside the 'first-line'\nelement. Properties set on 'first-line' will be inherited by\n'first-letter', but are overridden if the same property is set on\n'first-letter'.\n If a pseudo-element breaks up a real element the necessary extra\ntags must be regenerated in the fictional tag sequence. For example,\nif a SPAN element spans over a  </P:first-line>  tag, a\nset of SPAN end and start tags must be regenerated and the fictional\ntag sequence becomes:\n<P>\n<P:first-line>\n<SPAN> \nThis text is inside a long \n</SPAN>\n</P:first-line>\n<SPAN> \nspan element \n</SPAN>\n 3 \u00a0\u00a0 The cascade \n In CSS, more than one style sheet can influence the presentation\nsimultaneously. There are two main reasons for this feature:\nmodularity and author/reader balance.\n      modularity\n      A style sheet designer can combine several (partial) style\n      sheets to reduce redundancy:\n@import url(http://www.style.org/pastoral);\n@import url(http://www.style.org/marine);\nH1 { color: red }     /* override imported sheets */\n      author/reader balance\n      Both readers and authors can influence the presentation through\n      style sheets. To do so, they use the same style sheet language\n      thus reflecting a fundamental feature of the web: everyone can become\n      a publisher. The UA is free to choose the mechanism for\n      referencing personal style sheets.\n Sometimes conflicts will arise between the style sheets that\ninfluence the presentation. Conflict resolution is based on each style\nrule having a weight. By default, the weights of the reader's rules\nare less than the weights of rules in the author's documents. I.e., if\nthere are conflicts between the style sheets of an incoming document\nand the reader's personal sheets, the author's rules will be used.\nBoth reader and author rules override the UA's default values.\n The imported style sheets also cascade with each other, in the\norder they are imported, according to the cascading rules defined\nbelow. Any rules specified in the style sheet itself override rules in\nimported style sheets. That is, imported style sheets are lower in the\ncascading order than rules in the style sheet itself. Imported style\nsheets can themselves import and override other style sheets,\nrecursively.\n In CSS1, all '@import' statements must occur at the start of a\nstyle sheet, before any declarations. This makes it easy to see that\nrules in the style sheet itself override rules in the imported style\nsheets.\n 3.1 \u00a0\u00a0 'important' \n Style sheet designers can increase the weights of their\ndeclarations:\nH1 { color: black ! important; background: white ! important }\nP  { font-size: 12pt ! important; font-style: italic }\n In the example above, the first three declarations have increased\nweight, while the last declaration has normal weight.\n A reader rule with an important declaration will override an author\nrule with a normal declaration. An author rule with an important\ndeclaration will override a reader rule with an important declaration.\n 3.2 \u00a0\u00a0 Cascading order \n Conflicting rules are intrinsic to the CSS mechanism. To find the\nvalue for an element/property combination, the following algorithm\nmust be followed:\n Find all declarations that apply to the element/property in\nquestion. Declarations apply if the selector matches the element in\nquestion. If no declarations apply, the inherited value is used. If\nthere is no inherited value (this is the case for the 'HTML' element\nand for properties that do not inherit), the initial value is used.\n Sort the declarations by explicit weight: declarations marked\n'!important' carry more weight than unmarked (normal) declarations.\n Sort by origin: the author's style sheets override the reader's\nstyle sheet which override the UA's default values. An imported style\nsheet has the same origin as the style sheet from which it is\nimported.\n Sort by specificity of selector: more specific selectors will\noverride more general ones. To find the specificity, count the number\nof ID attributes in the selector (a), the number of CLASS attributes\nin the selector (b), and the number of tag names in the selector (c).\nConcatenating the three numbers (in a number system with a large base)\ngives the specificity. Some examples:\nLI            {...}  /* a=0 b=0 c=1 -> specificity =   1 */\nUL LI         {...}  /* a=0 b=0 c=2 -> specificity =   2 */\nUL OL LI      {...}  /* a=0 b=0 c=3 -> specificity =   3 */\nLI.red        {...}  /* a=0 b=1 c=1 -> specificity =  11 */\nUL OL LI.red  {...}  /* a=0 b=1 c=3 -> specificity =  13 */ \n#x34y         {...}  /* a=1 b=0 c=0 -> specificity = 100 */ \n Pseudo-elements and pseudo-classes are counted as normal elements\nand classes, respectively.\n Sort by order specified: if two rules have the same weight, the\nlatter specified wins. Rules in imported style sheets are considered\nto be before any rules in the style sheet itself.\n The search for the property value can be terminated whenever one\nrule has a higher weight than the other rules that apply to the same\nelement/property combination.\n This strategy gives author's style sheets considerably higher\nweight than those of the reader. It is therefore important that the\nreader has the ability to turn off the influence of a certain style\nsheet, e.g. through a pull-down menu.\n A declaration in the 'STYLE' attribute of an element (see  section 1.1  for an example) has the\nsame weight as a declaration with an ID-based selector that is\nspecified at the end of the style sheet:\n<STYLE TYPE=\"text/css\">\n  #x97z { color: blue }\n</STYLE>\n<P ID=x97z STYLE=\"color: red\">\n In the above example, the color of the 'P' element would be red.\nAlthough the specificity is the same for both declarations, the\ndeclaration in the 'STYLE' attribute will override the one in the\n'STYLE' element because of cascading rule number 5.\n The UA may choose to honor other stylistic HTML attributes, for\nexample 'ALIGN'. If so, these attributes are translated to the\ncorresponding CSS rules with specificity equal to 1. The rules are\nassumed to be at the start of the author style sheet and may be\noverridden by subsequent style sheet rules. In a transition phase,\nthis policy will make it easier for stylistic attributes to coexist\nwith style sheets.\n 4 \u00a0\u00a0 Formatting model \n CSS1 assumes a simple box-oriented formatting model where  each formatted element  results in\none or more rectangular boxes. (Elements that have a 'display' value\nof 'none' are not formatted and will therefore not result in a box.)\nAll boxes have a core content area with optional surrounding padding,\nborder and margin areas.\n _______________________________________\n|                                       |\n|           margin (transparent)        |\n|   _________________________________   |\n|  |                                 |  |\n|  |        border                   |  |\n|  |   ___________________________   |  |\n|  |  |                           |  |  |\n|  |  |     padding               |  |  |\n|  |  |   _____________________   |  |  |\n|  |  |  |                     |  |  |  |\n|  |  |  |  content            |  |  |  |\n|  |  |  |_____________________|  |  |  |\n|  |  |___________________________|  |  |\n|  |_________________________________|  |\n|_______________________________________|\n          |    element width    |\n|               box width               |\n The size of the margin, border and padding are set with the margin\n( 5.5.1 - 5.5.5 ), padding\n( 5.5.6 - 5.5.10 ), and\nborder ( 5.5.11 - 5.5.22 ) properties respectively. The padding area\nuses the same background as the element itself  (set with the background properties ( 5.3.2 - 5.3.7 )).  The color and style for the\nborder is set with the border properties. The margins are always\ntransparent, so the parent element will shine through.\n The size of the box is the sum of the element width (i.e. formatted\ntext or image) and the padding, the border and the margin areas.\n From the formatter's point of view there are two main types of\nelements: block-level and inline.\n 4.1 \u00a0\u00a0 Block-level\nelements \n Elements with a 'display' value of 'block' or 'list-item' are\n block-level  elements. Also, floating elements (elements with\na 'float' value other than 'none') are considered to be block-level\nelements.\n The following example shows how margins and padding format a 'UL'\nelement with two children. To simplify the diagram there are no\nborders. Also, the single-letter \"constants\" in this example are not\nlegal CSS1 syntax, but is a convenient way to tie the style sheet\nvalues to the figure.\n<STYLE TYPE=\"text/css\">\n  UL { \n    background: red; \n    margin: A B C D;      \n    padding: E F G H;\n  }\n  LI { \n    color: white;    \n    background: blue;     /* so text is white on blue */ \n    margin: a b c d; \n    padding: e f g h;\n  }\n</STYLE>\n..\n<UL>\n  <LI>1st element of list\n  <LI>2nd element of list\n</UL>\n _______________________________________________________\n|                                                       |\n|    A      UL margin (transparent)                     |\n|    _______________________________________________    |\n| D |                                               | B |\n|   |    E   UL padding (red)                       |   |\n|   |    _______________________________________    |   |\n|   | H |                                       | F |   |\n|   |   |    a   LI margin (transparent,        |   |   |\n|   |   |        so red shines through)         |   |   |\n|   |   |    _______________________________    |   |   |\n|   |   | d |                               | b |   |   |\n|   |   |   |    e    LI padding (blue)     |   |   |   |\n|   |   |   |                               |   |   |   |\n|   |   |   | h  1st element of list      f |   |   |   |\n|   |   |   |                               |   |   |   |\n|   |   |   |    g                          |   |   |   |\n|   |   |   |_______________________________|   |   |   |\n|   |   |                                       |   |   |\n|   |   |     max(a, c)                         |   |   | <- note the max\n|   |   |    _______________________________    |   |   |\n|   |   |   |                               |   |   |   |\n|   |   | d |    e    LI padding (blue)     |   |   |   |\n|   |   |   |                               |   |   |   |\n|   |   |   | h  2nd element of list      f |   |   |   |\n|   |   |   |                               |   |   |   |\n|   |   |   |    g                          |   |   |   |\n|   |   |   |_______________________________|   |   |   |\n|   |   |                                       |   |   |\n|   |   |   c    LI margin (transparent,        |   |   |\n|   |   |        so red shines through)         |   |   |\n|   |   |_______________________________________|   |   |\n|   |                                               |   |\n|   |    G                                          |   |\n|   |_______________________________________________|   |\n|                                                       |\n|   C                                                   |\n|_______________________________________________________|\n Technically, padding and margin properties are not inherited. But,\nas the example shows, the placement of an element is relative to\nancestors and siblings, so these elements' padding and margin\nproperties have an effect on their children.\n If there had been borders in the above example they would have\nappeared between the padding and the margins.\n The following diagram introduces some useful terminology:\n                           ---------------  <-- top \n                             top margin\n                           ---------------\n                             top border\n                           ---------------\n                            top padding\n                           +-------------+  <-- inner top \n|        |        |        |             |         |         |         |\n|--left--|--left--|--left--|-- content --|--right--|--right--|--right--|\n| margin | border | padding|             | padding | border  | margin  |\n|        |        |        |             |         |         |         |\n                           +-------------+  <-- inner bottom \n ^                            ^               ^                               ^ \n left           left inner edge               right inner edge            right \n outer                                                                outer \n edge                         bottom padding                           edge \n                           ---------------\n                             bottom border\n                           ---------------\n                             bottom margin\n                           ---------------  <-- bottom \n The  left outer edge  is the edge of an element with its\npadding, border and margin taken into account. The  left inner\nedge  is the edge of the content only, inside any padding, border\nor margin. Ditto for right. The  top  is the top of the  element  including any padding,\nborder and margin; it is only defined for inline and floating\nelements, not for non-floating block-level elements. The  inner\ntop  is the top of the content, inside any padding, border or\nmargin. The  bottom  is the bottom of the element, outside any\n padding, border and margin;  it is\nonly defined for inline and floating elements, not for non-floating\nblock-level elements. The  inner bottom  is the bottom of the\nelement, inside any padding, border and margin.\n The  width  of an element is the width of the content, i.e.,\nthe distance between left inner edge and right inner edge. The\n height  is the height of the content, i.e., the distance from\ninner top to inner bottom.\n 4.1.1 \u00a0\u00a0 Vertical\nformatting \n The width of the margin on non-floating block-level elements\nspecifies the minimum distance to the edges of surrounding boxes. Two\nor more adjoining vertical margins (i.e., with no border, padding or\ncontent between them) are collapsed to use the maximum of the margin\nvalues. In most cases, after collapsing the vertical margins the\nresult is visually more pleasing and closer to what the designer\nexpects. In the example above, the margins between the two 'LI'\nelements are collapsed by using the maximum of the first LI element's\n'margin-bottom' and the second LI element's 'margin-top'. Similarly,\nif the padding between the 'UL' and the first 'LI' element (the \"E\"\nconstant) had been zero, the margins of the UL and first LI elements\nwould have been collapsed.\n In the case of negative margins, the absolute maximum of the\nnegative adjoining margins is deducted from the maximum of the\npositive adjoining margins. If there are no positive margins, the\nabsolute maximum of the negative adjoining margins is deducted from\nzero.\n 4.1.2 \u00a0\u00a0 Horizontal\nformatting \n The horizontal position and size of a non-floating, block-level\nelement is determined by seven properties: 'margin-left',\n'border-left', 'padding-left', 'width', 'padding-right',\n'border-right' and 'margin-right'. The sum of these seven is always\nequal to the 'width' of the parent element.\n By default, the 'width' of an element is 'auto'. If the element is\nnot a replaced element, this means that the 'width' is calculated by\nthe UA so that the sum of the seven properties mentioned above is\nequal to the parent width. If the element is a replaced element, a\nvalue of 'auto' for 'width' is automatically replaced by the element's\nintrinsic width.\n Three of the seven properties can be set to 'auto': 'margin-left',\n'width' and 'margin-right'. For replaced elements, a value of 'auto'\non 'width' is replaced by the intrinsic width, so for them there can\nonly be two 'auto' values.\n The 'width' has a non-negative UA-defined minimum value (which may\nvary from element to element and even depend on other properties). If\n'width' goes below this limit, either because it was set explicitly,\nor because it was 'auto' and the rules below would make it too small,\nthe value will be replaced with the minimum value instead.\n If  exactly one  of 'margin-left', 'width' or 'margin-right'\nis 'auto', the UA will assign that property a value that will make the\nsum of the seven equal to the parent's width.\n If  none  of the properties are 'auto', the value of\n'margin-right' will be assigned 'auto'.\n If  more than one  of the three is 'auto', and one of them\nis 'width',  then  the\nothers ('margin-left' and/or 'margin-right') will be set to zero and\n'width' will get the value needed to make the sum of the seven equal\nto the parent's width.\n Otherwise, if both 'margin-left' and 'margin-right' are 'auto',\nthey will be set to equal values. This will center the element inside\nits parent.\n If 'auto' is set as the value for one of the seven properties in an\nelement that is inline or floating, it will be treated as if it were\nset to zero.\n Unlike vertical margins, horizontal margins are not collapsed.\n 4.1.3 \u00a0\u00a0 List-item\nelements \n Elements with a 'display' property value of 'list-item' are\nformatted as block-level elements, but preceded by a list-item marker.\nThe type of marker is determined by the 'list-style' property. The\nmarker is placed according to the value of the  'list-style'  property:\n<STYLE TYPE=\"text/css\">\n  UL         { list-style: outside }\n  UL.compact { list-style: inside }\n</STYLE>\n<UL>\n  <LI>first list item comes first\n  <LI>second list item comes second\n</UL>\n<UL CLASS=COMPACT>\n  <LI>first list item comes first\n  <LI>second list item comes second\n</UL>\n The above example may be formatted as:\n* first list item \n  comes first\n* second list item\n  comes second\n   * first list\n  item comes first\n  * second list\n  item comes second \n In right-to-left text, the markers would have been on the right\nside of the box.\n 4.1.4 \u00a0\u00a0 Floating\nelements \n Using the  'float'  property, an element can be\ndeclared to be outside the normal flow of elements and is then\nformatted as a block-level element. For example, by setting the\n'float' property of an image to 'left', the image is moved to the left\nuntil the margin, padding or border of another block-level element is\nreached. The normal flow will wrap around on the right side. The\nmargins, borders and padding of the element itself will be honored,\nand the margins never collapse with the margins of adjacent elements.\n A floating element is positioned subject to the following\nconstraints (see  section 4.1  for\nan explanation of the terms):\n The left outer edge of a left-floating element may not be to the\nleft of the left inner edge of its parent element. Analogously for\nright floating elements.\n The left outer edge of a left floating element must be to the\nright of the right outer edge of every earlier (in the HTML source)\nleft-floating element or the top of the former must be lower than the\nbottom of the latter. Analogously for right floating elements.\n The right outer edge of a left-floating element may not be to the\nright of the left outer edge of any right-floating element that is to\nthe right of it. Analogously for right-floating elements.\n A floating element's top may not be higher than the inner top of\nits parent.\n A floating element's top may not be higher than the top of any\nearlier floating or block-level element.\n A floating element's top may not be higher than the top of any\n line-box  (see section 4.4) with content that precedes the\nfloating element in the HTML source.\n A floating element must be placed as high as possible.\n A left-floating element must be put as far to the left as\npossible, a right-floating element as far to the right as possible. A\nhigher position is preferred over one that is further to the\nleft/right.\n<STYLE TYPE=\"text/css\">\n  IMG { float: left }\n  BODY, P, IMG { margin: 2em }\n</STYLE>\n<BODY>\n  <P>\n    <IMG SRC=img.gif>\n    Some sample text that has no other...\n</BODY>\n The above example could be formatted as:\n ________________________________________\n|\n|          max(BODY margin, P margin)\n|          ______________________________\n|    |    |             Some sample text\n| B  | P  | IMG margins that has no other\n| O  |    |    _____    purpose than to \n| D  | m  |   |     |   show how floating\n| Y  | a  |   | IMG |   elements are moved\n|    | r  |   |     |   to the side of the\n| m  | g  |   |_____|   parent element\n| a  | i  |             while honoring\n| r  | n  |             margins, borders\n| g  |    |             and padding. Note\n| i  |    |how adjacent vertical margins  \n| n  |    |are collapsed between non-\n|    |    |floating block-level elements.\n Note that the margin of  the 'P'\nelement encloses  the floating 'IMG' element.\n There are two situations when floating elements can overlap with\nthe margin, border and padding areas of other elements:\n when the floating element has a negative margin: negative margins\non floating elements are honored as on other block-level elements.\n when the floating element is wider or higher than the element it\nis inside\n 4.2 \u00a0\u00a0 Inline elements \n Elements that are not formatted as block-level elements are\n inline  elements. An inline element can share line space with\nother elements. Consider this example:\n<P>Several <EM>emphasized</EM> words <STRONG>appear</STRONG>.</P>\n The 'P' element is normally block-level, while 'EM' and 'STRONG'\nare inline elements. If the 'P' element is wide enough to format the\nwhole element on one line, there will be two inline elements on the\nline:\nSeveral  emphasized  words  appear .\n If there is not enough room on one line an inline element will be\nsplit into several boxes:\n<P>Several <EM>emphasized words</EM> appear here.</P>\n The above example may be formatted as:\nSeveral  emphasized \n words  appear here.\n If the inline element has margins, borders, padding or text\ndecorations attached, these will have no effect where the element is\nbroken:\n         ----------\nSeveral | emphasized \n         ----------\n-----\n words | appear here.\n-----\n (The \"figure\" above is slightly distorted due to the use of ASCII\ngraphics. See  section 4.4  for a\ndescription of how to calculate the height of lines.\n 4.3 \u00a0\u00a0 Replaced\nelements \n A replaced element is an element which is replaced by content\npointed to from the element. E.g., in HTML, the 'IMG' element is\nreplaced by the image pointed to by the 'SRC' attribute. One can\nassume that replaced elements come with their own intrinsic\ndimensions. If the value of the 'width' property is 'auto', the\nintrinsic width is used as the width of the element. If a value other\nthan 'auto' is specified in the style sheet, this value is used and\nthe replaced element is resized accordingly (the resize method will\ndepend on the media type). The 'height' property is used in the same\nmanner.\n Replaced elements can be either block-level or inline.\n 4.4 \u00a0\u00a0 The height of\nlines \n All elements have a 'line-height' property that, in principle,\ngives the total height of a line of text. Space is added above and\nbelow the text of the line to arrive at that line height. For example,\nif the text is 12pt high and 'line-height' is set to '14pt', an extra\nspace of 2pt is added, namely 1pt above and 1pt below the line. Empty\nelements influence these calculations just like elements with content.\n The difference between the font size and the 'line-height' is\ncalled the  leading . Half the leading is called the\n half-leading . After formatting, each line will form a\nrectangular  line-box .\n If a line of text contains sections with different 'line-height'\nvalues (because there are inline elements on the line), then each of\nthose sections has its own half-leading above and below. The height of\nthe line-box is from the top of the highest section to the bottom of\nthe lowest one. Note that the top and bottom do not necessarily\ncorrespond to the tallest element, since elements can be positioned\nvertically with the  'vertical-align' \nproperty. To form a paragraph, each line-box is stacked immediately\nbelow the previous line.\n Note that any padding, border or margin above and below\nnon-replaced inline elements does not influence the height of the\nline. In other words: if the 'line-height' is too small for the chosen\npadding or border, it will overlap with text on other lines.\n Replaced elements (e.g. images) on the line can make the line-box\nbigger, if the top of the replaced element (i.e., including all of its\npadding, border and margin) is above the tallest text section, or if\nthe bottom is below the lowest.\n In the normal case, when there is only one value of 'line-height'\nthroughout a paragraph, and no tall images, the definition above will\nensure that baselines of successive lines are exactly 'line-height'\napart. This is important when columns of text in different fonts have\nto be aligned, for example in a table.\n Note that this doesn't preclude the text on two adjacent lines from\noverlapping each other. The 'line-height' may be smaller than the\nheight of the text, in which case the leading will be negative. This\nis useful if you know that the text will contain no descenders (e.g.,\nbecause it only contains uppercase), so the lines can be put closer\ntogether.\n 4.5 \u00a0\u00a0 The canvas \n The canvas is the part of the UA's drawing surface onto which\ndocuments are rendered. No structural element of a document\ncorresponds to the canvas, and this raises two issues when formatting\na document:\n from where should the dimensions of the canvas be set?\n when the document doesn't cover the whole canvas, how should this\narea be rendered?\n A reasonable answer to the first question is that the initial  width of the canvas  is based on the\nwindow size, but CSS1 leaves this issue for the UA to decide. It is\nalso reasonable to expect the UA to change the  width of the canvas  when the\nwindow is resized, but this is also outside the scope of CSS1.\n HTML extensions have set a precedent for the second question:\nattributes on the 'BODY' element set the background of the whole\ncanvas. To support designers' expectations, CSS1 introduces a special\nrule to find the canvas background:\n If the 'background' value of the 'HTML' element is\ndifferent from 'transparent' then use it, else use the 'background'\nvalue of the 'BODY' element. If the resulting value is 'transparent',\nthe rendering is undefined. \n This rule allows:\n<HTML STYLE=\"background: url(http://style.com/marble.png)\">\n<BODY STYLE=\"background: red\">\n In the example above, the canvas will be covered with \"marble\". The\nbackground of the 'BODY' element (which may or may not fully cover the\ncanvas) will be red.\n Until other means of addressing the canvas become available, it is\nrecommended that canvas properties are set on the 'BODY' element.\n 4.6 \u00a0\u00a0 'BR' elements \n The current CSS1 properties and values cannot describe the behavior\nof the 'BR' element. In HTML, the 'BR' element specifies a line break\nbetween words. In effect, the element is replaced by a line break.\nFuture versions of CSS may handle added and replaced content, but\nCSS1-based formatters must treat 'BR' specially.\n 5 \u00a0\u00a0 CSS1 properties \n Style sheets influence the presentation of documents by assigning\nvalues to style properties. This section lists the defined style\nproperties, and their corresponding list of possible values, of CSS1.\n 5.1 \u00a0\u00a0 Notation\nfor property values \n In the text below, the allowed values for each property are listed\nwith a syntax like the following:\n Value:  N | NW | NE \n Value:  [ <length> | thick | thin ]{1,4} \n Value:  [<family-name> , ]* <family-name> \n Value:  <url>? <color> [ / <color> ]? \n Value:  <url> || <color> \n The words between \"<\" and \">\" give a type of value. The most\ncommon types are <length>, <percentage>, <url>,\n<number> and <color>; these are described in  section 6 . The more specialized types (e.g.\n<font-family> and <border-style>) are described under the\ncorresponding property.\n Other words are keywords that must appear literally, without\nquotes. The slash (/) and the comma (,) must also appear literally.\n Several things juxtaposed mean that all of them must occur, in the\ngiven order. A bar (|) separates alternatives: one of them must occur.\nA double bar (A || B) means that either A or B or both must occur, in\nany order. Brackets ([]) are for grouping. Juxtaposition is stronger\nthan the double bar, and the double bar is stronger than the bar. Thus\n\"a b | c || d e\" is equivalent to \"[ a b ] | [ c || [ d e ]]\".\n Every type, keyword, or bracketed group may be followed by one of\nthe following modifiers:\n An asterisk (*) indicates that the preceding type, word or group\nis repeated zero or more times.\n A plus (+) indicates that the preceding type, word or group is\nrepeated one or more times.\n A question mark (?) indicates that the preceding type, word or\ngroup is optional.\n A pair of numbers in curly braces ({A,B}) indicates that the\npreceding type, word or group is repeated at least A and at most B\ntimes.\n 5.2 \u00a0\u00a0 Font\nproperties \n Setting font properties will be among the most common uses of style\nsheets. Unfortunately, there exists no well-defined and universally\naccepted taxonomy for classifying fonts, and terms that apply to one\nfont family may not be appropriate for others. E.g. 'italic' is\ncommonly used to label slanted text, but slanted text may also be\nlabeled as being  Oblique, Slanted, Incline, Cursive  or\n Kursiv . Therefore it is not a simple problem to map typical\nfont selection properties to a specific font.\n CSS1 defines the properties  'font-family' ,  'font-style' ,  'font-variant'  and  'font-weight' ,  'font-size' ,  'font' .\n 5.2.1 \u00a0\u00a0 Font matching \n Because there is no accepted, universal taxonomy of font\nproperties, matching of properties to font faces must be done\ncarefully. The properties are matched in a well-defined order to\ninsure that the results of this matching process are as consistent as\npossible across UAs (assuming that the same library of font faces is\npresented to each of them).\n The User Agent makes (or accesses) a database of relevant CSS1\nproperties of all the fonts of which the UA is aware. The UA may be\naware of a font because it has been installed locally or it has been\npreviously downloaded over the web. If there are two fonts with\nexactly the same properties, one of them is ignored.\n At a given element and for each character in that element, the UA\nassembles the font-properties applicable to that element. Using the\ncomplete set of properties, the UA uses the 'font-family' property to\nchoose a tentative font family. The remaining properties are tested\nagainst the family according to the matching criteria described with\neach property. If there are matches for all the remaining properties,\nthen that is the matching font face for the given element.\n If there is no matching font face within the 'font-family' being\nprocessed by step 2, and if there is a next alternative 'font-family'\nin the font set, then repeat step 2 with the next alternative\n'font-family'.\n If there is a matching font face, but it doesn't contain a glyph\nfor the current character, and if there is a next alternative\n'font-family' in the font sets, then repeat step 2 with the next\nalternative 'font-family'. See  appendix C \nfor a description of font and character encoding.\n If there is no font within the family selected in 2, then use a\nUA-dependent default 'font-family' and repeat step 2, using the best\nmatch that can be obtained within the default font.\n (The above algorithm can be optimized to avoid having to revisit\nthe CSS1 properties for each character.)\n The per-property matching rules from (2) above are as follows:\n 'font-style'  is tried first. 'italic'\nwill be satisfied if there is either a face in the UA's font database\nlabeled with the CSS keyword 'italic' (preferred) or 'oblique'.\nOtherwise the values must be matched exactly or font-style will fail.\n 'font-variant'  is tried next. 'normal'\nmatches a font not labeled as 'small-caps'; 'small-caps' matches (1) a\nfont labeled as 'small-caps', (2) a font in which the small caps are\nsynthesized, or (3) a font where all lowercase letters are replaced by\nupper case letters. A small-caps font may be synthesized by\nelectronically scaling uppercase letters from a normal font.\n 'font-weight'  is matched next, it will\nnever fail. (See 'font-weight' below.)\n 'font-size'  must be matched within a\nUA-dependent margin of tolerance. (Typically, sizes for scalable fonts\nare rounded to the nearest whole pixel, while the tolerance for\nbitmapped fonts could be as large as 20%.) Further computations, e.g.\nby 'em' values in other properties, are based on the 'font-size' value\nthat is used, not the one that is specified.\n 5.2.2 \u00a0\u00a0 'font-family' \n Value:  [[<family-name> | <generic-family>],]*\n  [<family-name> | <generic-family>] \n Initial:  UA specific \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n The value is a prioritized list of font family names and/or generic\nfamily names. Unlike most other CSS1 properties, values are separated\nby a comma to indicate that they are alternatives:\nBODY { font-family: gill, helvetica, sans-serif }\n There are two types of list values:\n <family-name> \n The name of a font family of choice. In the last example, \"gill\"\nand \"helvetica\" are font families.\n <generic-family> \n In the example above, the last value is a generic family name. The\nfollowing generic families are defined:\n 'serif' (e.g. Times)\n 'sans-serif' (e.g. Helvetica)\n 'cursive' (e.g. Zapf-Chancery)\n 'fantasy' (e.g. Western)\n 'monospace' (e.g. Courier)\n Style sheet designers are encouraged to offer a generic font family\nas a last alternative.\n Font names containing whitespace should be quoted:\nBODY { font-family: \"new century schoolbook\", serif }\n<BODY STYLE=\"font-family: 'My own font', fantasy\">\n If quoting is omitted, any whitespace characters before and after\nthe font name are ignored and any sequence of whitespace characters\ninside the font name is converted to a single space.\n 5.2.3 \u00a0\u00a0 'font-style' \n Value:  normal | italic | oblique \n Initial:  normal \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n The 'font-style' property selects between normal (sometimes\nreferred to as \"roman\" or \"upright\"), italic and oblique faces within\na font family.\n A value of 'normal' selects a font that is classified as 'normal'\nin the UA's font database, while 'oblique' selects a font that is\nlabeled 'oblique'. A value of 'italic' selects a font that is labeled\n'italic', or, if that is not available, one labeled 'oblique'.\n The font that is labeled 'oblique' in the UA's font database may\nactually have been generated by electronically slanting a normal font.\n Fonts with Oblique, Slanted or Incline in their names will\ntypically be labeled 'oblique' in the UA's font database. Fonts with\n Italic, Cursive  or  Kursiv  in their names will\ntypically be labeled 'italic'.\nH1, H2, H3 { font-style: italic }\nH1 EM { font-style: normal }\n In the example above, emphasized text within 'H1' will appear in a\nnormal face.\n 5.2.4 \u00a0\u00a0 'font-variant' \n Value:  normal | small-caps \n Initial:  normal \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n Another type of variation within a font family is the small-caps.\nIn a small-caps font the lower case letters look similar to the\nuppercase ones, but in a smaller size and with slightly different\nproportions. The 'font-variant' property selects that font.\n A value of 'normal' selects a font that is not a small-caps font,\n'small-caps' selects a small-caps font. It is acceptable (but not\nrequired) in CSS1 if the small-caps font is a created by taking a\nnormal font and replacing the lower case letters by scaled uppercase\ncharacters. As a last resort, uppercase letters will be used as\nreplacement for a small-caps font.\n The following example results in an 'H3' element in small-caps,\nwith emphasized words in oblique small-caps:\nH3 { font-variant: small-caps }\nEM { font-style: oblique }\n There may be other variants in the font family as well, such as\nfonts with old-style numerals, small-caps numerals, condensed or\nexpanded letters, etc. CSS1 has no properties that select those.\n CSS1 core:  insofar as this property causes text to be\ntransformed to uppercase, the same considerations as for  'text-transform'  apply.\n 5.2.5 \u00a0\u00a0 'font-weight' \n Value:  normal | bold | bolder | lighter | 100 | 200 | 300 | 400\n  | 500 | 600 | 700 | 800 | 900 \n Initial:  normal \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n The 'font-weight' property selects the weight of the font. The\nvalues '100' to '900' form an ordered sequence, where each number\nindicates a weight that is at least as dark as its predecessor. The\nkeyword 'normal' is synonymous with '400', and 'bold' is synonymous\nwith '700'. Keywords other than 'normal' and 'bold' have been shown to\nbe often confused with font names and a numerical scale was therefore\nchosen for the 9-value list.\nP { font-weight: normal }   /* 400 */\nH1 { font-weight: 700 }     /* bold */\n The 'bolder' and 'lighter' values select font weights that are\nrelative to the weight inherited from the parent:\nSTRONG { font-weight: bolder }\n Child elements inherit the resultant weight, not the keyword value.\n Fonts (the font data) typically have one or more properties whose\nvalues are names that are descriptive of the \"weight\" of a font. There\nis no accepted, universal meaning to these weight names. Their primary\nrole is to distinguish faces of differing darkness within a single\nfont family. Usage across font families is quite variant; for example\na font that you might think of as being bold might be described as\nbeing  Regular, Roman, Book, Medium, Semi-  or  DemiBold,\nBold,  or  Black,  depending on how black the \"normal\" face\nof the font is within the design. Because there is no standard usage\nof names, the weight property values in CSS1 are given on a numerical\nscale in which the value '400' (or 'normal') corresponds to the\n\"normal\" text face for that family. The weight name associated with\nthat face will typically be  Book, Regular, Roman, Normal  or\nsometimes  Medium .\n The association of other weights within a family to the numerical\nweight values is intended only to preserve the ordering of darkness\nwithin that family. However, the following heuristics tell how the\nassignment is done in typical cases:\n If the font family already uses a numerical scale with nine values\n(like e.g.  OpenType  does), the font weights should be mapped\ndirectly.\n If there is both a face labeled  Medium  and one labeled\n Book, Regular, Roman  or  Normal,  then the\n Medium  is normally assigned to the '500'.\n The font labeled \"Bold\" will often correspond to the weight value '700'.\n If there are fewer then 9 weights in the family, the default\nalgorithm for filling the \"holes\" is as follows. If '500' is\nunassigned, it will be assigned the same font as '400'. If any of the\nvalues '600', '700', '800' or '900' remains unassigned, they are\nassigned to the same face as the next darker assigned keyword, if any,\nor the next lighter one otherwise. If any of '300', '200' or '100'\nremains unassigned, it is assigned to the next lighter assigned\nkeyword, if any, or the next darker otherwise.\n The following two examples illustrate the process. Assume four\nweights in the \"Example1\" family, from lightest to darkest:\n Regular, Medium, Bold, Heavy.  And assume six weights in the\n\"Example2\" family:  Book, Medium, Bold, Heavy, Black,\nExtraBlack.  Note how in the second example it has been decided\n not  to assign \"Example2 ExtraBlack\" to anything.\nAvailable faces       |  Assignments  |  Filling the holes\n----------------------+---------------+-------------------\n\"Example1 Regular\"    |  400          |  100, 200, 300\n\"Example1 Medium\"     |  500          |\n\"Example1 Bold\"       |  700          |  600\n\"Example1 Heavy\"      |  800          |  900\nAvailable faces       |  Assignments  |  Filling the holes\n----------------------+---------------+-------------------\n\"Example2 Book\"       |  400          |  100, 200, 300\n\"Example2 Medium\"     |  500          |\n\"Example2 Bold\"       |  700          |  600      \n\"Example2 Heavy\"      |  800          |\n\"Example2 Black\"      |  900          |\n\"Example2 ExtraBlack\" |  (none)       |\n Since the intent of the relative keywords 'bolder' and 'lighter' is\nto darken or lighten the face  within the family  and because a\nfamily may not have faces aligned with all the symbolic weight values,\nthe matching of 'bolder' is to the next darker face available on the\nclient within the family and the matching of 'lighter' is to the next\nlighter face within the family. To be precise, the meaning of the\nrelative keywords 'bolder' and 'lighter' is as follows:\n 'bolder' selects the next weight that is assigned to a font that\nis darker than the inherited one. If there is no such weight, it\nsimply results in the next darker numerical value (and the font\nremains unchanged), unless the inherited value was '900' in which case\nthe resulting weight is also '900'.\n 'lighter' is similar, but works in the opposite direction: it\nselects the next lighter keyword with a different font from the\ninherited one, unless there is no such font, in which case it selects\nthe next lighter numerical value (and keeps the font unchanged).\n There is no guarantee that there will be a darker face for each of\nthe 'font-weight' values; for example, some fonts may have only a\nnormal and a bold face, others may have eight different face weights.\nThere is no guarantee on how a UA will map font faces within a family\nto weight values. The only guarantee is that a face of a given value\nwill be no less dark than the faces of lighter values.\n 5.2.6 \u00a0\u00a0 'font-size' \n Value:  <absolute-size> | <relative-size> |\n  <length> | <percentage> \n Initial:  medium \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  relative to parent element's font size \n <absolute-size> \n An <absolute-size> keyword is an index to a table of font\nsizes computed and kept by the UA. Possible values are: [ xx-small |\nx-small | small | medium | large | x-large | xx-large ]. On a computer\nscreen a scaling factor of 1.5 is suggested between adjacent indexes;\nif the 'medium' font is 10pt, the 'large' font could be 15pt.\nDifferent media may need different scaling factors. Also, the UA\nshould take the quality and availability of fonts into account when\ncomputing the table. The table may be different from one font family\nto another.\n <relative-size> \n A <relative-size> keyword is interpreted relative to the\ntable of font sizes and the font size of the parent element. Possible\nvalues are: [ larger | smaller ]. For example, if the parent element\nhas a font size of 'medium', a value of 'larger' will make the font\nsize of the current element be 'large'. If the parent element's size\nis not close to a table entry, the UA is free to interpolate between\ntable entries or round off to the closest one. The UA may have to\nextrapolate table values if the numerical value goes beyond the\nkeywords.\n Length and percentage values should not take the font size table\ninto account when calculating the font size of the element.\n Negative values are not allowed.\n On all other properties, 'em' and 'ex' length values refer to the\nfont size of the current element. On the 'font-size' property, these\nlength units refer to the font size of the parent element.\n Note that an application may reinterpret an explicit size,\ndepending on the context. E.g., inside a VR scene a font may get a\ndifferent size because of perspective distortion.\n Examples:\nP { font-size: 12pt; }\nBLOCKQUOTE { font-size: larger }\nEM { font-size: 150% }\nEM { font-size: 1.5em }\n If the suggested scaling factor of 1.5 is used, the last three declarations\nare identical.\n 5.2.7 \u00a0\u00a0 'font' \n Value:  [ <font-style> || <font-variant> ||\n  <font-weight> ]? <font-size> [ / <line-height> ]?\n  <font-family> \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  allowed on <font-size> and\n  <line-height> \n The 'font' property is a shorthand property for setting  'font-style'   'font-variant'   'font-weight'   'font-size' ,  'line-height'  and  'font-family'  at the same place in the style\nsheet. The syntax of this property is based on a traditional\ntypographical shorthand notation to set multiple properties related to\nfonts.\n For a definition of allowed and initial values, see the previously\ndefined properties. Properties for which no values are given are set\nto their initial value.\nP { font: 12pt/14pt sans-serif }\nP { font: 80% sans-serif }\nP { font: x-large/110% \"new century schoolbook\", serif }\nP { font: bold italic large Palatino, serif }\nP { font: normal small-caps 120%/120% fantasy }\n In the second rule, the font size percentage value ('80%') refers\nto the font size of the parent element. In the third rule, the line\nheight percentage refers to the font size of the element itself.\n In the first three rules above, the 'font-style', 'font-variant'\nand 'font-weight' are not explicitly mentioned, which means they are\nall three set to their initial value ('normal'). The fourth rule sets\nthe 'font-weight' to 'bold', the 'font-style' to 'italic' and\nimplicitly sets 'font-variant' to 'normal'.\n The fifth rule sets the 'font-variant' ('small-caps'), the\n'font-size' (120% of the parent's font), the 'line-height' (120% times\nthe font size) and the 'font-family' ('fantasy'). It follows that the\nkeyword 'normal' applies to the two remaining properties: 'font-style'\nand 'font-weight'.\n 5.3 \u00a0\u00a0 Color\nand background properties \n These properties describe the color (often called  foreground\ncolor ) and background of an element (i.e. the surface onto which\nthe content is rendered). One can set a background color and/or a\nbackground image. The position of the image, if/how it is repeated,\nand whether it is fixed or scrolled relative to the canvas can also be\nset.\n The 'color' property inherits normally. The background properties\ndo not inherit, but the parent element's background will shine through\nby default because of the initial 'transparent' value on\n'background-color'.\n 5.3.1 \u00a0\u00a0 'color' \n Value:  <color> \n Initial:  UA specific \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n This property describes the text color of an element (often\nreferred to as the  foreground  color). There are different\nways to specify red:\nEM { color: red }              /* natural language */\nEM { color: rgb(255,0,0) }     /* RGB range 0-255   */\n See  section 6.3  for a description of\npossible color values.\n 5.3.2 \u00a0\u00a0 'background-color' \n Value:  <color> | transparent \n Initial:  transparent \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property sets the background color of an element.\nH1 { background-color: #F00 }\n 5.3.3 \u00a0\u00a0\n'background-image' \n Value:  <url> | none \n Initial:  none \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property sets the background image of an element. When setting\na background image, one should also set a background color that will\nbe used when the image is unavailable. When the image is available, it\nis overlaid on top of the background color.\nBODY { background-image: url(marble.gif) }\nP { background-image: none }\n 5.3.4 \u00a0\u00a0 'background-repeat' \n Value:  repeat | repeat-x | repeat-y | no-repeat \n Initial:  repeat \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n If a background image is specified, the value of\n'background-repeat' determines how/if the image is repeated.\n A value of 'repeat' means that the image is repeated both\nhorizontally and vertically. The 'repeat-x' ('repeat-y') value makes\nthe image repeat horizontally (vertically), to create a single band of\nimages from one side to the other. With a value of 'no-repeat', the\nimage is not repeated.\nBODY { \n  background: red url(pendant.gif);\n  background-repeat: repeat-y;\n}\n In the example above, the image will only be repeated vertically.\n 5.3.5 \u00a0\u00a0 'background-attachment' \n Value:  scroll | fixed \n Initial:  scroll \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n If a background image is specified, the value of 'background-attachment'\ndetermines if it is fixed with regard to the canvas or if it scrolls along\nwith the content.\nBODY { \n  background: red url(pendant.gif);\n  background-repeat: repeat-y;\n  background-attachment: fixed;\n}\n CSS1 core:  UAs may treat 'fixed' as 'scroll'. However, it\nis recommended they interpret 'fixed' correctly, at least on the HTML\nand BODY elements, since there is no way for an author to provide an\nimage only for those browsers that support 'fixed'. (See  section 7 .)\n 5.3.6 \u00a0\u00a0\n'background-position' \n Value:  [<percentage> | <length>]{1,2} | [top | center\n  | bottom] || [left | center | right] \n Initial:  0% 0% \n Applies to:  block-level and replaced elements \n Inherited:  no \n Percentage values:  refer to the size of the element itself \n If a background image has been specified, the value of\n'background-position' specifies its initial position.\n With a value pair of '0% 0%', the upper left corner of the image is\nplaced in the upper left corner of the box that surrounds the content\nof the element (i.e., not the box that surrounds the padding, border\nor margin). A value pair of '100% 100%' places the lower right corner\nof the image in the lower right corner of the element. With a value\npair of '14% 84%', the point 14% across and 84% down the image is to\nbe placed at the point 14% across and 84% down the element.\n With a value pair of '2cm 2cm', the upper left corner of the image\nis placed 2cm to the right and 2cm below the upper left corner of the\nelement.\n If only one percentage or length value is given, it sets the\nhorizontal position only, the vertical position will be 50%. If two\nvalues are given, the horizontal position comes first. Combinations of\nlength and percentage values are allowed, e.g. '50% 2cm'. Negative\npositions are allowed.\n One can also use keyword values to indicate the position of the\nbackground image. Keywords cannot be combined with percentage values,\nor length values. The possible combinations of keywords and their\ninterpretations are as follows:\n 'top left' and 'left top' both mean the same as '0% 0%'.\n 'top', 'top center' and 'center top' mean the same as '50% 0%'.\n 'right top' and 'top right' mean the same as '100% 0%'.\n 'left', 'left center' and 'center left' mean the same as '0% 50%'.\n 'center' and 'center center' mean the same as '50% 50%'.\n 'right', 'right center' and 'center right' mean the same as '100% 50%'.\n 'bottom left' and 'left bottom' mean the same as '0% 100%'.\n 'bottom', 'bottom center' and 'center bottom' mean the same as '50% 100%'.\n 'bottom right' and 'right bottom' mean the same as '100% 100%'.\n Examples :\nBODY { background: url(banner.jpeg) right top }    /* 100%   0% */\nBODY { background: url(banner.jpeg) top center }   /*  50%   0% */\nBODY { background: url(banner.jpeg) center }       /*  50%  50% */\nBODY { background: url(banner.jpeg) bottom }       /*  50% 100% */\n If the background image is fixed with regard to the canvas (see the\n'background-attachment' property above), the image is placed relative\nto the canvas instead of the element. E.g.:\nBODY { \n  background-image: url(logo.png);\n  background-attachment: fixed;\n  background-position: 100% 100%;\n} \n In the example above, the image is placed in the lower right corner\nof the canvas.\n 5.3.7 \u00a0\u00a0 'background' \n Value:  <background-color> || <background-image> ||\n  <background-repeat> || <background-attachment> ||\n  <background-position> \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  allowed on <background-position> \n The 'background' property is a shorthand property for setting the\nindividual background properties (i.e., 'background-color',\n'background-image', 'background-repeat', 'background-attachment' and\n'background-position') at the same place in the style sheet.\n Possible values on the 'background' properties are the set of all\npossible values on the individual properties.\nBODY { background: red }\nP { background: url(chess.png) gray 50% repeat fixed }\n The 'background' property always sets all the individual background\nproperties. In the first rule of the above example, only a value for\n'background-color' has been given and the other individual properties\nare set to their initial value. In the second rule, all individual\nproperties have been specified.\n 5.4 \u00a0\u00a0 Text\nproperties \n 5.4.1 \u00a0\u00a0 'word-spacing' \n Value:  normal | <length>  \n Initial:  normal \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n The length unit indicates an addition to the default space between\nwords. Values can be negative, but there may be\nimplementation-specific limits. The UA is free to select the exact\nspacing algorithm. The word spacing may also be influenced by\njustification (which is a value of the  'text-align'  property).\n H1 { word-spacing: 1em } \n Here, the word-spacing between each word in 'H1' elements would be\nincreased by '1em'.\n CSS1 core:  UAs may interpret any value of 'word-spacing'\nas 'normal'. (See  section 7 .)\n 5.4.2 \u00a0\u00a0\n'letter-spacing' \n Value:  normal | <length>  \n Initial:  normal \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n The length unit indicates an addition to the default space between\ncharacters. Values can be negative, but there may be\nimplementation-specific limits. The UA is free to select the exact\nspacing algorithm. The letter spacing may also be influenced by\njustification (which is a value of the 'align' property).\nBLOCKQUOTE { letter-spacing: 0.1em }\n Here, the letter-spacing between each character in 'BLOCKQUOTE'\nelements would be increased by '0.1em'.\n With a value of 'normal', the UAs may change the space between\nletters to justify text. This will not happen if 'letter-spacing' is\nexplicitly set to a <length> value:\nBLOCKQUOTE { letter-spacing: 0 }\nBLOCKQUOTE { letter-spacing: 0cm }\n When the resultant space between two letters is not the same as the\ndefault space, UAs should not use ligatures.\n CSS1 core:  UAs may interpret any value of 'letter-spacing'\nas 'normal'. (See  section 7 .)\n 5.4.3 \u00a0\u00a0\n'text-decoration' \n Value:  none | [ underline || overline || line-through || blink ] \n Initial:  none \n Applies to:  all elements \n Inherited:  no, but see clarification below \n Percentage values:  N/A \n This property describes decorations that are added to the text of\nan element. If the element has no text (e.g. the 'IMG' element in\nHTML) or is an empty element (e.g. '<EM></EM>'), this\nproperty has no effect. A value of 'blink' causes the text to blink.\n The color(s) required for the text decoration should be derived\nfrom the 'color' property value.\n This property is not inherited, but elements should match their\nparent. E.g., if an element is underlined, the line should span the\nchild elements. The color of the underlining will remain the same even\nif descendant elements have different 'color' values.\nA:link, A:visited, A:active { text-decoration: underline }\n The example above would underline the text of all links (i.e., all\n'A' elements with a 'HREF' attribute).\n UAs must recognize the keyword 'blink', but are not required to\nsupport the blink effect.\n 5.4.4\n\u00a0\u00a0'vertical-align' \n Value:  baseline | sub | super | top | text-top | middle | bottom\n  | text-bottom | <percentage>  \n Initial:  baseline \n Applies to:  inline elements \n Inherited:  no \n Percentage values:  refer to the 'line-height' of the element\n  itself \n The property affects the vertical positioning of the element. One\nset of keywords is relative to the parent element:\n 'baseline'\n align the baseline of the element (or the bottom, if the element\ndoesn't have a baseline) with the baseline of the parent\n 'middle'\n align the vertical midpoint of the element (typically an image)\nwith the baseline plus half the x-height of the parent\n 'sub'\n subscript the element\n 'super'\n superscript the element\n 'text-top'\n align the top of the element with the top of the parent element's\nfont\n 'text-bottom'\n align the bottom of the element with the bottom of the parent\nelement's font\n Another set of properties are relative to the formatted line that\nthe element is a part of:\n 'top'\n align the top of the element with the tallest element on the line\n 'bottom'\n align the bottom of the element with the lowest element on the\nline\n Using the 'top' and 'bottom' alignment, unsolvable situations can\noccur where element dependencies form a loop.\n Percentage values refer to the value of the 'line-height' property\nof the element itself. They raise the baseline of the element (or the\nbottom, if it has no baseline) the specified amount above the baseline\nof the parent. Negative values are possible. E.g., a value of '-100%'\nwill lower the element so that the baseline of the element ends up\nwhere the baseline of the next line should have been. This allows\nprecise control over the vertical position of elements (such as images\nthat are used in place of letters) that don't have a baseline.\n It is expected that a future version of CSS will allow  <length>  as a value on\nthis property.\n 5.4.5 \u00a0\u00a0 'text-transform' \n Value:  capitalize | uppercase | lowercase | none \n Initial:  none \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  N/A \n 'capitalize'\n uppercases the first character of each word\n 'uppercase'\n uppercases all letters of the element\n 'lowercase'\n lowercases all letters of the element\n 'none'\n neutralizes inherited value.\n The actual transformation in each case is human language dependent.\nSee  [4]  for ways to find the language of an\nelement.\nH1 { text-transform: uppercase }\n The example above would put 'H1' elements in uppercase text.\n CSS1 core:  UAs may ignore 'text-transform' (i.e., treat it\nas 'none') for characters that are not from the Latin-1 repertoire and\nfor elements in languages for which the transformation is different\nfrom that specified by the case-conversion tables of Unicode [8].\n 5.4.6 \u00a0\u00a0 'text-align' \n Value:  left | right | center | justify \n Initial:  UA specific \n Applies to:  block-level elements \n Inherited:  yes \n Percentage values:  N/A \n This property describes how text is aligned within the element. The\nactual justification algorithm used is UA and human language\ndependent.\n Example:\nDIV.center { text-align: center }\n Since 'text-align' inherits, all block-level elements inside the\n'DIV' element with 'CLASS=center' will be centered. Note that\nalignments are relative to the width of the element, not the canvas.\nIf 'justify' is not supported, the UA will supply a replacement.\nTypically, this will be 'left' for western languages.\n CSS1 core:  UAs may treat 'justify' as 'left' or 'right',\ndepending on whether the element's default writing direction is\nleft-to-right or right-to-left, respectively.\n 5.4.7 \u00a0\u00a0 'text-indent' \n Value:  <length> | <percentage> \n Initial:  0 \n Applies to:  block-level elements \n Inherited:  yes \n Percentage values:  refer to parent element's width \n The property specifies the indentation that appears before the\nfirst formatted line. The value of 'text-indent' may be negative, but\nthere may be implementation-specific limits. An indentation is not\ninserted in the middle of an element that was broken by another (such\nas 'BR' in HTML).\n Example:\nP { text-indent: 3em }\n 5.4.8 \u00a0\u00a0 'line-height' \n Value:  normal | <number> | <length> |\n  <percentage> \n Initial:  normal \n Applies to:  all elements \n Inherited:  yes \n Percentage values:  relative to the font size of the element itself \n The property sets the distance between two adjacent lines'\nbaselines.\n When a numerical value is specified, the line height is given by\nthe font size of the current element multiplied with the numerical\nvalue. This differs from a percentage value in the way it inherits:\nwhen a numerical value is specified, child elements will inherit the\nfactor itself, not the resultant value (as is the case with  percentage  and other units).\n Negative values are not allowed.\n The three rules in the example below have the same resultant line\nheight:\nDIV { line-height: 1.2; font-size: 10pt }     /* number */\nDIV { line-height: 1.2em; font-size: 10pt }   /* length */\nDIV { line-height: 120%; font-size: 10pt }    /* percentage */\n A value of 'normal' sets the 'line-height' to a reasonable value\nfor the element's font. It is suggested that UAs set the 'normal'\nvalue to be a number in the range of 1.0 to 1.2.\n See the  section 4.4  for a description on how\n'line-height' influences the formatting of a block-level\nelement. \n 5.5 \u00a0\u00a0 Box properties \n The box properties set the size, circumference and position of the\nboxes that represent elements. See the  formatting model (section 4)  for examples\non how to use the box properties.\n The margin properties set the margin\nof an element.  The 'margin' property  sets the\nmargin  for all four sides while the other margin properties\nonly set their respective side.\n The padding properties describe how much space to insert between\nthe border and the content (e.g., text or image). The 'padding'\nproperty sets the padding for all four sides while the other padding\nproperties only set their respective side.\n The border properties set the borders of an element. Each element\nhas four borders, one on each side, that are defined by their width,\ncolor and style.\n The 'width' and 'height' properties set the size of the box, and\nthe 'float' and 'clear' properties can alter the position of elements.\n 5.5.1 \u00a0\u00a0 'margin-top' \n Value:  <length> | <percentage> | auto \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of the closest block-level ancestor \n This property sets the top margin of an element:\nH1 { margin-top: 2em }\n A negative value is allowed, but there may be\nimplementation-specific limits.\n 5.5.2 \u00a0\u00a0 'margin-right' \n Value:  <length> | <percentage> | auto \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the right margin of an element:\nH1 { margin-right: 12.3% }\n A negative value is allowed, but there may be\nimplementation-specific limits.\n 5.5.3 \u00a0\u00a0\n'margin-bottom' \n Value:  <length> | <percentage> | auto \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the bottom margin of an element:\nH1 { margin-bottom: 3px }\n A negative value is allowed, but there may be\nimplementation-specific limits.\n 5.5.4 \u00a0\u00a0 'margin-left' \n Value:  <length> | <percentage> | auto \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the left margin of an element:\nH1 { margin-left: 2em }\n A negative value is allowed, but there may be\nimplementation-specific limits.\n 5.5.5 \u00a0\u00a0 'margin' \n Value:  [ <length> | <percentage> | auto ]{1,4}  \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n The 'margin' property is a shorthand property for setting\n'margin-top', 'margin-right', 'margin-bottom' and 'margin-left' at the\nsame place in the style sheet.\n If four length values are specified they apply to top, right,\nbottom and left respectively. If there is only one value, it applies\nto all sides, if there are two or three, the missing values are taken\nfrom the opposite side.\nBODY { margin: 2em } /* all margins set to 2em */\nBODY { margin: 1em 2em } /* top & bottom = 1em, right & left = 2em */\nBODY { margin: 1em 2em 3em } /* top=1em, right=2em, bottom=3em, left=2em */\n The last rule of the example above is equivalent to the example\nbelow:\nBODY {\n  margin-top: 1em;\n  margin-right: 2em;\n  margin-bottom: 3em;\n  margin-left: 2em;        /* copied from opposite side (right) */\n}\n Negative margin values are allowed, but there may be\nimplementation-specific limits.\n 5.5.6 \u00a0\u00a0 'padding-top' \n Value:  <length> | <percentage> \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the top padding of an element.\nBLOCKQUOTE { padding-top: 0.3em }\n Padding values cannot be negative.\n 5.5.7 \u00a0\u00a0\n'padding-right' \n Value:  <length> | <percentage> \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the right padding of an element.\nBLOCKQUOTE { padding-right: 10px }\n Padding values cannot be negative.\n 5.5.8 \u00a0\u00a0 'padding-bottom' \n Value:  <length> | <percentage> \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the bottom padding of an element.\nBLOCKQUOTE { padding-bottom: 2em }\n Padding values cannot be negative.\n 5.5.9 \u00a0\u00a0 'padding-left' \n Value:  <length> | <percentage> \n Initial:  0 \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n This property sets the left padding of an element.\nBLOCKQUOTE { padding-left: 20% }\n Padding values cannot be negative.\n 5.5.10 \u00a0\u00a0 'padding' \n Value:  [ <length> | <percentage> ]{1,4}  \n Initial:   not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:   refer to width of closest block-level ancestor \n The 'padding' property is a shorthand property for setting\n'padding-top', 'padding-right', 'padding-bottom' and 'padding-left' at\nthe same place in the style sheet.\n If four values are specified they apply to top, right, bottom and\nleft respectively. If there is only one value, it applies to all\nsides, if there are two or three, the missing values are taken from\nthe opposite side.\n The surface of the padding area is set with the 'background'\nproperty:\nH1 { \n  background: white; \n  padding: 1em 2em;\n} \n The example above sets a '1em' padding vertically ('padding-top'\nand 'padding-bottom') and a '2em' padding horizontally\n('padding-right' and 'padding-left'). The 'em' unit is relative to the\nelement's font size: '1em' is equal to the size of the font in use.\n Padding values cannot be negative.\n 5.5.11 \u00a0\u00a0\n'border-top-width' \n Value:  thin | medium | thick | <length> \n Initial:  'medium' \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property sets the width of an element's top border. The width\nof the keyword values are UA dependent, but the following holds:\n'thin' <= 'medium' <= 'thick'.\n The keyword widths are constant throughout a document:\nH1 { border: solid thick red }\nP  { border: solid thick blue }\n In the example above, 'H1' and 'P' elements will have the same\nborder width regardless of font size. To achieve relative widths, the\n'em' unit can be used:\nH1 { border: solid 0.5em }\n Border widths cannot be negative.\n 5.5.12 \u00a0\u00a0\n'border-right-width' \n Value:  thin | medium | thick | <length> \n Initial:  'medium' \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property sets the width of an element's right border.\nOtherwise it is equivalent to the  'border-top-width' .\n 5.5.13 \u00a0\u00a0\n'border-bottom-width' \n Value:  thin | medium | thick | <length> \n Initial:  'medium' \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property sets the width of an element's bottom border.\nOtherwise it is equivalent to the  'border-top-width' .\n 5.5.14 \u00a0\u00a0\n'border-left-width' \n Value:  thin | medium | thick | <length> \n Initial:  'medium' \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property sets the width of an element's left border. Otherwise\nit is equivalent to the  'border-top-width' .\n 5.5.15 \u00a0\u00a0 'border-width' \n Value:  [thin | medium | thick | <length>]{1,4} \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property is a shorthand property for setting\n'border-width-top', 'border-width-right', 'border-width-bottom' and\n'border-width-left' at the same place in the style sheet.\n There can be from one to four values, with the following\ninterpretation:\n one value: all four border widths are set to that value\n two values: top and bottom border widths are set to the first\nvalue, right and left are set to the second\n three values: top is set to the first, right and left are set to\nthe second, bottom is set to the third\n four values: top, right, bottom and left, respectively\n In the examples below, the comments indicate the resulting widths\nof the top, right, bottom and left borders:\nH1 { border-width: thin }                   /* thin thin thin thin */\nH1 { border-width: thin thick }             /* thin thick thin thick */\nH1 { border-width: thin thick medium }      /* thin thick medium thin */\n H1 { border-width: thin thick medium thin } /* thin thick medium thin */ \n Border widths cannot be negative.\n 5.5.16 \u00a0\u00a0 'border-color' \n Value:  <color>{1,4} \n Initial:  the value of the 'color' property \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n The 'border-color' property sets the color of the four borders.\n'border-color' can have from one to four values, and the values are\nset on the different sides as for 'border-width' above.\n If no color value is specified, the value of the 'color' property\nof the element itself will take its place:\nP { \n  color: black; \n  background: white; \n  border: solid;\n}\n In the above example, the border will be a solid black line.\n 5.5.17 \u00a0\u00a0 'border-style' \n Value:  none | dotted | dashed | solid | double | groove | ridge\n  | inset | outset \n Initial:  none \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n The 'border-style' property sets the style of the four borders. It\ncan have from one to four values, and the values are set on the\ndifferent sides as for 'border-width' above.\n#xy34 { border-style: solid dotted }\n In the above example, the horizontal borders will be 'solid' and\nthe vertical borders will be 'dotted'.\n Since the initial value of the border styles is 'none', no borders\nwill be visible unless the border style is set.\n The border styles mean:\n none\n no border is drawn (regardless of the 'border-width' value)\n dotted\n the border is a dotted line drawn on top of the background of the element\n dashed\n the border is a dashed line drawn on top of the background of the element\n solid\n the border is a solid line\n double\n the border is a double line drawn on top of the background of the element.\nThe sum of the two single lines and the space between equals the\n<border-width> value.\n groove\n a 3D groove is drawn in colors based on the <color> value.\n ridge\n a 3D ridge is drawn in colors based on the <color> value.\n inset\n a 3D inset is drawn in colors based on the <color> value.\n outset\n a 3D outset is drawn in colors based on the <color> value.\n CSS1 core:  UAs may interpret all of 'dotted', 'dashed',\n'double', 'groove', 'ridge', 'inset' and 'outset' as 'solid'.\n 5.5.18 \u00a0\u00a0 'border-top' \n Value:  <border-top-width> || <border-style> ||\n  <color> \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This is a shorthand property for setting the width, style and color\nof an element's top border.\nH1 { border-bottom: thick solid red }\n The above rule will set the width, style and color of the border\nbelow the H1 element. Omitted values will be set to their initial\nvalues:\nH1 { border-bottom: thick solid }\n Since the color value is omitted in the example above, the border\ncolor will be the same as the 'color' value of the element itself.\n Note that while the 'border-style' property accepts up to four\nvalues, this property only accepts one style value.\n 5.5.19 \u00a0\u00a0 'border-right' \n Value:  <border-right-width> || <border-style> ||\n  <color> \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This is a shorthand property for setting the width, style and color\nof an element's right border. Otherwise it is equivalent to the  'border-top' .\n 5.5.20 \u00a0\u00a0 'border-bottom' \n Value:  <border-bottom-width> || <border-style> ||\n  <color> \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This is a shorthand property for setting the width, style and color\nof an element's bottom border. Otherwise it is equivalent to the  'border-top' .\n 5.5.21 \u00a0\u00a0 'border-left' \n Value:  <border-left-width> || <border-style> ||\n  <color> \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This is a shorthand property for setting the width, style and color\nof an element's left border. Otherwise it is equivalent to the  'border-top' .\n 5.5.22 \u00a0\u00a0 'border' \n Value:  <border-width> || <border-style> ||\n  <color>  \n Initial:  not defined for shorthand properties \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n The 'border' property is a shorthand property for setting the same\nwidth, color and style on all four borders of an element. For example,\nthe first rule below is equivalent to the set of four rules shown\nafter it:\nP { border: solid red }\nP {\n  border-top: solid red;\n  border-right: solid red;\n  border-bottom: solid red;\n  border-left: solid red\n}\n Unlike the shorthand 'margin' and 'padding' properties, the\n'border' property cannot set different values on the four borders. To\ndo so, one or more of the other border properties must be used.\n Since the properties to some extent have overlapping functionality,\nthe order in which the rules are specified becomes important. Consider\nthis example:\nBLOCKQUOTE {\n  border-color: red;\n  border-left: double\n  color: black;\n}\n In the above example, the color of the left border will be black,\nwhile the other borders are red. This is due to 'border-left' setting\nthe width, style and color. Since the color value is not specified on\nthe 'border-left' property, it will be taken from the 'color'\nproperty. The fact that the 'color' property is set after the\n'border-left' property is not relevant.\n Note that while the 'border-width' property accepts up to four\nlength values, this property only accepts one.\n 5.5.23 \u00a0\u00a0 'width' \n Value:  <length> | <percentage> | auto  \n Initial:  auto \n Applies to:  block-level and replaced elements \n Inherited:  no \n Percentage values:  refer to parent element's width \n This property can be applied to text elements, but it is most\nuseful with replaced elements such as images. The width is to be\nenforced by scaling the image if necessary. When scaling, the aspect\nratio of the image is preserved if the 'height' property is 'auto'.\n Example:\nIMG.icon { width: 100px }\n If the 'width' and 'height' of a replaced element are both 'auto',\nthese properties will be set to the intrinsic dimensions of the\nelement.\n Negative values are not allowed.\n See the  formatting model (section\n4)  for a description of the relationship between this property and\nthe margin and padding.\n 5.5.24 \u00a0\u00a0 'height' \n Value:  <length> | auto  \n Initial:  auto \n Applies to:  block-level and replaced elements \n Inherited:  no \n Percentage values:  N/A \n This property can be applied to text, but it is most useful with\nreplaced elements such as images. The height is to be enforced by\nscaling the image if necessary. When scaling, the aspect ratio of the\nimage is preserved if the 'width' property is 'auto'.\n Example:\nIMG.icon { height: 100px }\n If the 'width' and 'height' of a replaced element are both 'auto',\nthese properties will be set to the intrinsic dimensions of the\nelement.\n If applied to a textual element, the height can be enforced with\ne.g. a scrollbar.\n Negative values are not allowed.\n CSS1 core:  UAs may ignore the 'height' property (i.e.,\ntreat it as 'auto') if the element is not a replaced element.\n 5.5.25 \u00a0\u00a0 'float' \n Value:  left | right | none \n Initial:  none \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n With the value 'none', the element will be displayed where it\nappears in the text. With a value of 'left' ('right') the element will\nbe moved to the left  (right)  and\nthe text will wrap on the right (left) side of the element. With a\nvalue of 'left' or 'right', the element is treated as block-level\n(i.e. the 'display' property is ignored). See  section 4.1.4  for a full specification.\nIMG.icon { \n  float: left;\n  margin-left: 0;\n}\n The above example will place all IMG elements with 'CLASS=icon'\nalong the left side of the parent element.\n This property is most often used with inline images, but also\napplies to text elements.\n 5.5.26 \u00a0\u00a0 'clear' \n Value:  none | left | right | both \n Initial:  none \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property specifies if an element allows floating elements on\nits sides. More specifically, the value of this property lists the\nsides where floating elements are not accepted. With 'clear' set to\n'left', an element will be moved below any floating element on the\nleft side. With 'clear' set to 'none', floating elements are allowed\non all sides. Example:\nH1 { clear: left }\n 5.6 \u00a0\u00a0\nClassification properties \n These properties classify elements into categories more than they\nset specific visual parameters.\n The list-style properties describe how list items (i.e. elements\nwith a 'display' value of 'list-item') are formatted. The list-style\nproperties can be set on any element, and it will inherit normally\ndown the tree. However, they will only be have effect on elements with\na 'display' value of 'list-item'. In HTML this is typically the case\nfor the 'LI' element.\n 5.6.1 \u00a0\u00a0 'display' \n Value:  block | inline | list-item | none \n Initial:  block \n Applies to:  all elements \n Inherited:  no \n Percentage values:  N/A \n This property describes how/if an element is displayed on the\ncanvas (which may be on a printed page, a computer display etc.).\n An element with a 'display' value of 'block' opens a new box. The\nbox is positioned relative to adjacent boxes according to the CSS  formatting model . Typically, elements\nlike 'H1' and 'P' are of type 'block'. A value of 'list-item' is\nsimilar to 'block' except that a list-item marker is added. In HTML,\n'LI' will typically have this value.\n An element with a 'display' value of 'inline' results in a new\ninline box on the same line as the previous content. The box is\ndimensioned according to the formatted size of the content. If the\ncontent is text, it may span several lines, and there will be a box on\neach line. The margin, border and padding properties apply to 'inline'\nelements, but will not have any effect at the line breaks.\n A value of 'none' turns off the display of the element, including\nchildren elements and the surrounding box.\nP { display: block }\nEM { display: inline }\nLI { display: list-item }\nIMG { display: none }\n The last rule turns off the display of images.\n The initial value of 'display' is 'block', but a UA will typically\nhave default values for all HTML elements according to the suggested\nrendering of elements in the HTML specification  [2] .\n CSS1 core:  UAs may ignore 'display' and use only the UA's\ndefault values. (See  section 7 .)\n 5.6.2 \u00a0\u00a0 'white-space' \n Value:  normal | pre | nowrap \n Initial:  normal \n Applies to:  block-level elements \n Inherited:  yes \n Percentage values:  N/A \n This property declares how whitespace inside the element is\nhandled: the 'normal' way (where whitespace is collapsed), as 'pre'\n(which behaves like the 'PRE' element in HTML) or as 'nowrap' (where\nwrapping is done only through BR elements):\nPRE { white-space: pre }\nP   { white-space: normal }\n The initial value of 'white-space' is 'normal', but a UA will\ntypically have default values for all HTML elements according to the\nsuggested rendering of elements in the HTML specification  [2] .\n CSS1 core:  UAs may ignore the 'white-space' property in\nauthor's and reader's style sheets, and use the UA's default values\ninstead. (See  section 7 .)\n 5.6.3 \u00a0\u00a0\n'list-style-type' \n Value:  disc | circle | square | decimal | lower-roman | upper-roman\n  | lower-alpha | upper-alpha | none \n Initial:  disc \n Applies to:  elements with 'display' value 'list-item' \n Inherited:  yes \n Percentage values:  N/A \n This property is used to determine the appearance of the list-item\nmarker if 'list-style-image' is 'none' or if the image pointed to by\nthe URL cannot be displayed.\nOL { list-style-type: decimal }       /* 1 2 3 4 5 etc. */\nOL { list-style-type: lower-alpha }   /* a b c d e etc. */\nOL { list-style-type: lower-roman }   /* i ii iii iv v etc. */\n 5.6.4 \u00a0\u00a0 'list-style-image' \n Value:  <url> | none \n Initial:  none \n Applies to:  elements with 'display' value 'list-item' \n Inherited:  yes \n Percentage values:  N/A \n This property sets the image that will be used as the list-item\nmarker. When the image is available it will replace the marker set\nwith the 'list-style-type' marker.\nUL { list-style-image: url(http://png.com/ellipse.png) }\n 5.6.5 \u00a0\u00a0 'list-style-position' \n Value:  inside | outside \n Initial:  outside \n Applies to:  elements with 'display' value 'list-item' \n Inherited:  yes \n Percentage values:  N/A \n The value of 'list-style-position' determines how the list-item\nmarker is drawn with regard to the content. For a formatting example\nsee  section 4.1.3 .\n 5.6.6 \u00a0\u00a0 'list-style' \n Value:   [disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none] || [inside | outside] || [<url> | none] \n Initial:  not defined for shorthand properties \n Applies to:  elements with 'display' value 'list-item' \n Inherited:  yes \n Percentage values:  N/A \n The 'list-style' property is a shorthand notation for setting the\nthree properties 'list-style-type', 'list-style-image' and\n'list-style-position' at the same place in the style sheet.\nUL { list-style: upper-roman inside }\nUL UL { list-style: circle outside }\nLI.square { list-style: square }\n Setting 'list-style' directly on 'LI' elements can have unexpected\nresults. Consider:\n  <STYLE TYPE=\"text/css\">\n    OL.alpha LI  { list-style: lower-alpha }\n    UL LI        { list-style: disc }\n  </STYLE>\n  <BODY>\n    <OL CLASS=alpha>\n      <LI>level 1\n      <UL>\n         <LI>level 2\n      </UL>\n    </OL>\n  </BODY>\n Since the specificity (as defined in the  cascading order ) is higher for the first\nrule in the style sheet in the example above, it will override the\nsecond rule on all 'LI' elements and only 'lower-alpha' list styles\nwill be used. It is therefore recommended to set 'list-style' only on\nthe list type elements:\nOL.alpha  { list-style: lower-alpha }\nUL        { list-style: disc }\n In the above example, inheritance will transfer the 'list-style' values from\n'OL' and 'UL' elements to 'LI' elements.\n A URL value can be combined with any other value:\nUL { list-style: url(http://png.com/ellipse.png) disc }\n In the example above, the 'disc' will be used when the image is unavailable.\n 6 \u00a0\u00a0 Units \n 6.1 \u00a0\u00a0 Length units \n The format of a length value is an optional sign character ('+' or\n'-', with '+' being the default) immediately followed by a number\n(with or without a decimal point) immediately followed by a unit\nidentifier (a two-letter abbreviation). After a '0' number, the unit\nidentifier is optional.\n Some properties allow negative length units, but this may\ncomplicate the formatting model and there may be\nimplementation-specific limits. If a negative length value cannot be\nsupported, it should be clipped to the nearest value that can be\nsupported.\n There are two types of length units: relative and absolute.\nRelative units specify a length relative to another length property.\nStyle sheets that use relative units will more easily scale from one\nmedium to another (e.g. from a computer display to a laser printer).\n Percentage units  (described below) and\nkeyword values (e.g. 'x-large') offer similar advantages.\n These relative units are supported:\nH1 { margin: 0.5em }      /* ems, the height of the element's font */\nH1 { margin: 1ex }        /* x-height, ~ the height of the letter 'x' */\nP  { font-size: 12px }    /* pixels, relative to canvas */\n The relative units 'em' and 'ex' are relative to the font size of\nthe element itself. The only exception to this rule in CSS1 is the\n'font-size' property where 'em' and 'ex' values refer to the font size\nof the parent element.\n Pixel units, as used in the last rule, are relative to the\nresolution of the canvas, i.e. most often a computer display. If the\npixel density of the output device is very different from that of a\ntypical computer display, the UA should rescale pixel values. The\nsuggested  reference pixel  is the visual angle of one pixel on\na device with a pixel density of 90dpi and a distance from the reader\nof an arm's length. For a nominal arm's length of 28 inches, the\nvisual angle is about 0.0227 degrees.\n Child elements inherit the computed value, not the relative value:\nBODY {\n  font-size: 12pt;\n  text-indent: 3em;  /* i.e. 36pt */\n}\nH1 { font-size: 15pt }\n In the example above, the 'text-indent' value of 'H1' elements will be 36pt,\nnot 45pt.\n Absolute length units are only useful when the physical properties of the\noutput medium are known. These absolute units are supported:\nH1 { margin: 0.5in }      /* inches, 1in = 2.54cm */\nH2 { line-height: 3cm }   /* centimeters */\nH3 { word-spacing: 4mm }  /* millimeters */\nH4 { font-size: 12pt }    /* points, 1pt = 1/72 in */\nH4 { font-size: 1pc }     /* picas, 1pc = 12pt */\n In cases where the specified length cannot be supported, UAs should try to\napproximate. For all CSS1 properties, further computations and inheritance\nshould be based on the approximated value.\n 6.2 \u00a0\u00a0 Percentage units \n The format of a percentage value is an optional sign character ('+' or '-',\nwith '+' being the default) immediately followed by a number (with or without\na decimal point) immediately followed by '%'.\n Percentage values are always relative to another value, for example a length\nunit. Each property that allows percentage units also defines what value\nthe percentage value refer to. Most often this is the font size of the element\nitself:\nP { line-height: 120% }   /* 120% of the element's 'font-size' */\n In all inherited CSS1 properties, if the value is specified as a\npercentage, child elements inherit the resultant value, not the\npercentage value.\n 6.3 \u00a0\u00a0 Color units \n A color is a either a keyword or a numerical RGB specification.\n The suggested list of keyword color names is: aqua, black, blue,\nfuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver,\nteal, white, and yellow. These 16 colors are taken from the Windows\nVGA palette, and their RGB values are not defined in this\nspecification.\nBODY {color: black; background: white }\nH1 { color: maroon }\nH2 { color: olive }\n The RGB color model is being used in numerical color\nspecifications. These examples all specify the same color:\nEM { color: #f00 }              /* #rgb */\nEM { color: #ff0000 }           /* #rrggbb */\nEM { color: rgb(255,0,0) }      /* integer range 0 - 255 */\nEM { color: rgb(100%, 0%, 0%) } /* float range 0.0% - 100.0% */\n The format of an RGB value in hexadecimal notation is a '#'\nimmediately followed by either three or six hexadecimal characters.\nThe three-digit RGB notation (#rgb) is converted into six-digit form\n(#rrggbb) by replicating digits, not by adding zeros. For example,\n#fb0 expands to #ffbb00. This makes sure that white (#ffffff) can be\nspecified with the short notation (#fff) and removes any dependencies\non the color depth of the display.\n The format of an RGB value in the functional notation is 'rgb('\nfollowed by a comma-separated list of three numerical values (either\nthree integer values in the range of 0-255, or three percentage values\nin the range of 0.0% to 100.0%) followed by ')'. Whitespace characters\nare allowed around the numerical values.\n Values outside the numerical ranges should be clipped. The three\nrules below are therefore equivalent:\nEM { color: rgb(255,0,0) }       /* integer range 0 - 255 */\nEM { color: rgb(300,0,0) }       /* clipped to 255 */\nEM { color: rgb(110%, 0%, 0%) }  /* clipped to 100% */\n RGB colors are specified in the sRGB color space  [9] . UAs may vary in the fidelity with which they\nrepresent these colors, but use of sRGB provides an unambiguous and\nobjectively measurable definition of what the color should be, which\ncan be related to international standards  [10] .\n UAs may limit their efforts in displaying colors to performing a\ngamma-correction on them. sRGB specifies a display gamma of 2.2 under\nspecified viewing conditions. UAs adjust the colors given in CSS such\nthat, in combination with an output device's \"natural\" display gamma,\nan effective display gamma of 2.2 is produced.  Appendix D  gives further details of this. Note\nthat only colors specified in CSS are affected; e.g., images are\nexpected to carry their own color information.\n 6.4 \u00a0\u00a0 URL \n A Uniform Resource Locator (URL) is identified with a functional\nnotation:\nBODY { background: url(http://www.bg.com/pinkish.gif) }\n The format of a URL value is 'url(' followed by optional white space followed\nby an optional single quote (') or double quote (\") character followed by\nthe URL itself (as defined in  [11] ) followed by an optional\nsingle quote (') or double quote (\") character followed by optional whitespace\nfollowed by ')'. Quote characters that are not part of the URL itself must\nbe balanced.\n Parentheses, commas, whitespace characters, single quotes (') and double\nquotes (\") appearing in a URL must be escaped with a backslash: '\\(', '\\)',\n'\\,'.\n Partial URLs are interpreted relative to the source of the style sheet, not\nrelative to the document:\nBODY { background: url(yellow) }\n 7 \u00a0\u00a0 CSS1 conformance \n A User Agent that uses CSS1 to display documents conforms to the CSS1\nspecification if it:\n attempts to fetch all referenced style sheets and parse them\naccording to this specification\n sorts the declarations according to the cascading order\n implements the CSS1 functionality within the constraints of the\npresentation medium (see explanation below).\n A User Agent that outputs CSS1 style sheets conforms to the CSS1\nspecification if it:\n outputs valid CSS1 style sheets\n A User Agent that uses CSS1 to display documents  and \noutputs CSS1 style sheets conforms to the CSS1 specification if it\nmeets both sets of conformance requirements.\n A UA does not have to implement all the functionality of CSS1: it\ncan conform to CSS1 by implementing the core functionality. The core\nfunctionality consists of the whole CSS1 specification except those\nparts explicitly excluded. In the text, those parts are marked with\n\" CSS1 core: \" followed by an explanation of what functionality\nis outside the core functionality. The set of features excluded from\nthe core functionality is called CSS1 advanced features.\n This section only defines conformance to CSS1. There will be other\nlevels of CSS in the future that may require a UA to implement a\ndifferent set of features in order to conform.\n Examples of constraints of the presentation medium are: limited\nresources (fonts, color) and limited resolution (so margins may not be\naccurate). In these cases, the UA should approximate the style sheet\nvalues. Also, different user interface paradigms may have their own\nconstraints: a VR browser may rescale the document based on its\n\"distance\" from the user.\n UAs may offer readers additional choices on presentation. For\nexample, the UA may provide options for readers with visual\nimpairments or may provide the choice to disable blinking.\n Note that CSS1 does not specify all aspects of formatting. E.g.,\nthe UA is free to select a letter-spacing algorithm.\n This specification also recommends, but doesn't require, that a UA:\n allows the reader to specify personal style sheets\n allows individual style sheets to be turned on and off\n The above conformance rules describe only functionality, not user\ninterface.\n 7.1 \u00a0\u00a0\nForward-compatible parsing \n This specification defines CSS level 1. It is expected that higher\nlevels of CSS, with additional features, will be defined in the\nfuture. To ensure that UAs supporting just CSS1 will be able to read\nstyle sheets containing higher level features, this section defines\nwhat the UA does when it encounters certain constructs that are not\nvalid in CSS level 1.\n a declaration with an unknown property is ignored. For example, if\nthe style sheet is\n  H1 { color: red; rotation: 70deg }\n the UA will treat this as if the style sheet had been\nH1 { color: red; }\n illegal values,  or values with illegal parts , are treated\nas if the declaration weren't there at all:\nIMG { float: left }       /* CSS1 */\nIMG { float: left top }   /* \"top\" is not a value of 'float' */\nIMG { background: \"red\" } /* keywords cannot be quoted in CSS1 */\nIMG { border-width: 3 }   /* a unit must be specified for length values */\n In the above example, a CSS1 parser would honor the first rule and ignore\nthe rest, as if the style sheet had been\nIMG { float: left }\nIMG { }\nIMG { }\nIMG { }\n A UA conforming to a future CSS specification may accept one or\nmore of the other rules as well.\n an invalid at-keyword is ignored together with everything\nfollowing it, up to and including the next semicolon (;) or brace pair\n({...}), whichever comes first. For example, assume the style sheet\nreads:\n@three-dee {\n  @background-lighting {\n    azimuth: 30deg;\n    elevation: 190deg;\n  }\n  H1 { color: red }\n}\nH1 {color: blue}\n The '@three-dee' is illegal according to CSS1. Therefore, the whole at-rule\n(up to, and including, the third right curly brace) is ignored. The CSS1\nUA skips it, effectively reducing the style sheet to:\nH1 {color: blue}\n In more detail:\n A CSS style sheet, for any version of CSS, consists of a list of\n statements . There are two kinds of statements:\n at-rules  and  rulesets . There may be whitespace\n(spaces, tabs, newlines) around the statements.\nCSS style sheets are often embedded in HTML documents, and to be able\nto hide style sheets from older UAs, it is convenient put the style\nsheets inside HTML comments. The HTML comment tokens \"<!--\" and\n\"-->\" may occur before, after, and in between the statements. They\nmay have whitespace around them.\n At-rules start with an  at-keyword , which is an\nidentifier with an '@' at the start (for example: '@import', '@page').\nAn identifier consists of letters, digits, dashes and escaped\ncharacters (defined below).\n An at-rule consists of everything up to and including the next\nsemicolon (;) or the next block (defined shortly), whichever comes\nfirst. A CSS1 UA that encounters an at-rule that starts with an\nat-keyword other than '@import' ignores the whole of the at-rule and\ncontinue parsing after it. It also ignores any at-rule that starts\nwith '@import' if it doesn't occur at the top of the style sheet,\ni.e., if it occurs after any rules (even ignored rules). Here is an\nexample.\n Assume a CSS1 parser encounters this style sheet:\n@import \"subs.css\";\nH1 { color: blue }\n@import \"list.css\";\n The second '@import' is illegal according to CSS1. The CSS1 parser\nskips the whole at-rule, effectively reducing the style sheet to:\n@import \"subs.css\";\nH1 {color: blue}\n A  block  starts with a left curly brace ({) and ends with\nthe matching right curly brace (}). In between there may be any\ncharacters, except that parentheses (()), brackets ([]) and braces\n({}) always occur in matching pairs and may be nested. Single (') and\ndouble quotes (\") also occur in matching pairs, and characters between\nthem are parsed as a  string  (see the tokenizer in  appendix B  for a definition of string). Here is\nan example of a block; note that the right brace between the quotes\ndoes not match the opening brace of the block, and that the second\nsingle quote is an escaped character, and thus doesn't match the\nopening quote:\n{ causta: \"}\" + ({7} * '\\'') }\n A ruleset consists of a  selector-string  followed by a\n declaration-block . The selector-string consists of\neverything up to (but not including) the first left curly brace ({). A\nruleset that starts with a selector-string that is not valid CSS1 is\nskipped.\n For example, assume a CSS1 parser encounters this style sheet:\nH1 { color: blue }\nP[align], UL { color: red; font-size: large }\nP EM { font-weight: bold }\n The second line contains a selector-string that is illegal in CSS1. The CSS1\nUA will skip the ruleset, reducing the style sheet to:\nH1 { color: blue }\nP EM { font-weight: bold }\n A declaration-block starts with a left curly brace ({) and ends with the\nmatching right curly brace (}). In between there is a list of zero or more\n declarations,  separated by semicolons (;).\n A declaration consists of a  property , a colon (:) and a\n value . Around each of these there may be whitespace. A property\nis an identifier, as defined earlier. Any character may occur in the value,\nbut parentheses (()), brackets ([]), braces ({}), single quotes (') and double\nquotes (\") must come in matching pairs. Parentheses, brackets, and braces\nmay be nested. Inside the quotes, characters are parsed as a string.\n To ensure that new properties and new values for existing\nproperties can be added in the future, a UA must skip a declaration\nwith an invalid property name or an invalid value. Every CSS1 property\nhas its own syntactic and semantic restrictions on the values it\naccepts.\n For example, assume a CSS1 parser encounters this style sheet:\nH1 { color: red; font-style: 12pt }\nP { color: blue;  font-vendor: any;  font-variant: small-caps }\nEM EM { font-style: normal }\n The second declaration on the first line has an invalid value '12pt'. The\nsecond declaration on the second line contains an undefined property\n'font-vendor'. The CSS1 parser will skip these declarations, reducing the\nstyle sheet to:\nH1 { color: red; }\nP { color: blue;  font-variant: small-caps }\nEM EM { font-style: normal }\n Comments (see  section 1.7 ) can occur\nanywhere where whitespace can occur and are considered to be\nwhitespace. CSS1 defines additional places where whitespace can occur\n(such as inside values) and comments are allowed there as well.\n The following rules always hold:\n All CSS style sheets are case-insensitive, except for parts that\nare not under the control of CSS. I.e., in CSS1, font family names and\nURLs can be case-sensitive. Also, the case-sensitivity of the CLASS\nand ID attributes is under the control of HTML  [2] .\n in CSS1, selectors (element names, classes and IDs) can contain only the\ncharacters A-Z, 0-9, and Unicode characters 161-255, plus dash (-); they\ncannot start with a dash or a digit; they can also contain escaped characters\nand any Unicode character as a numeric code (see next item).\n the backslash followed by at most four hexadecimal digits (0..9A..F) stands\nfor the Unicode character with that number.\n any character except a hexadecimal digit can be escaped to remove its special meaning, by putting a backslash in front, Example: \"\\\"\" is a string consisting of one double quote.\n the two preceding items define  backslash-escapes . Backslash-escapes are always considered to be part of an identifier, except inside strings (i.e., \"\\7B\" is not punctuation, even though \"{\" is, and \"\\32\" is allowed at the start of a class name, even though \"2\" is not).\n Note: The CLASS attribute of HTML allows more characters in a class\nname than the set allowed for selectors above. In CSS1, these\ncharacters have to be escaped or written as Unicode numbers:\n\"B&W?\" can be written as \"B\\&W\\?\" or \"B\\26W\\3F\",  \"\u03ba\u03bf\u03c5\u03c1\u03bf\u03c2\" \n(Greek: \"kouros\") has to be written as \"\\3BA\\3BF\\3C5\\3C1\\3BF\\3C2\". It\nis expected that in later versions of CSS more characters can be\nentered directly.\n Appendix B  gives a grammar for CSS1.\n 8 \u00a0\u00a0 References \n [1]  W3C  resource page on web style\nsheets  (http://www.w3.org/Style)\n [2]   \n\"HTML 4.0 Specification\" , D. Raggett, A. Le Hors, I. Jacobs,\nDecember 1997.  Available at http://www.w3.org/TR/REC-html40/.\n [3]  T Berners-Lee, D Connolly: \"Hypertext Markup\nLanguage - 2.0\",  RFC\n1866 , MIT/W3C, November 1995. The specification is also available\nin  hypertext form  (http://www.w3.org/MarkUp/html-spec/html-spec_toc.html)\n [4]  F Yergeau, G Nicol, G Adams, M D\u00fcrst:\n\" Internationalization\nof the Hypertext Markup Language \"\n(ftp://ds.internic.net/rfc/rfc2070.txt).\n [5]   ISO 8879:1986 .\nInformation Processing - Text and Office Systems - Standard\nGeneralized Markup Language (SGML)\n [6]   ISO/IEC 10179:1996 \nInformation technology -- Processing languages -- Document Style\nSemantics and Specification Language (DSSSL). \n [7]   ISO/IEC 9899:1990 \nProgramming languages -- C.\n [8]  The Unicode Consortium, \"The Unicode\nStandard -- Worldwide Character Encoding -- Version 1.0\",\nAddison-Wesley, Volume 1, 1991, Volume 2, 1992.\n [9]   \"A Standard Default color\nSpace for the Internet\" , version 1.10, M. Stokes, M. Anderson,\nS. Chandrasekar, and R. Motta, 5 November 1996.\n [10]  CIE Publication 15.2-1986, \" Colorimetry, Second Edition \", ISBN 3-900-734-00-3\n(http://www.hike.te.chiba-u.ac.jp/ikeda/CIE/publ/abst/15-2-86.html)\n [11]  T Berners-Lee, L Masinter, M McCahill: \"Uniform\nResource Locators (URL)\",  RFC\n1738 , CERN, Xerox Corporation, University of Minnesota, December 1994\n [12]  \" PNG (Portable\nNetwork Graphics) Specification, Version 1.0 specification \"\n(http://www.w3.org/TR/REC-png-multi.html)\n [13]  Charles A. Poynton: \" Gamma\ncorrection on the Macintosh Platform \"\n(ftp://ftp.inforamp.net/pub/users/poynton/doc/Mac/Mac_gamma.pdf)\n [14]  International Color Consortium: \" ICC Profile Format\nSpecification, version 3.2 \", 1995\n(ftp://sgigate.sgi.com/pub/icc/ICC32.pdf)\n [15]  S C Johnson: \"YACC - Yet another compiler\ncompiler\", Technical Report, Murray Hill, 1975\n [16]  \"Flex: The Lexical Scanner Generator\",\nVersion 2.3.7, ISBN 1882114213\n 9 \u00a0\u00a0 Acknowledgments \n During the short life of HTML, there have been several  style sheet proposals  to\nwhich this proposal is indebted. Especially the proposals from Robert\nRaisch, Joe English and Pei Wei were influential.\n A number of people have contributed to the development of CSS1. We\nwould especially like to thank: Terry Allen, Murray Altheim, Glenn\nAdams, Walter Bender, Tim Berners-Lee, Yves Bertot, Scott Bigham,\nSteve Byrne, Robert Cailliau, James Clark, Daniel Connolly, Donna\nConverse, Adam Costello, Todd Fahrner, Todd Freter, Roy Fielding, Neil\nGalarneau, Wayne Gramlich, Phill Hallam-Baker, Philipp Hoschka, Kevin\nHughes, Scott Isaacs, Tony Jebson, William Johnston, Gilles Kahn,\nPhilippe Kaplan, Phil Karlton, Evan Kirshenbaum, Yves Lafon, Murray\nMaloney, Lou Montulli, Colas Nahaboo, Henrik Frystyk Nielsen, David\nPerrell, William Perry, Scott Preece, Paul Prescod, Liam Quin, Vincent\nQuint, Jenny Raggett, Thomas Reardon, C\u00e9cile Roisin, Michael\nSeaton, David Seibert, David Siegel, David Singer, Benjamin Sittler,\nJon Smirl, Charles Peyton Taylor, Ir\u00e8ne Vatton, Daniel\nVeillard, Mandira Virmani, Greg Watkins, Mike Wexler, Lydja Williams,\nBrian Wilson, Chris Wilson, Lauren Wood and Stephen Zilles.\n Three people deserve special mentioning: Dave Raggett (for his\nencouragement and work on HTML3), Chris Lilley (for his continued\ncontributions, especially in the area of colors and fonts) and Steven\nPemberton (for his organizational as well as creative skills).\n Appendix A: Sample style sheet for HTML\n2.0 \n (This appendix is informative, not normative)\n The following style sheet is written according to the suggested\nrendering in the HTML 2.0  [3]  specification. Some\nstyles, e.g. colors, have been added for completeness. It is suggested\nthat a style sheet similar to the one below is used as the UA default.\nBODY { \n  margin: 1em;\n  font-family: serif;\n  line-height: 1.1;\n  background: white;\n  color: black; \n}\nH1, H2, H3, H4, H5, H6, P, UL, OL, DIR, MENU, DIV, \nDT, DD, ADDRESS, BLOCKQUOTE, PRE, BR, HR,  FORM, DL  { \n  display: block }\nB, STRONG, I, EM, CITE, VAR, TT, CODE, KBD, SAMP, \nIMG, SPAN { display: inline }\nLI { display: list-item }\nH1, H2, H3, H4 { margin-top: 1em; margin-bottom: 1em }\nH5, H6 { margin-top: 1em }\nH1 { text-align: center }\nH1, H2, H4, H6 { font-weight: bold }\nH3, H5 { font-style: italic }\nH1 { font-size: xx-large }\nH2 { font-size: x-large }\nH3 { font-size: large }\nB, STRONG { font-weight: bolder }  /* relative to the parent */\nI, CITE, EM, VAR, ADDRESS, BLOCKQUOTE { font-style: italic }\nPRE, TT, CODE, KBD, SAMP { font-family: monospace }\nPRE { white-space: pre }\nADDRESS { margin-left: 3em }\nBLOCKQUOTE { margin-left: 3em; margin-right: 3em }\nUL, DIR { list-style: disc }\nOL { list-style: decimal }\nMENU { margin: 0 }              /* tight formatting */\nLI { margin-left: 3em }\nDT { margin-bottom: 0 }\nDD { margin-top: 0; margin-left: 3em }\nHR { border-top: solid }        /* 'border-bottom' could also have been used */\nA:link { color: blue }          /* unvisited link */\nA:visited { color: red }        /* visited links */\nA:active { color: lime }        /* active links */\n/* setting the anchor border around IMG elements\n   requires contextual selectors */\nA:link IMG { border: 2px solid blue }\nA:visited IMG { border: 2px solid red }\nA:active IMG { border: 2px solid lime }\n Appendix B: CSS1 grammar \n (This appendix is normative)\n The minimal CSS (i.e., any version of CSS) grammar that all\nimplementations need to support is defined in  section 7 . The grammar below defines a\nmuch smaller language, a language that defines the syntax of CSS1.\n It is in some sense, however, still a superset of CSS1: there are\nadditional semantic constraints not expressed in this grammar. A\nconforming UA must also adhere to the forward-compatible parsing rules\n(section 7.1), the property and value notation (section 5) and the\nunit notation (section 6). In addition, HTML imposes restrictions,\ne.g., on the possible values of the CLASS attribute.\n The grammar below is LL(1) (but note that most UA's should not use\nit directly, since it doesn't express the parsing conventions, only\nthe CSS1 syntax). The format of the productions is optimized for human\nconsumption and some shorthand notation beyond yacc  [15]  is used:\n*  : 0 or more\n+  : 1 or more\n?  : 0 or 1\n|  : separates alternatives\n[] : grouping \n The productions are:\nstylesheet\n : [CDO|CDC]* [ import [CDO|CDC]* ]* [ ruleset [CDO|CDC]* ]*\n ;\nimport\n : IMPORT_SYM [STRING|URL] ';'\t\t/* E.g., @import url(fun.css); */\n ;\nunary_operator\n : '-' | '+'\n ;\noperator\n : '/' | ',' | /* empty */\n ;\nproperty\n : IDENT\n ;\nruleset\n : selector [ ',' selector ]*\n   '{' declaration [ ';' declaration ]* '}'\n ;\nselector\n : simple_selector+ [ pseudo_element | solitary_pseudo_element ]?\n | solitary_pseudo_element\n ;\n\t/* An \"id\" is an ID that is attached to an element type\n\t** on its left, as in: P#p007\n\t** A \"solitary_id\" is an ID that is not so attached,\n\t** as in: #p007\n\t** Analogously for classes and pseudo-classes.\n\t*/\nsimple_selector\n : element_name id? class? pseudo_class?\t/* eg: H1.subject */\n | solitary_id class? pseudo_class?\t\t/* eg: #xyz33 */\n | solitary_class pseudo_class?\t\t\t/* eg: .author */\n | solitary_pseudo_class\t\t\t/* eg: :link */\n ;\nelement_name\n : IDENT\n ;\npseudo_class\t\t\t\t\t/* as in:  A:link */\n : LINK_PSCLASS_AFTER_IDENT\n | VISITED_PSCLASS_AFTER_IDENT\n | ACTIVE_PSCLASS_AFTER_IDENT\n ;\nsolitary_pseudo_class\t\t\t\t/* as in:  :link */\n : LINK_PSCLASS\n | VISITED_PSCLASS\n | ACTIVE_PSCLASS\n ;\nclass\t\t\t\t\t\t/* as in:  P.note */\n : CLASS_AFTER_IDENT\n ;\nsolitary_class\t\t\t\t\t/* as in:  .note */\n : CLASS\n ;\npseudo_element\t\t\t\t\t/* as in:  P:first-line */\n : FIRST_LETTER_AFTER_IDENT\n | FIRST_LINE_AFTER_IDENT\n ;\nsolitary_pseudo_element\t\t\t\t/* as in:  :first-line */\n : FIRST_LETTER\n | FIRST_LINE\n ;\n\t/* There is a constraint on the id and solitary_id that the\n\t** part after the \"#\" must be a valid HTML ID value;\n\t** e.g., \"#x77\" is OK, but \"#77\" is not.\n\t*/\nid\n : HASH_AFTER_IDENT\n ;\nsolitary_id\n : HASH\n ;\ndeclaration\n : property ':' expr prio? \n | /* empty */\t\t\t\t/* Prevents syntax errors... */\n ;\nprio\n : IMPORTANT_SYM\t \t\t/* !important */\n ;\nexpr\n : term [ operator term ]*\n ;\nterm\n : unary_operator?\n   [ NUMBER | STRING | PERCENTAGE | LENGTH | EMS | EXS\n   | IDENT | hexcolor | URL | RGB ]\n ;\n\t/* There is a constraint on the color that it must\n\t** have either 3 or 6 hex-digits (i.e., [0-9a-fA-F])\n\t** after the \"#\"; e.g., \"#000\" is OK, but \"#abcd\" is not.\n\t*/\nhexcolor\n : HASH | HASH_AFTER_IDENT\n ;\n The following is the tokenizer, written in flex  [16]  notation. Note that this assumes an 8-bit\nimplementation of flex. The tokenizer is case-insensitive (flex\ncommand line option -i).\nunicode\t\t\\\\[0-9a-f]{1,4}\nlatin1\t\t[\u00a1-\u00ff]\nescape\t\t{unicode}|\\\\[ -~\u00a1-\u00ff]\nstringchar\t{escape}|{latin1}|[ !#$%&(-~]\nnmstrt\t\t[a-z]|{latin1}|{escape}\nnmchar\t\t[-a-z0-9]|{latin1}|{escape}\nident\t\t{nmstrt}{nmchar}*\nname\t\t{nmchar}+\nd\t\t[0-9]\nnotnm\t\t[^-a-z0-9\\\\]|{latin1}\nw\t\t[ \\t\\n]*\nnum\t\t{d}+|{d}*\\.{d}+\nstring\t\t\\\"({stringchar}|\\')*\\\"|\\'({stringchar}|\\\")*\\'\n%x COMMENT\n%s AFTER_IDENT\n%%\n\"/*\"\t\t\t\t{BEGIN(COMMENT);}\n<COMMENT>\"*/\"\t\t\t{BEGIN(0);}\n<COMMENT>\\n\t\t\t{/* ignore */}\n<COMMENT>.\t\t\t{/* ignore */}\n@import\t\t\t\t{BEGIN(0); return IMPORT_SYM;}\n\"!\"{w}important\t\t\t{BEGIN(0); return IMPORTANT_SYM;}\n{ident}\t\t\t\t{BEGIN(AFTER_IDENT); return IDENT;}\n{string}\t\t\t{BEGIN(0); return STRING;}\n{num}\t\t\t\t{BEGIN(0); return NUMBER;}\n{num}\"%\"\t\t\t{BEGIN(0); return PERCENTAGE;}\n{num}pt/{notnm}\t\t\t{BEGIN(0); return LENGTH;}\n{num}mm/{notnm}\t\t\t{BEGIN(0); return LENGTH;}\n{num}cm/{notnm}\t\t\t{BEGIN(0); return LENGTH;}\n{num}pc/{notnm}\t\t\t{BEGIN(0); return LENGTH;}\n{num}in/{notnm}\t\t\t{BEGIN(0); return LENGTH;}\n{num}px/{notnm}\t\t\t{BEGIN(0); return LENGTH;}\n{num}em/{notnm}\t\t\t{BEGIN(0); return EMS;}\n{num}ex/{notnm}\t\t\t{BEGIN(0); return EXS;}\n<AFTER_IDENT>\":\"link\t\t{return LINK_PSCLASS_AFTER_IDENT;}\n<AFTER_IDENT>\":\"visited\t{return VISITED_PSCLASS_AFTER_IDENT;}\n<AFTER_IDENT>\":\"active\t{return ACTIVE_PSCLASS_AFTER_IDENT;}\n<AFTER_IDENT>\":\"first-line\t{return FIRST_LINE_AFTER_IDENT;}\n<AFTER_IDENT>\":\"first-letter\t{return FIRST_LETTER_AFTER_IDENT;}\n<AFTER_IDENT>\"#\"{name}\t\t{return HASH_AFTER_IDENT;}\n<AFTER_IDENT>\".\"{name}\t\t{return CLASS_AFTER_IDENT;}\n\":\"link\t\t\t\t{BEGIN(AFTER_IDENT); return LINK_PSCLASS;}\n\":\"visited\t\t\t{BEGIN(AFTER_IDENT); return VISITED_PSCLASS;}\n\":\"active\t\t\t{BEGIN(AFTER_IDENT); return ACTIVE_PSCLASS;}\n\":\"first-line\t\t\t{BEGIN(AFTER_IDENT); return FIRST_LINE;}\n\":\"first-letter\t\t\t{BEGIN(AFTER_IDENT); return FIRST_LETTER;}\n\"#\"{name}\t\t\t{BEGIN(AFTER_IDENT); return HASH;}\n\".\"{name}\t\t\t{BEGIN(AFTER_IDENT); return CLASS;}\nurl\\({w}{string}{w}\\)\t\t\t\t\t|\nurl\\({w}([^ \\n\\'\\\")]|\\\\\\ |\\\\\\'|\\\\\\\"|\\\\\\))+{w}\\)\t\t{BEGIN(0); return URL;}\nrgb\\({w}{num}%?{w}\\,{w}{num}%?{w}\\,{w}{num}%?{w}\\)\t{BEGIN(0); return RGB;}\n[-/+{};,#:]\t\t\t{BEGIN(0); return *yytext;}\n[ \\t]+\t\t\t\t{BEGIN(0); /* ignore whitespace */}\n\\n\t\t\t\t{BEGIN(0); /* ignore whitespace */}\n\\<\\!\\-\\-\t\t\t{BEGIN(0); return CDO;}\n\\-\\-\\>\t\t\t\t{BEGIN(0); return CDC;}\n.\t\t\t\t{fprintf(stderr, \"%d: Illegal character (%d)\\n\",\n\t\t\t\t lineno, *yytext);}\n Appendix C: Encoding \n (This appendix is informative, not normative)\n HTML documents may contain any of the about 30,000 different\ncharacters defined by Unicode. Many documents only need a few hundred.\nMany fonts also only contain just a few hundred glyphs. In combination\nwith  section 5.2 , this appendix\nexplains how the characters in the document and the glyphs in a font\nare matched.\n Character encoding \n The content of an HTML document is a sequence of\n characters  and markup. To send it \"over the wire\", it is\nencoded as a sequence of bytes, using one of several possible\n encodings . The HTML document has to be decoded to find the\ncharacters. For example, in Western Europe it is customary to use the\nbyte 224 for an a-with-grave-accent (\u00e0), but in Hebrew, it is\nmore common to use 224 for an Aleph. In Japanese, the meaning of a\nbyte usually depends on the bytes that preceded it. In some encodings,\none character is encoded as two (or more) bytes.\n The UA knows how to decode the bytes by looking at the \"charset\"\nparameter in the HTTP header. Typical encodings (charset values) are\n\"ASCII\" (for English), \"ISO-8859-1\" (for Western Europe), \"ISO-8859-8\"\n(for Hebrew), \"Shift-JIS\" (for Japanese).\n HTML  [2] [4] , allows some\n30,000 different characters, namely those defined by Unicode. Not many\ndocuments will use that many different characters, and choosing the\nright encoding will usually ensure that the document only needs one\nbyte per character. Occasional characters outside the encoded range\ncan still be entered as numerical character references: '&#928;'\nwill always mean the Greek uppercase Pi, no matter what encoding was\nused. Note that this entails that UAs have to be prepared for any\nUnicode character, even if they only handle a few encodings.\n Font encoding \n A font doesn't contain  characters , it contains pictures of\ncharacters, known as  glyphs . The glyphs, in the form of\noutlines or bitmaps, constitute a particular representation of a\ncharacter. Either explicitly or implicitly, each font has a table\nassociated with it, the  font encoding table , that tells for\neach glyph what character it is a representation for. In Type 1 fonts,\nthe table is referred to as an  encoding vector .\n In fact, many fonts contain several glyphs for the same character.\nWhich of those glyphs should be used depends either on the rules of\nthe language, or on the preference of the designer.\n In Arabic, for example, all letters have four different shapes,\ndepending on whether the letter is used at the start of a word, in the\nmiddle, at the end, or in isolation. It is the same character in all\ncases, and thus there is only one character in the HTML document, but\nwhen printed, it looks differently each time.\n There are also fonts that leave it to the graphic designer to choose from\namong various alternative shapes provided. Unfortunately, CSS1 doesn't yet\nprovide the means to select those alternatives. Currently, it is always the\ndefault shape that is chosen from such fonts.\n Font sets \n To deal with the problem that a single font may not be enough to display\nall the characters in a document, or even a single element, CSS1 allows the\nuse of  font sets .\n A font set in CSS1 is a list of fonts, all of the same style and size, that\nare tried in sequence to see if they contain a glyph for a certain character.\nAn element that contains English text mixed with mathematical symbols may\nneed a font set of two fonts, one containing letters and digits, the other\ncontaining mathematical symbols. See  section 5.2 \nfor a detailed description of the selection mechanism for font sets.\n Here is an example of a font set suitable for a text that is expected to\ncontain text with Latin characters, Japanese characters, and mathematical\nsymbols:\nBODY { font-family: Baskerville, Mincho, Symbol, serif }\n The characters available in the Baskerville font (a font with only Latin\ncharacters) will be taken from that font, Japanese will be taken from Mincho,\nand the mathematical symbols will come from Symbol. Any other characters\nwill (hopefully) come from the generic font family 'serif'. The 'serif' font\nfamily will also be used if one or more of the other fonts is unavailable.\n Appendix D: Gamma correction \n (This appendix is informative, not normative)\n See the  Gamma\nTutorial  in the PNG specification  [12]  if you aren't\nalready familiar with gamma issues.\n In the computation, UAs displaying on a CRT may assume an ideal CRT\nand ignore any effects on apparent gamma caused by dithering. That\nmeans the minimal handling they need to do on current platforms is:\n      PC using MS-Windows\n      none\n      Unix using X11\n      none\n      Mac using QuickDraw\n      apply gamma 1.39  [13]  (ColorSync-savvy\n      applications may simply pass the sRGB ICC profile  [14]  to ColorSync to perform correct color\n      correction)\n      SGI using X\n      apply the gamma value from\n       /etc/config/system.glGammaVal  (the default\n      value being 1.70; applications running on Irix 6.2 or above may\n      simply pass the sRGB ICC profile to the color management system)\n      NeXT using NeXTStep\n      apply gamma 2.22\n \"Applying gamma\" means that each of the three R, G and B must be\nconverted to R'=R gamma , G'=G gamma ,\n B'=B gamma , before handing to the OS.\n This may rapidly be done by building a 256-element lookup table\nonce per browser invocation thus:\nfor i := 0 to 255 do\n  raw := i / 255;\n  corr := pow (raw, gamma);\n  table[i] := trunc (0.5 + corr * 255.0)\nend\n which then avoids any need to do transcendental math per color\nattribute, far less per pixel.\n Appendix E: The applicability and extensibility of CSS1 \n (This appendix is informative, not normative)\n The goal of the work on CSS1 has been to create a simple style\nsheet mechanism for HTML documents. The current specification is a\nbalance between the simplicity needed to realize style sheets on the\nweb, and pressure from authors for richer visual control. CSS1 offers:\n      visual markup replacement: HTML extensions, e.g. \"CENTER\",\n      \"FONT\" and \"SPACER\", are easily replaced with CSS1 style sheets.\n      nicer markup: instead of using \"FONT\" elements to achieve the\n      popular small-caps style, one declaration in the style sheet is\n      sufficient. Compare the visual markup:\n<H1>H<FONT SIZE=-1>EADLINE</FONT></H1>\n  with the style sheet:\nH1 { font-style: small-caps }\n<H1>Headline</H1>\n      various integration levels: CSS1 style rules can be fetched from\n      external style sheets, included in the 'STYLE' element, or put\n      into 'STYLE' attributes. The latter option offers easy\n      transition from HTML extensions.\n      new effects: some new visual effects have been added to offer\n      users new toys. The typographical pseudo-elements and the extra\n      values on the background property fall into this category.\n      scalability: CSS1 will be useful on equipment ranging from text\n      terminals to high-resolution color workstations. Authors can\n      write one style sheet and be reasonably sure that the intended\n      style will come across in the best possible manner.\n CSS1 does not offer:\n      per pixel control: CSS1 values simplicity over level of control,\n      and although the combination of background images and styled\n      HTML is powerful, control to the pixel level is not possible.\n      author control: the author cannot enforce the use of a certain\n      sheet, only suggest\n      a layout language: CSS1 does not offer multiple columns with\n      text-flow, overlapping frames etc.\n      a rich query language on the parse tree: CSS1 can only look for\n      ancestor elements in the parse tree, while other style sheet\n      languages (e.g. DSSSL  [6] ) offers a full\n      query language.\n We expect to see extensions of CSS in several directions:\n      paper: better support for printing HTML documents\n      support for non-visual media: work is in the process to add a\n      list of properties and corresponding values to support speech\n      and braille output\n      color names: the currently supported list may be extended\n      fonts: more precise font specification systems are expected to\n      complement existing CSS1 font properties.\n      values, properties: we expect vendors to propose extensions to\n      the CSS1 set of values and properties. Extending in this\n      direction is trivial for the specification, but interoperability\n      between different UAs is a concern\n      layout language: support for two-dimensional layout in the\n      tradition of desktop publishing packages.\n      other DTDs: CSS1 has some HTML-specific parts (e.g. the special\n      status of the 'CLASS' and 'ID' attributes) but should easily be\n      extended to apply to other DTDs as well.\n We do not expect CSS to evolve into:\n      a programming language\n Appendix F: Changes from the 17 December 1996 version \n (This appendix is informative, not normative)\n This document is a revised version of the CSS1 Recommendation which\nwas first published 17 December 1996 and the list below describes all\nchanges. By selecting the alternate style sheet \"errata\", all changes\nwill appear highlighted. \n We would like to thank Komachi Yushi, Steve Byrne, Liam Quinn,\nKazuteru Okahashi, Susan Lesch, and Tantek \u00c7elik for their help\nin preparing this revised edition.\n Spelling and typographic mistakes \n typo1  [section 1.1] The sentence:\n  As as result, old UAs will ignore the 'STYLE' element, but its content\n  will be treated as part of the document body, and rendered as such.\n has been changed to:\n  As a result, old UAs will ignore the 'STYLE' element, but its content\n  will be treated as part of the document body, and rendered as such.\n typo2  [section 1.6] The sentence:\n  The second selector matches matches all 'H1' elements that have an\n  ancestor of class 'reddish'.\n has been changed to:\n  The second selector matches all 'H1' elements that have an ancestor of\n  class 'reddish'.\n typo3  [section 2.1] The sentence:\n  E.g., a style sheet can legally specify that the 'font-size' of an\n  'active' link should be larger that a 'visited' link, but the UA is\n  not required to dynamically reformat the document when the reader\n  selects the 'visited' link.\n has been changed to:\n  E.g., a style sheet can legally specify that the 'font-size' of an\n  'active' link should be larger than a 'visited' link, but the UA is\n  not required to dynamically reformat the document when the reader\n  selects the 'visited' link.\n typo4 ,  typo5  [section 2.3-2.4] A trailing quote mark has been added to 'vertical-align'.\n typo6  [section 4] A missing right parenthesis has been added.\n typo7  [section 4.1] A missing comma has been added.\n typo8  [section 4.1.2] The text:\n  \"If more than one of the three is 'auto', and one of them is\n  'width', than the others...\"\n has been changed to:\n  \"If more than one of the three is 'auto', and one of them is\n  'width', then the others...\"\n typo9  [section 5.3.6] The\nword \"Examples\" has been capitalized.\n typo10  [section 5.4.4] An\nentity gone astray has been corrected (from \"<length&t;\" to\n\"<length>\").\n typo11  [section 5.5] The text:\n  The margin properties properties set the margin of an element.\n has been changed to:\n  The margin properties set the margin of an element.\n typo12  [section 5.5.25]\nSuperfluous quote marks have been removed.\n Errors \n error1  [section 2.3] A\npreviously invalid declaration ( font-style: small-caps )\nhas been replaced by a valid one.\n error2  [section 4] This sentence:\nCSS1 assumes a simple box-oriented formatting model where each element\nresults in one or more rectangular boxes.\n has been replaced with:\nCSS1 assumes a simple box-oriented formatting model where each\nformatted element results in one or more rectangular boxes.\n error3  [section 4.1] In this sentence:\nThe top is the top of the object including any padding, border and\nmargin; it is only defined for inline and floating elements, not for\nnon-floating block-level elements.\n the word \"object\" has been replaced with \"element\" to use\nconsistent terminology.\n error4  [section 4.1.3]\nThe alignment of the list items has been corrected.\n error5  [section 4.1.4]\nThere is only one P element in the example, and this sentence:\n  Note that the margin of the 'P' elements enclose the floating 'IMG' element.\n has therefore been corrected to:\n  Note that the margin of the 'P' element enclose the floating 'IMG' element.\n error6 ,  error7  [section 4.5] The\nwindow size can only influence one axis of the canvas, either the\nwidth or the height.\n error8  [section 5.4.1]\nThe text inside the parenthesis now refers to a CSS1 property.\n error9  [section 5.4.1]\nTo correspond with the following paragraph, the example has been\ncorrected.\n error10  [section 5.4.8]\nThe section \"The height of lines\" is now correctly identified as\nsection 4.4, not 4.7.\n error11  [section 5.5] This sentence:\nThe 'margin' property sets the border for all four sides while the\nother margin properties only set their respective side.\n has been corrected to:\nThe 'margin' property sets the margin for all four sides while the\nother margin properties only set their respective side.\n error12 ,  error13 ,  error14 ,  error15 ,  error16 ,  error17 ,  error18 ,  error19 ,  error20 ,  error22  [section 5.5.1-5.5.10] Percentage values refer to width of the closest block-level ancestor, not the parent element (which can be inline) as previously stated.\n error21  [section 5.5.10]\nShorthand properties don't have initial values, and the previously\nspecified '0' has therefore been corrected.\n error23  [section 5.5.15]\nThe last rule in the example previously contained an illegal value ('none').\n error24  [section 5.6.6] The value\nspecification on the 'list-style' property had been corrected, but\nthere are no syntactic or semantic changes.\n error25  [section 7.1] The numeric character\nreferences used to encode the Greek word \"kouros\" have been corrected.\n error26  [Appendix A]\nThese element types have been added to the list of selectors\nattached to the 'display: block' declaration: FORM DL.\n error27 [Appendix B] A dead link to section 7 has been fixed.\n error28  [Appendix D]\nThis text:\n \"Applying gamma\" means that each of the three\nR, G and B must be converted to R'=R gamma ,\nG'=G gamma , G'=B gamma , before handing to the\nOS. \n has been changed to:\n \"Applying gamma\" means that each of the three\nR, G and B must be converted to R'=R gamma ,\nG'=G gamma , B'=B gamma , before handing to the\nOS. \n Structure and Organization \n Appendix F, which lists all changes since the 17 December 1996\nversion has been added.\n A paragraph in the status section has been added to inform readers\nthat this is a revised version.\n The style sheet has changed.\n The reference to a future HTML specification with support for\nstyle sheets has been updated to reference  HTML 4.0 .\n URLs in the References have been updated, and dead links have been\nremoved.\n The underlying HTML markup has been revised."}