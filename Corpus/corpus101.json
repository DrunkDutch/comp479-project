{"url": "http://www.w3.org/TR/WAI-WEBCONTENT-TECHS/", "content": "Techniques for Web Content Accessibility Guidelines 1.0 \n [ contents ] \u00a0 [ Core Techniques ] \u00a0 [ HTML Techniques ] \u00a0 [ CSS Techniques ] \u00a0 \n Techniques for Web Content Accessibility Guidelines 1.0 \n W3C Note 6 November 2000 \n This version: \nhttp://www.w3.org/TR/2000/NOTE-WCAG10-TECHS-20001106/ \n ( plain text ,  \nPostScript ,  PDF ,  \ngzip tar file of HTML ,  zip archive of\nHTML ) \n Latest version: \nhttp://www.w3.org/TR/WCAG10-TECHS/   \n Previous version: \nhttp://www.w3.org/TR/2000/NOTE-WCAG10-TECHS-20000920/ \n Editors: \n Wendy Chisholm,  W3C ; \n Gregg Vanderheiden,  Trace R & D\nCenter , University of Wisconsin -- Madison; \n Ian Jacobs,  W3C \n Copyright \n\u00a91999 - 2000  W3C \u00ae  ( MIT ,  \nINRIA ,  Keio ), All Rights\nReserved. W3C  \nliability ,  \ntrademark ,  document\nuse  and  software\nlicensing  rules apply. \n Abstract \n This document is the gateway to a series of related documents that provide\ntechniques for satisfying the requirements defined in \"Web Content\nAccessibility Guidelines 1.0\"  [WCAG10] . This series includes: \n \"Techniques for Web Content Accessibility Guidelines 1.0\" , the\ncurrent document, which is the gateway to the other documents. \n \"Core Techniques for Web Content Accessibility Guidelines 1.0\" \n( [WCAG10-CORE-TECHNIQUES] ),\nwhich discusses the accessibility themes and general techniques that apply\nacross technologies (e.g.,  validation ,\ntesting, etc.). \n \"HTML Techniques for Web Content Accessibility Guidelines 1.0\" \n( [WCAG10-HTML-TECHNIQUES] ),\nwhich provides examples and strategies for authoring accessible Hypertext\nMarkup Language ( HTML ) content. \n \"CSS Techniques for Web Content Accessibility Guidelines 1.0\" \n( [WCAG10-CSS-TECHNIQUES] ),\nwhich provides examples and strategies to help authors write Cascading Style\nSheets ( CSS ) as part of\naccessible content design. \n Status of this document \n This version has been published to correct some broken links in the previous\nversion. \n The 6 November 2000 version of this document is a Note in a series of Notes\nproduced and endorsed by the  Web Content\nAccessibility Guidelines Working Group . This Note has not been reviewed or\nendorsed by W3C Members. The series of documents supersedes the  5 May 1999 W3C\nNote \"Techniques for Web Content Accessibility Guidelines 1.0\" . That single\ndocument has been divided into technology-specific documents that may evolve\nindependently. Smaller technology-specific documents also allow authors to\nfocus on a particular technology. \n While the \"Web Content Accessibility Guidelines 1.0\" Recommendation  [WCAG10]  is a\nstable document, this series of companion documents is expected to evolve as\ntechnologies change and content developers discover more effective techniques\nfor designing accessible Web sites and pages. In the near future, the Working\nGroup intends to incorporate techniques for the Synchronized Multimedia\nIntegration Language ( SMIL )  [SMIL]  described in\n\"Accessibility Features of SMIL\" ( [SMIL-ACCESS] ) and techniques\nfor Scalable Vector Graphics ( SVG )  [SVG]  described in \"Accessibility\nFeatures of SVG\" ( [SVG-ACCESS] ). The Working\nGroup also intends to incorporate techniques for non-W3C technologies such as\nECMAScript,  PDF  and\nFlash. \n The  \nhistory of changes to the series of documents  as well as the  list of open and closed\nissues  are available. Readers are encouraged to comment on the document and\npropose resolutions to current issues. Please send detailed comments on this\ndocument to the Working Group at  \nw3c-wai-gl@w3.org ;  public archives  are\navailable. \n The English version of this document is the only normative version. However,\nfor translations in other languages see  \n\"http://www.w3.org/WAI/GL/WAI-WEBCONTENT-TRANSLATIONS\" . \n The list of known errors in this document is available at  \"Errata in Web Content\nAccessibility Guidelines .\" Please report errors in this document to  wai-wcag-editor@w3.org . \n The  Web Accessibility Initiative ( WAI )  of the World Wide Web\nConsortium ( W3C ) makes\navailable a variety of  resources on\nWeb accessibility . WAI Accessibility Guidelines are produced as part of the\n WAI Technical Activity .\nThe goals of the WCAG WG are described in  the charter . \n A list of  current W3C Recommendations and\nother technical documents  is available. \n Table of Contents \n Abstract \n Status of this document \n 1 How this Document is Organized \n 1.1 Priorities \n 2 Techniques for Web Content\nAccessibility Guidelines \n 1. Provide equivalent alternatives to auditory and visual\ncontent. \n 2. Don't rely on color alone. \n 3. Use markup and style sheets and do so properly. \n 4. Clarify natural language usage \n 5. Create tables that transform\ngracefully. \n 6.\nEnsure that pages featuring new technologies transform gracefully. \n 7. Ensure user control of time-sensitive\ncontent changes. \n 8. Ensure direct accessibility of\nembedded user interfaces. \n 9. Design for device-independence. \n 10. Use interim solutions. \n 11. Use W3C technologies and\nguidelines. \n 12.\nProvide context and orientation information. \n 13. Provide clear navigation mechanisms. \n 14. Ensure that documents are clear and simple. \n 3 Glossary \n 4 References \n 5 Resources \n 5.1 Other Guidelines \n 5.2 User agents and other\ntools \n 6 Acknowledgments \n 1  How this Document is\nOrganized \n Section 2 of this document reproduces the guidelines and checkpoints of the\n\"Web Content Accessibility Guidelines 1.0\"  [WCAG10] . Each guideline\nincludes: \n The guideline number. \n The statement of the guideline. \n A list of checkpoint definitions. Checkpoints are ordered according to\ntheir  priority , e.g., Priority 1 before Priority\n2. \n Each checkpoint definition includes: \n The checkpoint number. \n The statement of the checkpoint. \n The priority of the checkpoint. \n A link back to the definition of the checkpoint in \"Web Content\nAccessibility Guidelines 1.0\"  [WCAG10] . Definitions may also\ninclude informative notes, examples, cross references, and commentary to help\nreaders understand the scope of the checkpoint. \n Each checkpoint is followed by one or more links to techniques in the\nfollowing documents: \n \"Core Techniques for Web Content Accessibility Guidelines 1.0\" \n( [WCAG10-CORE-TECHNIQUES] ),\nwhich discusses the accessibility themes and general techniques that apply\nacross technologies. \n \"HTML Techniques for Web Content Accessibility Guidelines 1.0\" \n( [WCAG10-HTML-TECHNIQUES] ),\nwhich provides examples and strategies for authoring accessible Hypertext\nMarkup Language ( HTML ) content. \n \"CSS Techniques for Web Content Accessibility Guidelines 1.0\" \n( [WCAG10-CSS-TECHNIQUES] ),\nwhich provides examples and strategies to help authors write Cascading Style\nSheets ( CSS ) as part of\naccessible content design. \n 1.1  Priorities \n Each checkpoint has a priority level assigned by the Working Group based on\nthe checkpoint's impact on accessibility. \n [Priority\u00a01] \n A Web content developer  must  satisfy this checkpoint.\nOtherwise, one or more groups will find it impossible to access information in\nthe document. Satisfying this checkpoint is a basic requirement for some groups\nto be able to use Web documents. \n [Priority\u00a02] \n A Web content developer  should  satisfy this checkpoint.\nOtherwise, one or more groups will find it difficult to access information in\nthe document. Satisfying this checkpoint will remove significant barriers to\naccessing Web documents. \n [Priority\u00a03] \n A Web content developer  may  address this checkpoint.\nOtherwise, one or more groups will find it somewhat difficult to access\ninformation in the document. Satisfying this checkpoint will improve access to\nWeb documents. \n Some checkpoints specify a priority level that may change under certain\n(indicated) conditions.  \n 2  Techniques for Web Content\nAccessibility Guidelines \n Guideline 1.  Provide equivalent alternatives to auditory and\nvisual content. \n Checkpoints: \n 1.1  Provide a text equivalent for every\nnon-text element (e.g., via \"alt\", \"longdesc\", or in element content).  This\nincludes : images, graphical representations of text (including symbols),\nimage map regions, animations (e.g., animated GIFs), applets and programmatic\nobjects,  \nASCII  art, frames, scripts, images used as list bullets, spacers,\ngraphical buttons, sounds (played with or without user interaction),\nstand-alone audio files, audio tracks of video, and video.  [Priority\u00a01]  ( Checkpoint\n1.1 ) \n Core Techniques:  Text\nequivalents \n HTML Techniques:  Images used as\nbullets \n HTML Techniques:  Text for images\nused as links \n HTML Techniques:  Short text\nequivalents for images (\"alt-text\") \n HTML Techniques:  Long\ndescriptions of images \n HTML Techniques:  Text\nequivalents for client-side image maps \n HTML Techniques:  Text and\nnon-text equivalents for applets and programmatic objects \n HTML Techniques:  Text\nequivalents for multimedia \n HTML Techniques:  Describing\nframe relationships \n HTML Techniques:  Writing for browsers\nthat do not support FRAME \n HTML Techniques:  \nGraphical buttons \n HTML Techniques:  Alternative\npresentation of scripts \n1.2  Provide redundant text links for each active region of a\nserver-side image map.  [Priority\u00a01]  ( Checkpoint\n1.2 ) \n Refer also to  checkpoint 1.5  and  checkpoint 9.1 . \n Core Techniques:  Text\nequivalents \n HTML Techniques:  Server-side image\nmaps \n1.3   Until user\nagents  can automatically read aloud the text equivalent of a visual track,\nprovide an auditory description of the important information of the visual\ntrack of a multimedia presentation.  \n[Priority\u00a01]  ( Checkpoint\n1.3 ) \n Core Techniques:  Visual\ninformation and motion \n1.4  For any time-based multimedia presentation (e.g., a movie or\nanimation), synchronize equivalent alternatives (e.g., captions or auditory\ndescriptions of the visual track) with the presentation.  [Priority\u00a01]  ( Checkpoint\n1.4 ) \n Core Techniques:  Audio\ninformation \n HTML Techniques:  Directly\naccessible applets \n1.5   Until user\nagents  render text equivalents for client-side image map links, provide\nredundant text links for each active region of a client-side image map.  [Priority\u00a03]  ( Checkpoint\n1.5 ) \n Refer also to  checkpoint 1.2  and  checkpoint 9.1 . \n Core Techniques:  Text\nequivalents \n HTML Techniques:  \nRedundant text links for client-side image maps \n Guideline 2.  Don't rely\non color alone. \n Checkpoints: \n 2.1  Ensure that all information conveyed\nwith color is also available without color, for example from context or markup.\n [Priority\u00a01]  ( Checkpoint\n2.1 ) \n Core Techniques:  Structure vs.\nPresentation \n CSS Techniques:  \nEnsuring information is not in color alone \n 2.2  Ensure that foreground and background\ncolor combinations provide sufficient contrast when viewed by someone having\ncolor deficits or when viewed on a black and white screen. [Priority\u00a02 for\nimages, Priority\u00a03 for text]. ( Checkpoint\n2.2 ) \n HTML Techniques:  Color in\nimages \n CSS Techniques:  Color\nContrast \n Guideline 3.  Use markup and style sheets and do so\nproperly. \n Checkpoints: \n 3.1  When an appropriate markup language\nexists, use markup rather than images to convey information.  [Priority\u00a02]  ( Checkpoint\n3.1 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  Markup and style\nsheets rather than images: The example of math \n CSS Techniques:  \nGenerated content \n 3.2  Create documents that validate to\npublished formal grammars.  [Priority\u00a02]  ( Checkpoint\n3.2 ) \n HTML Techniques:  \nThe !DOCTYPE statement \n 3.3  Use style sheets to control layout and\npresentation.  [Priority\u00a02]  ( Checkpoint\n3.3 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  Emphasis \n CSS Techniques:  Text instead of\nimages \n CSS Techniques:  Text\nformatting and position \n CSS Techniques:  Layout,\npositioning, layering, and alignment \n 3.4  Use relative rather than absolute\nunits in markup language attribute values and style sheet property values.\n [Priority\u00a02]  ( Checkpoint\n3.4 ) \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  Sizing\nframes with relative units \n CSS Techniques:  \nUnits of measure \n 3.5  Use header elements to convey\ndocument structure and use them according to specification.  [Priority\u00a02]  ( Checkpoint\n3.5 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  Section\nheadings \n 3.6  Mark up lists and list items\nproperly.  [Priority\u00a02]  ( Checkpoint\n3.6 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  \nLists \n CSS Techniques:  \nProviding contextual clues in HTML lists \n 3.7  Mark up quotations. Do not use quotation\nmarkup for formatting effects such as indentation.  \n[Priority\u00a02]  ( Checkpoint 3.7 ) \n HTML Techniques:  Quotations \n Guideline 4.  Clarify natural language usage \n Checkpoints: \n 4.1  Clearly identify changes in the\nnatural language of a document's text and any  text equivalents  (e.g.,\ncaptions).  [Priority\u00a01]  ( Checkpoint\n4.1 ) \n HTML Techniques:  Identifying\nchanges in language \n 4.2  Specify the expansion of each\nabbreviation or acronym in a document where it first occurs.  [Priority\u00a03]  ( Checkpoint\n4.2 ) \n HTML Techniques:  Acronyms and\nabbreviations \n 4.3  Identify the primary natural language\nof a document.  [Priority\u00a03]  ( Checkpoint\n4.3 ) \n HTML Techniques:  \nIdentifying the primary language \n Guideline 5.  Create tables that transform gracefully. \n Checkpoints: \n 5.1  For data tables, identify row and\ncolumn headers.  [Priority\u00a01]  ( Checkpoint\n5.1 ) \n HTML Techniques:  \nIdentifying rows and column information \n 5.2  For data tables that have two or\nmore logical levels of row or column headers, use markup to associate data\ncells and header cells.  [Priority\u00a01]  ( Checkpoint\n5.2 ) \n HTML Techniques:  \nIdentifying rows and column information \n5.3  Do not use tables for layout unless the table makes sense when\nlinearized. Otherwise, if the table does not make sense, provide an alternative\nequivalent (which may be a  \nlinearized version ).  [Priority\u00a02]  ( Checkpoint\n5.3 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  Tables for\nlayout \n CSS Techniques:  Layout,\npositioning, layering, and alignment \n 5.4  If a table is used for layout, do not\nuse any structural markup for the purpose of visual formatting.  [Priority\u00a02]  ( Checkpoint\n5.4 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  Tables for\nlayout \n 5.5  Provide summaries for tables.  [Priority\u00a03]  ( Checkpoint\n5.5 ) \n HTML Techniques:  Providing\nsummary information \n 5.6  Provide abbreviations for header\nlabels.  [Priority\u00a03]  ( Checkpoint\n5.6 ) \n HTML Techniques:  Providing\nsummary information \n Refer also to checkpoint\n10.3 . \n Guideline 6.  Ensure that pages featuring new technologies\ntransform gracefully. \n Checkpoints: \n 6.1  Organize documents so they may be\nread without style sheets. For example, when an HTML document is rendered\nwithout associated style sheets, it must still be possible to read the\ndocument.  [Priority\u00a01]  ( Checkpoint\n6.1 ) \n CSS Techniques:  \nGenerated content \n CSS Techniques:  Rules and\nborders \n CSS Techniques:  Using\nstyle sheet positioning and markup to transform gracefully \n 6.2  Ensure that equivalents for dynamic\ncontent are updated when the dynamic content changes.  \n[Priority\u00a01]  ( Checkpoint\n6.2 ) \n HTML Techniques:  Text and\nnon-text equivalents for applets and programmatic objects \n HTML Techniques:  Frame\nsources \n HTML Techniques:  Alternative\npresentation of scripts \n 6.3  Ensure that pages are usable when scripts,\napplets, or other programmatic objects are turned off or not supported. If this\nis not possible, provide equivalent information on an alternative accessible\npage.  [Priority\u00a01]  ( Checkpoint 6.3 ) \n HTML Techniques:  Text and\nnon-text equivalents for applets and programmatic objects \n HTML Techniques:  \nDirectly accessible scripts \n6.4  For scripts and applets, ensure that event handlers are input\ndevice-independent.  [Priority\u00a02]  ( Checkpoint\n6.4 ) \n Core Techniques:  Structure vs.\nPresentation \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  \nDirectly accessible scripts \n 6.5  Ensure that dynamic content is\naccessible or provide an alternative presentation or page.  [Priority\u00a02]  ( Checkpoint\n6.5 ) \n Core Techniques:  Alternative\npages \n Core Techniques:  Audio\ninformation \n HTML Techniques:  The LINK\nelement and alternative documents \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  Writing for browsers\nthat do not support FRAME \n HTML Techniques:  Graceful\ntransformation of scripts \n Refer also to checkpoint\n11.4 . \n Guideline 7.  \nEnsure user control of time-sensitive content changes. \n Checkpoints: \n 7.1   Until user agents  allow users\nto control flickering, avoid causing the screen to flicker.  [Priority\u00a01]  ( Checkpoint\n7.1 ) \n Core Techniques:  \nScreen flicker \n Core Techniques:  Visual\ninformation and motion \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  Scripts that\ncause flickering \n 7.2   Until user agents  allow users\nto control blinking, avoid causing content to blink (i.e., change presentation\nat a regular rate, such as turning on and off).  \n[Priority\u00a02]  ( Checkpoint\n7.2 ) \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  \nScripts that cause movement and blinking \n CSS Techniques:  Text style\neffects \n 7.3   Until user agents  allow users\nto freeze moving content, avoid movement in pages.  \n[Priority\u00a02]  ( Checkpoint\n7.3 ) \n Core Techniques:  Visual\ninformation and motion \n HTML Techniques:  Animated\nimages \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  \nScripts that cause movement and blinking \n CSS Techniques:  Creating movement\nwith style sheets and scripts \n 7.4   Until user agents  provide the\nability to stop the refresh, do not create periodically auto-refreshing pages.\n [Priority\u00a02]  ( Checkpoint\n7.4 ) \n Core Techniques:  Automatic page\nrefresh \n HTML Techniques:  The META\nelement \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  Page updates and\nnew windows \n 7.5   Until user agents  provide the\nability to stop auto-redirect, do not use markup to redirect pages\nautomatically. Instead, configure the server to perform redirects.  [Priority\u00a02]  ( Checkpoint\n7.5 ) \n Core Techniques:  Automatic page\nrefresh \n HTML Techniques:  The META\nelement \n HTML Techniques:  Page updates and\nnew windows \n Note.  The BLINK and MARQUEE elements are not defined in any\nW3C HTML specification and should not be used.  Refer also to guideline 11 . \n Guideline 8.  Ensure direct accessibility of embedded user\ninterfaces. \n Checkpoint: \n 8.1 \nMake programmatic elements such as scripts and applets directly accessible or\ncompatible with assistive technologies [ Priority\u00a01  if functionality is  important  and not presented\nelsewhere, otherwise Priority\u00a02.] ( Checkpoint\n8.1 ) \n Refer also\nto guideline 6 . \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  \nDirectly accessible scripts \n Guideline 9.  Design for device-independence. \n Checkpoints: \n 9.1  Provide client-side image maps\ninstead of server-side image maps except where the regions cannot be defined\nwith an available geometric shape.  \n[Priority\u00a01]  ( Checkpoint\n9.1 ) \n Refer also to  checkpoint 1.1 ,  checkpoint 1.2 , and  checkpoint 1.5 . \n HTML Techniques:  \nClient-side versus server-side image maps \n 9.2  Ensure that any element that has\nits own interface can be operated in a device-independent manner.  [Priority\u00a02]  ( Checkpoint\n9.2 ) \n Refer to the definition of  device\nindependence . \n Refer also to\nguideline 8 . \n Core Techniques:  Alternative\npages \n HTML Techniques:  Directly\naccessible applets \n9.3  For scripts, specify logical event handlers rather than\ndevice-dependent event handlers.  \n[Priority\u00a02]  ( Checkpoint\n9.3 ) \n Core Techniques:  Alternative\npages \n HTML Techniques:  \nDirectly accessible scripts \n 9.4  Create a logical tab order through links,\nform controls, and objects.  [Priority\u00a03] \n( Checkpoint\n9.4 ) \n Core Techniques:  Alternative\npages \n HTML Techniques:  Keyboard\naccess \n HTML Techniques:  Keyboard\naccess to forms \n 9.5  Provide keyboard shortcuts to\nimportant links (including those in  \nclient-side image maps ), form controls, and groups of form controls.  [Priority\u00a03]  ( Checkpoint\n9.5 ) \n Core Techniques:  Alternative\npages \n HTML Techniques:  Keyboard\naccess \n HTML Techniques:  Keyboard\naccess to forms \n Guideline 10.  Use interim solutions. \n Checkpoints: \n 10.1   Until user agents  allow users\nto turn off spawned windows, do not cause pop-ups or other windows to appear\nand do not change the current window without informing the user.  [Priority\u00a02]  ( Checkpoint\n10.1 ) \n HTML Techniques:  Anchors and\ntargets \n HTML Techniques:  Directly\naccessible applets \n HTML Techniques:  Using FRAME\ntargets \n HTML Techniques:  Page updates and\nnew windows \n 10.2 \n Until user agents  support\nexplicit associations between labels and form controls, for all form controls\nwith implicitly associated labels, ensure that the label is properly\npositioned.  [Priority\u00a02]  ( Checkpoint\n10.2 ) \n HTML Techniques:  Labeling form\ncontrols \n 10.3   Until user agents  (including\nassistive technologies) render side-by-side text correctly, provide a linear\ntext alternative (on the current page or some other) for  all  tables\nthat lay out text in parallel, word-wrapped columns.  \n[Priority\u00a03]  ( Checkpoint\n10.3 ) \n HTML Techniques:  Linearizing\ntables \n 10.4   Until user agents  handle\nempty controls correctly, include default, place-holding characters in edit\nboxes and text areas.  [Priority\u00a03]  ( Checkpoint\n10.4 ) \n HTML Techniques:  Techniques for\nspecific controls \n 10.5   Until user agents  (including\nassistive technologies) render adjacent links distinctly, include non-link,\nprintable characters (surrounded by spaces) between adjacent links.  [Priority\u00a03]  ( Checkpoint\n10.5 ) \n HTML Techniques:  Grouping and\nbypassing links \n Guideline 11.  Use\nW3C technologies and guidelines. \n Checkpoints: \n 11.1  Use W3C technologies when they are\navailable and appropriate for a task and use the latest versions when\nsupported.  [Priority\u00a02]  ( Checkpoint\n11.1 ) \n Core Techniques:  Technologies\nReviewed for Accessibility \n 11.2  Avoid deprecated features of W3C\ntechnologies.  [Priority\u00a02]  ( Checkpoint\n11.2 ) \n HTML Techniques:  Index of HTML\nelements and attributes \n CSS Techniques:  User override of\nstyles \n CSS Techniques:  Fonts \n 11.3 \nProvide information so that users may receive documents according to their\npreferences (e.g., language, content type, etc.)  \n[Priority\u00a03]  ( Checkpoint\n11.3 ) \n Note.  Use content negotiation where\npossible. \n Core Techniques:  Content\nnegotiation \n CSS Techniques:  Aural\nCascading Style Sheets \n CSS Techniques:  Access\nto alternative representations of content \n CSS Techniques:  \nMedia types \n 11.4  If,  after best efforts , you cannot create\nan  accessible  page, provide a\nlink to an alternative page that uses W3C technologies, is accessible, has  equivalent  information (or\nfunctionality), and is updated as often as the inaccessible (original) page.\n [Priority\u00a01]  ( Checkpoint\n11.4 ) \n Core Techniques:  Alternative\npages \n Note. \nContent developers should only resort to alternative pages when other solutions\nfail because alternative pages are generally updated less often than \"primary\"\npages. An out-of-date page may be as frustrating as one that is inaccessible\nsince, in both cases, the information presented on the original page is\nunavailable. Automatically generating alternative pages may lead to more\nfrequent updates, but content developers must still be careful to ensure that\ngenerated pages always make sense, and that users are able to navigate a site\nby following links on primary pages, alternative pages, or both. Before\nresorting to an alternative page, reconsider the design of the original page;\nmaking it accessible is likely to improve it for all users. \n Guideline 12.  Provide context and orientation\ninformation. \n Checkpoints: \n 12.1  Title each frame to facilitate frame\nidentification and navigation.  [Priority\u00a01] \n( Checkpoint\n12.1 ) \n HTML Techniques:  Providing a frame\ntitle \n 12.2  Describe the purpose of frames and\nhow frames relate to each other if it is not obvious by frame titles alone.\n [Priority\u00a02]  ( Checkpoint\n12.2 ) \n Core Techniques:  Text\nequivalents \n HTML Techniques:  Describing\nframe relationships \n 12.3  Divide large blocks of\ninformation into more manageable groups where natural and appropriate.  [Priority\u00a02]  ( Checkpoint\n12.3 ) \n HTML Techniques:  Structural\ngrouping \n HTML Techniques:  Grouping form\ncontrols \n 12.4  Associate labels explicitly with\ntheir controls.  [Priority\u00a02]  ( Checkpoint\n12.4 ) \n HTML Techniques:  Labeling form\ncontrols \n Guideline 13.  Provide clear navigation mechanisms. \n Checkpoints: \n 13.1  Clearly identify the target of\neach link.  [Priority\u00a02]  ( Checkpoint\n13.1 ) \n HTML Techniques:  Link text \n 13.2  Provide metadata to add semantic\ninformation to pages and sites.  \n[Priority\u00a02]  ( Checkpoint\n13.2 ) \n Core Techniques:  Navigation \n HTML Techniques:  Metadata \n CSS Techniques:  \nProviding contextual clues in HTML lists \n 13.3  Provide information about the\ngeneral layout of a site (e.g., a site map or table of contents).  [Priority\u00a02]  ( Checkpoint\n13.3 ) \n Core Techniques:  Navigation \n 13.4 \nUse navigation mechanisms in a consistent manner.  \n[Priority\u00a02]  ( Checkpoint\n13.4 ) \n Core Techniques:  Navigation \n 13.5  Provide navigation bars to highlight and\ngive access to the navigation mechanism.  \n[Priority\u00a03]  ( Checkpoint\n13.5 ) \n Core Techniques:  Navigation \n 13.6  Group related links, identify the group\n(for user agents), and,  until\nuser agents  do so, provide a way to bypass the group.  [Priority\u00a03]  ( Checkpoint\n13.6 ) \n HTML Techniques:  Grouping and\nbypassing links \n 13.7  If search functions are provided, enable\ndifferent types of searches for different skill levels and preferences.  [Priority\u00a03]  ( Checkpoint\n13.7 ) \n Core Techniques:  Navigation \n 13.8  Place distinguishing information at\nthe beginning of headings, paragraphs, lists, etc.  \n[Priority\u00a03]  ( Checkpoint\n13.8 ) \n Core Techniques:  \nComprehension \n 13.9  Provide information about document\ncollections (i.e., documents comprising multiple pages.).  [Priority\u00a03]  ( Checkpoint\n13.9 ) \n For example, in HTML specify document collections with\nthe LINK element and the \"rel\" and \"rev\" attributes. Another way to create a\ncollection is by building an archive (e.g., with zip, tar and gzip, stuffit,\netc.) of the multiple pages. \n Core Techniques:  Bundled\ndocuments \n HTML Techniques:  The LINK element\nand navigation tools \n 13.10  Provide a means to skip over\nmulti-line ASCII art.  [Priority\u00a03]  ( Checkpoint\n13.10 ) \n HTML Techniques:  Ascii art \n Guideline 14.  Ensure that documents are clear and\nsimple. \n Checkpoints: \n14.1  Use the clearest and simplest language appropriate for a site's\ncontent.  [Priority\u00a01]  ( Checkpoint\n14.1 ) \n Core Techniques:  \nComprehension \n 14.2  Supplement text with graphic or auditory\npresentations where they will facilitate comprehension of the page.  [Priority\u00a03]  ( Checkpoint 14.2 ) \n Core Techniques:  \nComprehension \n 14.3  Create a style of presentation\nthat is consistent across pages.  \n[Priority\u00a03]  ( Checkpoint\n14.3 ) \n Core Techniques:  Navigation \n CSS Techniques:  Decrease maintenance\nand increase consistency \n 3  Glossary \nAccessible \n Content is accessible when it may be used by someone with\na disability. \nApplet \n A program inserted into a Web page. \n Assistive technology \n Software or hardware that has been specifically designed\nto assist people with disabilities in carrying out daily activities. Assistive\ntechnology includes wheelchairs, reading machines, devices for grasping, etc.\nIn the area of Web Accessibility, common software-based assistive technologies\ninclude screen readers, screen magnifiers, speech synthesizers, and voice input\nsoftware that operate in conjunction with graphical desktop browsers (among\nother  user\nagents ). Hardware assistive technologies include alternative\nkeyboards and pointing devices. \n ASCII\nart \n ASCII  art\nrefers to text characters and symbols that are combined to create an image. For\nexample  \";-)\"  is the smiley emoticon. The\nfollowing is an ASCII figure showing the relationship between flash frequency\nand photoconvulsive response in patients with eyes open and closed [ skip over ASCII\nfigure  or consult a  description of chart ]: \n  %   __ __ __ __ __ __ __ __ __ __ __ __ __ __   \n100 |             *                             |\n 90 |                *  *                       |\n 80 |          *           *                    |\n 70 |             @           *                 |\n 60 |          @                 *              |\n 50 |       *        @              *           |\n 40 |                   @              *        |\n 30 |    *  @              @  @           *     |\n 20 |                                           |\n 10 |    @                       @  @  @  @     |\n      0  5 10 15 20 25 30 35 40 45 50 55 60 65 70\n      Flash frequency (Hertz)\n Authoring tool \n HTML \neditors, document conversion tools, tools that generate Web content from\ndatabases are all authoring tools. Refer to the \"Authoring Tool Accessibility\nGuidelines 1.0\" ( [ATAG10] ) for information about\ndeveloping accessible tools. \n Backward compatible \n Design that continues to work with earlier versions of a\nlanguage, program, etc. \nBraille \n Braille uses six raised dots in different patterns to\nrepresent letters and numbers to be read by people who are blind with their\nfingertips. The word \"Accessible\" in braille follows: \n A  \n braille display,  commonly referred to as a \"dynamic\nbraille display,\" raises or lowers dot patterns on command from an electronic\ndevice, usually a computer. The result is a line of braille that can change\nfrom moment to moment. Current dynamic braille displays range in size from one\ncell (six or eight dots) to an eighty-cell line, most having between twelve and\ntwenty cells per line. \n Content developer \n Someone who authors Web pages or designs Web sites. \nDeprecated \n A deprecated element or attribute is one that has been\noutdated by newer constructs. Deprecated elements may become obsolete in future\nversions of HTML. The  index of HTML\nelements and attributes in the Techniques Document  indicates which elements\nand attributes are deprecated in HTML 4.01. \n Authors should avoid using deprecated elements and\nattributes. User agents should continue to support them for reasons of backward\ncompatibility. \n Device independent \n Users must be able to interact with a user agent (and the\ndocument it renders) using the supported input and output devices of their\nchoice and according to their needs. Input devices may include pointing\ndevices, keyboards, braille devices, head wands, microphones, and others.\nOutput devices may include monitors, speech synthesizers, and braille\ndevices. \n Please note that \"device-independent support\" does not\nmean that user agents must support every input or output device. User agents\nshould offer redundant input and output mechanisms for those devices that are\nsupported. For example, if a user agent supports keyboard and mouse input,\nusers should be able to interact with all features using either the keyboard or\nthe mouse. \n Document Content, Structure, and\nPresentation \n The content of a document refers to what it says to the\nuser through natural language, images, sounds, movies, animations, etc. The\nstructure of a document is how it is organized logically (e.g., by chapter,\nwith an introduction and table of contents, etc.). An  \nelement  (e.g., P, STRONG, BLOCKQUOTE in HTML) that specifies\ndocument structure is called a  structural element . The\npresentation of a document is how the document is rendered (e.g., as print, as\na two-dimensional graphical presentation, as an text-only presentation, as\nsynthesized speech, as braille, etc.) An  element \nthat specifies document presentation (e.g., B, FONT, CENTER) is called a  \npresentation element . \n Consider a document heading, for example. The content of\nthe heading is what the heading says (e.g., \"Sailboats\"). In HTML, the heading\nis a structural element marked up with, for example, an H2 element. Finally,\nthe presentation of the heading might be a bold block text in the margin, a\ncentered line of text, a title spoken with a certain voice style (like an aural\nfont), etc. \n Dynamic HTML\n(DHTML) \n DHTML  is the\nmarketing term applied to a mixture of standards including HTML,  style sheets , the Document Object Model  \n [DOM1]  and\nscripting. However, there is no W3C specification that formally defines DHTML.\nMost guidelines may be applicable to applications using DHTML, however the\nfollowing guidelines focus on issues related to scripting and style sheets:  guideline 1 ,  guideline 3 ,  guideline 6 ,  guideline 7 , and  guideline 9 . \nElement \n This document uses the term \"element\" both in the strict\nSGML sense (an element is a syntactic construct) and more generally to mean a\ntype of content (such as video or sound) or a logical construct (such as a\nheading or list). The second sense emphasizes that a guideline inspired by HTML\ncould easily apply to another markup language. \n Note that some (SGML) elements have content that is\nrendered (e.g., the P, LI, or TABLE elements in HTML), some are replaced by\nexternal content (e.g., IMG), and some affect processing (e.g., STYLE and\nSCRIPT cause information to be processed by a style sheet or script engine). An\nelement that causes text characters to be part of the document is called a  text\nelement . \nEquivalent \n Content is \"equivalent\" to other content when both fulfill\nessentially the same function or purpose upon presentation to the user. In the\ncontext of this document, the equivalent must fulfill essentially the same\nfunction for the person with a disability (at least insofar as is feasible,\ngiven the nature of the disability and the state of technology), as the primary\ncontent does for the person without any disability. For example, the text \"The\nFull Moon\" might convey the same information as an image of a full moon when\npresented to users. Note that equivalent information focuses on  \nfulfilling the same function . If the image is part of a link and\nunderstanding the image is crucial to guessing the link target, an equivalent\nmust also give users an idea of the link target. Providing equivalent\ninformation for inaccessible content is one of the primary ways authors can\nmake their documents accessible to people with disabilities. \n As part of fulfilling the same function of content an\nequivalent may involve a description of that content (i.e., what the content\nlooks like or sounds like). For example, in order for users to understand the\ninformation conveyed by a complex chart, authors should describe the visual\ninformation in the chart. \n Since text content can be presented to the user as\nsynthesized speech, braille, and visually-displayed text, these guidelines\nrequire  text\nequivalents  for graphic and audio information. Text equivalents\nmust be written so that they convey all essential content.  Non-text\nequivalents  (e.g., an auditory description of a visual\npresentation, a video of a person telling a story using sign language as an\nequivalent for a written story, etc.) also improve accessibility for people who\ncannot access visual information or written text, including many individuals\nwith blindness, cognitive disabilities, learning disabilities, and\ndeafness. \n Equivalent information may be provided in a number of\nways, including through attributes (e.g., a text value for the \"alt\" attribute\nin HTML and SMIL), as part of element content (e.g., the OBJECT in HTML), as\npart of the document's prose, or via a linked document (e.g., designated by the\n\"longdesc\" attribute in HTML or a  \ndescription link ). Depending on the complexity of the equivalent,\nit may be necessary to combine techniques (e.g., use \"alt\" for an abbreviated\nequivalent, useful to familiar readers, in addition to \"longdesc\" for a link to\nmore complete information, useful to first-time readers). \n A  \n text transcript  is a text equivalent of audio information\nthat includes spoken words and non-spoken sounds such as sound effects. A  caption  is a text\ntranscript for the audio track of a video presentation that is synchronized\nwith the video and audio tracks. Captions are generally rendered visually by\nbeing superimposed over the video, which benefits people who are deaf and\nhard-of-hearing, and anyone who cannot hear the audio (e.g., when in a crowded\nroom). A  collated text\ntranscript  combines (collates) captions with text descriptions of\nvideo information (descriptions of the actions, body language, graphics, and\nscene changes of the video track). These text equivalents make presentations\naccessible to people who are deaf-blind and to people who cannot play movies,\nanimations, etc. It also makes the information available to search\nengines. \n One example of a non-text equivalent is an  auditory\ndescription  of the key visual elements of a presentation. The\ndescription is either a prerecorded human voice or a synthesized voice\n(recorded or generated on the fly). The auditory description is synchronized\nwith the audio track of the presentation, usually during natural pauses in the\naudio track. Auditory descriptions include information about actions, body\nlanguage, graphics, and scene changes. \nImage \n A graphical presentation. \n Image\nmap \n An image that has been divided into regions with\nassociated actions. Clicking on an active region causes an action to\noccur. \n When a user clicks on an active region of a client-side image\nmap,  the user agent calculates in which region the click occurred\nand follows the link associated with that region.  Clicking on an active region of a\nserver-side image map  causes the coordinates of the click to be\nsent to a server, which then performs some action. \n Content developers can make client-side image maps\naccessible by providing device-independent access to the same links associated\nwith the image map's regions. Client-side image maps allow the user agent to\nprovide immediate feedback as to whether or not the user's pointer is over an\nactive region. \nImportant \n Information in a document is important if understanding\nthat information is crucial to understanding the document. \n Linearized table \n A table rendering process where the contents of the cells\nbecome a series of paragraphs (e.g., down the page) one after another. The\nparagraphs will occur in the same order as the cells are defined in the\ndocument source. Cells should make sense when read in order and should include\n structural\nelements  (that create paragraphs, headings, lists, etc.) so the page\nmakes sense after linearization. \n Link\ntext \n The rendered text content of a link. \n Natural Language \n Spoken, written, or signed human languages such as French, Japanese,\nAmerican Sign Language, and braille. The natural language of content may be\nindicated with the \"lang\" attribute in HTML ( [HTML4] , section 8.1) and the\n\"xml:lang\" attribute in XML ( [XML] , section 2.12). \n Navigation Mechanism \n A navigation mechanism is any means by which a user can\nnavigate a page or site. Some typical mechanisms include: \n navigation\nbars \n A navigation bar is a collection of links to the most important parts of a\ndocument or site. \n site\nmaps \n A site map provides a global view of the organization of a page or\nsite. \ntables of contents \n A table of contents generally lists (and links to) the most important\nsections of a document. \n Personal Digital\nAssistant (PDA) \n A  \nPDA  is a small, portable computing device. Most PDAs are used to\ntrack personal data such as calendars, contacts, and electronic mail. A PDA is\ngenerally a handheld device with a small screen that allows input from various\nsources. \n Screen magnifier \n A software program that magnifies a portion of the screen,\nso that it can be more easily viewed. Screen magnifiers are used primarily by\nindividuals with low vision. \n Screen reader \n A software program that reads the contents of the screen\naloud to a user. Screen readers are used primarily by individuals who are\nblind. Screen readers can usually only read text that is printed, not painted,\nto the screen. \nStyle sheets \n A style sheet is a set of statements that specify\npresentation of a document. Style sheets may have three different origins: they\nmay be written by content providers, created by users, or built into user\nagents. In CSS ( [CSS2] ), the interaction of content\nprovider, user, and user agent style sheets is called the  \ncascade . \n Presentation markup  is\nmarkup that achieves a stylistic (rather than structuring) effect such as the B\nor I elements in HTML. Note that the STRONG and EM elements are not considered\npresentation markup since they convey information that is independent of a\nparticular font style. \n Tabular information \n When tables are used to represent logical relationships among data -- text,\nnumbers, images, etc., that information is called \"tabular information\" and the\ntables are called \"data tables\". The relationships expressed by a table may be\nrendered visually (usually on a two-dimensional grid), aurally (often preceding\ncells with header information), or in other formats. \n Until user agents ... \n In most of the checkpoints, content developers are asked\nto ensure the accessibility of their pages and sites. However, there are\naccessibility needs that would be more appropriately met by  user agents  (including  assistive\ntechnologies ). As of the publication of this document, not all user\nagents or assistive technologies provide the accessibility control users\nrequire (e.g., some user agents may not allow users to turn off blinking\ncontent, or some screen readers may not handle tables well). Checkpoints that\ncontain the phrase \"until user agents ...\" require content developers to\nprovide additional support for accessibility until most user agents readily\navailable to their audience include the necessary accessibility features. \n Note.  The  WAI  Web site\n(refer to  [WAI-UA-SUPPORT] ) provides\ninformation about user agent support for accessibility features. Content\ndevelopers are encouraged to consult this page regularly for updated\ninformation. \n User\nagent \n Software to access Web content, including desktop\ngraphical browsers, text browsers, voice browsers, mobile phones, multimedia\nplayers, plug-ins, and some software assistive technologies used in conjunction\nwith browsers such as screen readers, screen magnifiers, and voice recognition\nsoftware. Refer to the \"User Agent Accessibility Guidelines 1.0\" ( [UAAG10] ) for\ninformation about developing accessible tools. \n 4  References \n For the latest version of any  W3C  specification please\nconsult the list of  W3C  Technical Reports . \n [ATAG10] \n \"Authoring Tool\nAccessibility Guidelines 1.0\" , J. Treviranus, C. McCathieNevile, I. Jacobs,\nand J. Richards, eds., 3 February 2000. This  ATAG  1.0\nRecommendation is http://www.w3.org/TR/2000/REC-ATAG10-20000203/. \n [CSS2] \n \"CSS, level 2\nRecommendation\" , B. Bos, H. Wium Lie, C. Lilley, and I. Jacobs, eds., 12\nMay 1998. This CSS2 Recommendation is\nhttp://www.w3.org/TR/1998/REC-CSS2-19980512/. The  latest version of CSS2  is available\nat http://www.w3.org/TR/REC-CSS2. \n [DOM1] \n \"Document\nObject Model (DOM) Level 1 Specification\" , V. Apparao, S. Byrne, M.\nChampion, S. Isaacs, I. Jacobs, A. Le Hors, G. Nicol, J. Robie, R. Sutor, C.\nWilson, and L. Wood, eds., 1 October 1998. This DOM Level 1 Recommendation is\nhttp://www.w3.org/TR/1998/REC-DOM-Level-1-19981001. The  latest version of DOM Level 1 \nis available at http://www.w3.org/TR/REC-DOM-Level-1. \n [HTML4] \n \"HTML 4.01\nRecommendation\" , D. Raggett, A. Le Hors, and I. Jacobs, eds., 24 December\n1999. This  HTML  4.01 Recommendation is\nhttp://www.w3.org/TR/1999/REC-html401-19991224/. \n [SMIL] \n \"Synchronized\nMultimedia Integration Language (SMIL) 1.0 Specification\" , P. Hoschka, ed.,\n15 June 1998. This SMIL 1.0 Recommendation is\nhttp://www.w3.org/TR/1998/REC-smil-19980615/. The  latest version of SMIL 1.0  is\navailable at http://www.w3.org/TR/REC-smil. \n[SMIL-ACCESS] \n\"Accessibility Features of SMIL\" , M. Koivunen and I. Jacobs, eds., 21\nSeptember 1999. This W3C Note is\nhttp://www.w3.org/TR/1999/NOTE-SMIL-access-19990921/. \n [SVG] \n \"Scalable Vector\nGraphics (SVG) 1.0 Specification\" , J. Ferraiolo, ed., 2 August 2000. This\nW3C Candidate Recommendation is\nhttp://www.w3.org/TR/2000/CR-SVG-20000802/. \n [SVG-ACCESS] \n\"Accessibility Features of SVG\" , C. McCathieNevile and M. Koivunen, eds., 7\nAugust 2000. This W3C Note is\nhttp://www.w3.org/TR/2000/NOTE-SVG-access-20000807. \n [UAAG10] \n \"User Agent Accessibility\nGuidelines\" , J. Gunderson and I. Jacobs, eds. The  latest version of the User Agent\nAccessibility Guidelines  is available at http://www.w3.org/TR/UAAG10/. \n [WCAG10] \n \"Web Content\nAccessibility Guidelines 1.0\" , W. Chisholm, G. Vanderheiden, and I. Jacobs,\neds., 5 May 1999. This  WCAG  1.0 Recommendation is\nhttp://www.w3.org/TR/1999/WAI-WEBCONTENT-19990505/. \n[WCAG10-CORE-TECHNIQUES] \n \"Core Techniques for Web\nContent Accessibility Guidelines 1.0\" , W. Chisholm, G. Vanderheiden, and I.\nJacobs, eds. The latest version of this document is available at\nhttp://www.w3.org/TR/WCAG10-CORE-TECHS/. \n[WCAG10-CSS-TECHNIQUES] \n \"CSS Techniques for Web\nContent Accessibility Guidelines 1.0\" , W. Chisholm, G. Vanderheiden, and I.\nJacobs, eds. The latest version of this document is available at\nhttp://www.w3.org/TR/WCAG10-CSS-TECHS/. \n[WCAG10-HTML-TECHNIQUES] \n \"HTML Techniques for Web\nContent Accessibility Guidelines 1.0\" , W. Chisholm, G. Vanderheiden, and I.\nJacobs, eds. The latest version of this document is available at\nhttp://www.w3.org/TR/WCAG10-HTML-TECHS/. \n [XML] \n \"Extensible Markup\nLanguage (XML) 1.0.\" , T. Bray, J. Paoli, C.M. Sperberg-McQueen, eds., 10\nFebruary 1998. This XML 1.0 Recommendation is:\nhttp://www.w3.org/TR/1998/REC-xml-19980210. The  latest version of XML 1.0  is available\nat http://www.w3.org/TR/REC-xml. \n 5  Resources \n Note:   W3C does not guarantee the stability of any of\nthe following references outside of its control. These references are included\nfor convenience. References to products are not endorsements of those\nproducts. \n 5.1  Other\nGuidelines \n [UWSAG] \n \"The\nUnified Web Site Accessibility Guidelines\" , G. Vanderheiden, W. Chisholm,\neds. The Unified Web Site Guidelines were compiled by the  Trace R & D Center  at the University\nof Wisconsin under funding from the National Institute on Disability and\nRehabilitation Research (NIDRR),\u00a0 U.S. Dept. of Education. \n 5.2  User agents and other\ntools \n A list of  alternative\nWeb browsers  (assistive technologies and other user agents designed for\naccessibility) is maintained at the WAI Web site. \n[WAI-UA-SUPPORT] \n User Agent Support\nfor Accessibility \n 6  Acknowledgments \n Web Content Guidelines Working Group Co-Chairs: \n Jason White ,\nUniversity of Melbourne \n Gregg Vanderheiden , Trace Research\nand Development \n W3C Team contact: \n Wendy Chisholm \n We wish to thank the following people who have contributed their time and\nvaluable comments to shaping these guidelines: \n Harvey Bingham, Kevin Carey, Chetz Colwell, Neal Ewers, Geoff Freed, Al\nGilman, Larry Goldberg, Jon Gunderson, Eric Hansen, Phill Jenkins, Leonard\nKasday, George Kerscher, Marja-Riitta Koivunen, Josh Krieger, Chuck Letourneau,\nScott Luebking, William Loughborough, Murray Maloney, Charles McCathieNevile,\nMegaZone (Livingston Enterprises), Masafumi Nakane, Mark Novak, Charles\nOppermann, Mike Paciello, David Pawson, Michael Pieper, Greg Rosmaita, Liam\nQuinn, Dave Raggett, T.V. Raman, Robert Savellis, Jutta Treviranus, Steve\nTyler, and Jaap van Lelieveld \n [ contents ] \u00a0 [ Core Techniques ] \u00a0 [ HTML Techniques ] \u00a0 [ CSS Techniques ]"}