{"url": "http://www.w3.org/TR/CSS21/conform.html", "content": "Conformance: requirements and recommendations \n previous  \u00a0\n next  \u00a0\n contents  \u00a0\n properties  \u00a0\n index  \u00a0\n 3 Conformance: Requirements and Recommendations \n Contents \n 3.1 Definitions \n 3.2 UA Conformance \n 3.3 Error conditions \n 3.4  The text/css content type \n     (hide)     Note:  Several sections of this specification have been updated by other specifications. Please, see  \"Cascading Style Sheets (CSS) \u2014 The Official Definition\"  in the latest  CSS Snapshot  for a list of specifications and the sections they replace.  The CSS Working Group is also developing  CSS level\u00a02 revision\u00a02 (CSS\u00a02.2).     \n 3.1  Definitions \n The key words  \"MUST\" ,\n \"MUST NOT\" ,  \"REQUIRED\" ,  \"SHALL\" ,  \"SHALL NOT\" ,  \"SHOULD\" ,  \"SHOULD NOT\" ,  \"RECOMMENDED\" ,  \"MAY\" , and  \"OPTIONAL\"  in this document\nare to be interpreted as described in RFC\u00a02119 (see  [RFC2119] ).\nHowever, for readability, these words do not appear in all uppercase\nletters in this specification.\n At times, this specification recommends good practice\nfor authors and user agents. These recommendations are not normative\nand conformance with this specification does not depend on their\nrealization. These recommendations contain the expression \"We\nrecommend ...\", \"This specification recommends ...\", or some similar\nwording. \n The fact that a feature is marked as deprecated (namely the  'aural'  keyword) or going to\nbe deprecated in CSS3 (namely the  system colors ) also has no influence\non conformance. (For example, 'aural' is marked as non-normative, so\nUAs do not need to support it; the system colors are normative, so UAs\nmust support them.)\n All sections of this specification, including appendices, are\nnormative unless otherwise noted.\n Examples and notes \nare not normative.\n Example(s): Examples usually have the word \"example\" near\ntheir start (\"Example:\", \"The following example\u2026,\" \"For\nexample,\" etc.) and are shown in the color maroon, like this\nparagraph. \n Notes start with the word \"Note,\" are indented and\nshown in green, like this paragraph. \n Figures are for illustration only. They are not reference\nrenderings, unless explicitly stated.\n Style sheet \n A set of statements that specify presentation of a document.\n Style sheets may have three different origins:  author ,  user , and  user agent . The interaction of these sources is\ndescribed in the section on  cascading and\ninheritance .\n Valid style\nsheet \n The validity of a style sheet depends on the level of CSS\nused for the style sheet. All valid CSS1 style sheets are valid CSS\u00a02.1\nstyle sheets, but some changes from CSS1 mean that\na few CSS1 style sheets will have slightly different semantics in\nCSS\u00a02.1. Some features in CSS2 are not part of CSS\u00a02.1, so not all CSS2\nstyle sheets are valid CSS\u00a02.1 style sheets.\n A valid CSS\u00a02.1 style sheet must be written according to the  grammar of CSS\u00a02.1 . Furthermore, it must contain\nonly at-rules, property names, and property values defined in this\nspecification.\nAn  illegal  (invalid) at-rule,\nproperty name, or property value is one that is not valid.\n Source\ndocument \n The document to which one or more style sheets apply. This is\nencoded in some language that represents the document as a tree of  elements . Each element consists of a name that\nidentifies the type of element, optionally a number of  attributes , and a (possibly empty)  content . For example, the source document could be \nan XML or SGML instance. \n Document language \n The encoding language of the source document (e.g., HTML, XHTML, or\nSVG). CSS is used to describe the presentation of document languages\nand CSS does not change the underlying semantics of the document\nlanguages.\n Element \n (An SGML term, see  [ISO8879] .) The primary syntactic constructs\nof the document language. Most CSS style sheet rules use the names of\nthese elements (such as P, TABLE, and OL in HTML) to specify\nhow the elements should be rendered.\n Replaced\nelement \n An element whose content is outside the scope of the CSS\nformatting model, such as an image, embedded document, or applet. For\nexample, the content of the HTML IMG element is often replaced by the\nimage that its \"src\" attribute designates. Replaced elements often\nhave intrinsic dimensions: an intrinsic width, an intrinsic height,\nand an intrinsic ratio. For example, a bitmap image has an intrinsic\nwidth and an intrinsic height specified in absolute units (from which\nthe intrinsic ratio can obviously be determined). On the other hand,\nother documents may not have any intrinsic dimensions (for example, a\nblank HTML document).\n User agents may consider a replaced element to not have any\nintrinsic dimensions if it is believed that those dimensions could\nleak sensitive information to a third party. For example, if an HTML\ndocument changed intrinsic size depending on the user's bank balance,\nthen the UA might want to act as if that resource had no intrinsic\ndimensions.\n The content of replaced elements is not considered in the CSS\nrendering model.\n Intrinsic dimensions \n The width and height as defined by the element itself, not imposed\nby the surroundings. CSS does not define how the intrinsic dimensions\nare found. In CSS\u00a02.1 only replaced elements can come with\nintrinsic dimensions.\nFor raster images without reliable resolution information, a size of\n1\u00a0px unit per image source pixel must be assumed.\n Attribute \n A value associated with an element, consisting of a name, and an\nassociated (textual) value.\n Content \n The content associated with an element in the source document.\nSome elements have no content, in which case they are\ncalled  empty . The content\nof an element may include text, and it may include a number of\nsub-elements, in which case the element is called\nthe  parent  of those\nsub-elements.\n Ignore \n This term has two slightly different meanings in this\nspecification. First, a CSS parser must follow certain rules when it\ndiscovers unknown or illegal syntax in a style sheet. The parser must\nthen ignore certain parts of the style sheets. The exact rules for\nwhich parts must be ignored are described in these sections ( Declarations and properties,   Rules for handling parsing\nerrors,   Unsupported\nValues ) or may be explained in the text where the term \"ignore\"\nappears. Second, a user agent may (and, in some cases must) disregard\ncertain properties or values in the style sheet, even if the syntax is\nlegal. For example, table-column elements cannot affect the font of the\ncolumn, so the font properties must be ignored.\n Rendered\ncontent \n The content of an element after the rendering that applies to it\naccording to the relevant style sheets has been applied. How a\nreplaced element's content is rendered is not defined by this\nspecification. Rendered content may also be\nalternate text for an element (e.g., the value of the XHTML \"alt\"\nattribute), and may include items inserted implicitly or explicitly by\nthe style sheet, such as bullets, numbering, etc.\n Document\ntree \n The tree of elements encoded in the source document. Each element\nin this tree has exactly one parent, with the exception of the\n root  element, which has none.\n Child \n An element A is called the child of element B if and only if B is\nthe parent of A.\n Descendant \n An element A is called a descendant of an element B, if either (1)\nA is a child of B, or (2) A is the child of some element C that is a\ndescendant of B.\n Ancestor \n An element A is called an ancestor of an element B, if and only if\nB is a descendant of A.\n Sibling \n An element A is called a sibling of an element B, if and only if B\nand A share the same parent element. Element A is a preceding sibling\nif it comes before B in the document tree. Element B is a following\nsibling if it comes after A in the document tree.\n Preceding element \n An element A is called a preceding element of an element B, if and\nonly if (1) A is an ancestor of B or (2) A is a preceding sibling of\nB.\n Following\nelement \n An element A is called a following element of an element B, if and\nonly if B is a preceding element of A.\n Author \n An author is a person who writes documents and associated style\nsheets.\nAn  authoring\ntool  is a  User Agent \nthat generates style sheets. \n User \n  A user is a person who interacts with a user agent to view, hear, or\notherwise use a document and its associated style sheet. The user\nmay provide a personal style sheet that encodes personal\npreferences.\n User agent\n(UA) \n A  user\nagent  is any program that interprets a document written in\nthe document language and applies associated style sheets according\nto the terms of this specification. A user agent may display a\ndocument, read it aloud, cause it to be printed, convert it\nto another format, etc. \n An HTML user agent is one that supports one or more of the HTML\nspecifications. A user agent that supports XHTML  [XHTML] , but not\nHTML is not considered an\nHTML user agent for the purpose of conformance with this\nspecification.\n Property \n CSS defines a finite set of parameters, called properties, that\ndirect the rendering of a document. Each property has a name (e.g.,\n'color', 'font', or border') and a value (e.g., 'red', '12pt Times', or\n'dotted'). Properties are attached to various parts of the document\nand to the page on which the document is to be displayed by the\nmechanisms of specificity, cascading, and inheritance (see the chapter\non  Assigning property values, Cascading, and\nInheritance ).\n Here is an example of a source document written in HTML:\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\">\n<HTML>   \n  <TITLE>My home page</TITLE>\n  <BODY>\n    <H1>My home page</H1>\n    <P>Welcome to my home page! Let me tell you about my favorite\n\t\tcomposers:\n    <UL>\n      <LI> Elvis Costello\n      <LI> Johannes Brahms\n      <LI> Georges Brassens\n    </UL>\n  </BODY>\n</HTML>\n This results in the following tree: \n \u00a0\u00a0\u00a0 [D] \n According to the definition of HTML 4, HEAD elements will be\ninferred during parsing and become part of the document tree even if\nthe \"head\" tags are not in the document source. Similarly, the parser\nknows where the P and LI elements end, even though there are no\n</p> and </li> tags in the source.\n Documents written in XHTML (and other XML-based languages) behave\ndifferently: there are no inferred elements and all elements must have\nend tags.\n 3.2  UA Conformance \n This section defines  conformance  with\nthe CSS\u00a02.1\nspecification only. There may be other levels of CSS in the future\nthat may require a user agent to implement a different set of features\nin order to conform.\n In general, the following points must be observed by a user agent\nclaiming conformance to this specification: \n It must recognize one or more of the CSS\u00a02.1  media types .\n For each source document, it must attempt to retrieve all \nassociated style sheets that are appropriate for the recognized media\ntypes. If it cannot retrieve all associated style sheets (for instance,\nbecause of network errors), it must display the document using those\nit can retrieve.\n It must parse the style sheets according to this specification.\nIn particular, it must recognize all at-rules, blocks, declarations,\nand selectors (see the  grammar of CSS\u00a02.1 ).\nIf a user agent encounters a property that applies for a supported\nmedia type, the user agent must parse the value according to the property\ndefinition. This means that the user agent must accept all valid\nvalues and must  \n ignore  declarations with\ninvalid values. User\nagents must  ignore \nrules that apply to unsupported  media\ntypes .\n For each element in a  document tree , it\nmust assign a value for every property according to the\nproperty's definition and the rules of  cascading and inheritance .\n If the source document comes with alternate style sheet sets (such as\nwith the \"alternate\" keyword in HTML 4  [HTML4] ), the UA must\nallow the user to select which style sheet set the UA should apply.\n The UA must allow the user to turn off the influence of author style sheets.\n Not every user agent must observe every point, however: \n An application that reads style sheets without rendering any\ncontent (e.g., a CSS\u00a02.1 validator) must respect points 1-3.\n An authoring tool is only required to output  valid style sheets \n A user agent that  renders  a document with associated style\nsheets must respect points 1-6 and render the document\naccording to the media-specific requirements set forth in this\nspecification.  Values  \nmay be approximated when required by the user agent.\n The inability of a user agent to implement part of this\nspecification due to the limitations of a particular device (e.g., a\nuser agent cannot render colors on a monochrome monitor or page) does\nnot imply non-conformance.  \n UAs must allow users to specify a file that contains the user style\nsheet. UAs that run on devices without any means of writing or\nspecifying files are exempted from this requirement. Additionally, UAs\nmay offer other means to specify user preferences, for example, through\na GUI.\n CSS\u00a02.1 does not define which properties apply to form controls and\nframes, or how CSS can be used to style them. User agents may apply CSS\nproperties to these elements. Authors are recommended to treat such\nsupport as experimental. A future level of CSS may specify this further.\n 3.3  Error conditions \n In general, this document specifies error handling behavior\nthroughout the specification. For example, see the  rules for handling parsing errors . \n 3.4  The text/css content type \n CSS style sheets that exist in separate files are sent over the\nInternet as a sequence of bytes accompanied by encoding\ninformation. The structure of the\ntransmission, termed a  message\nentity,  is defined by RFC 2045 and RFC 2616 (see\n [RFC2045]  and  [RFC2616] ). A message entity with a content type of\n\"text/css\" represents an independent CSS document. The \"text/css\"\ncontent type has been registered by RFC 2318 ( [RFC2318] ).\n previous  \u00a0\n next  \u00a0\n contents  \u00a0\n properties  \u00a0\n index"}