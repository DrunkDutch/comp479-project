{"url": "https://en.wikipedia.org/wiki/HTTPS", "content": "HTTPS - Wikipedia \n HTTPS   \n From Wikipedia, the free encyclopedia   \n\t\t\t\t\tJump to:\t\t\t\t\t navigation , \t\t\t\t\t search \n HTTP Secure  ( HTTPS ) is an adaptation of the  Hypertext Transfer Protocol  (HTTP) for  secure communication  over a  computer network , and is widely used on the  Internet . [1] [2]  In HTTPS, the  communication protocol  is encrypted by  Transport Layer Security  (TLS), or formerly, its predecessor, Secure Sockets Layer (SSL). The protocol is therefore also often referred to as  HTTP over TLS , [3]  or  HTTP over SSL . [4] \n The principal motivation for HTTPS is  authentication  of the accessed  website  and protection of the  privacy  and  integrity  of the exchanged data. It protects against  man-in-the-middle attacks . The bidirectional  encryption  of communications between a client and server protects against  eavesdropping  and  tampering  of the communication. [5]  In practice, this provides a reasonable assurance that one is communicating without interference by attackers with the website that one intended to communicate with, as opposed to an impostor. \n Historically, HTTPS connections were primarily used for payment transactions on the  World Wide Web , e-mail and for sensitive transactions in corporate information systems. [ citation needed ]  In the late 2000s and early 2010s, HTTPS was increasingly used for protecting page authenticity on all types of websites, securing accounts and keeping user communications, identity and web browsing private. \n Contents \n 1   Overview \n 1.1   Usage in websites \n 1.2   Browser integration \n 2   Security \n 3   Technical \n 3.1   Difference from HTTP \n 3.2   Network layers \n 3.3   Server setup \n 3.3.1   Acquiring certificates \n 3.3.2   Use as access control \n 3.3.3   In case of compromised secret (private) key \n 3.4   Limitations \n 4   History \n 5   See also \n 6   References \n 7   External links \n Overview [ edit ] \n For more details on this topic, see  Transport Layer Security . \nIllustration of the networking protocol https and the www letters \n The  Uniform Resource Identifier  (URI) scheme  HTTPS  has identical usage syntax to the HTTP scheme. However, HTTPS signals the browser to use an added encryption layer of SSL/TLS to protect the traffic. SSL/TLS is especially suited for HTTP, since it can provide some protection even if only one side of the communication is  authenticated . This is the case with HTTP transactions over the Internet, where typically only the  server  is authenticated (by the client examining the server's  certificate ). \n HTTPS creates a secure channel over an insecure network. This ensures reasonable protection from  eavesdroppers  and  man-in-the-middle attacks , provided that adequate  cipher suites  are used and that the server certificate is verified and trusted. \n Because HTTPS piggybacks HTTP entirely on top of TLS, the entirety of the underlying HTTP protocol can be encrypted. This includes the request URL (which particular web page was requested), query parameters, headers, and cookies (which often contain identity information about the user). However, because host (website) addresses and  port  numbers are necessarily part of the underlying  TCP/IP  protocols, HTTPS cannot protect their disclosure. In practice this means that even on a correctly configured web server, eavesdroppers can infer the IP address and port number of the web server (sometimes even the domain name e.g. www.example.org, but not the rest of the URL) that one is communicating with, as well as the amount (data transferred) and duration (length of session) of the communication, though not the content of the communication. [5] \n Web browsers know how to trust HTTPS websites based on  certificate authorities  that come pre-installed in their software. Certificate authorities (such as  Symantec ,  Comodo ,  GoDaddy  and  GlobalSign ) are in this way being trusted by web browser creators to provide valid certificates. Therefore, a user should trust an HTTPS connection to a website  if and only if  all of the following are true: \n The user trusts that the browser software correctly implements HTTPS with correctly pre-installed certificate authorities. \n The user trusts the certificate authority to vouch only for legitimate websites. \n The website provides a valid certificate, which means it was signed by a trusted authority. \n The certificate correctly identifies the website (e.g., when the browser visits \" https://example.com \", the received certificate is properly for \"example.com\" and not some other entity). \n The user trusts that the protocol's encryption layer (SSL/TLS) is sufficiently secure against eavesdroppers. \n HTTPS is especially important over insecure networks (such as public  Wi-Fi  access points), as anyone on the same local network can  packet-sniff  and discover sensitive information not protected by HTTPS. Additionally, many free to use and paid  WLAN  networks engage in  packet injection  in order to serve their own ads on webpages. However, this can be exploited maliciously in many ways, such as injecting  malware  onto webpages and stealing users' private information. [6] \n HTTPS is also very important for connections over the  Tor anonymity network , as malicious Tor nodes can damage or alter the contents passing through them in an insecure fashion and inject malware into the connection. This is one reason why the  Electronic Frontier Foundation  and the Tor project started the development of  HTTPS Everywhere , [5]  which is included in the Tor Browser Bundle. [7] \n As more information is revealed about global  mass surveillance  and criminals stealing personal information, the use of HTTPS security on all websites is becoming increasingly important regardless of the type of Internet connection being used. [8] [9]  While  metadata  about individual pages that a user visits is not sensitive, when combined, they can reveal a lot about the user and compromise the user's privacy. [10] [11] [12] \n Deploying HTTPS also allows the use of  HTTP/2  (or its predecessor, the now-deprecated protocol  SPDY ), that are new generations of HTTP, designed to reduce page load times and latency. \n It is recommended to use  HTTP Strict Transport Security  (HSTS) with HTTPS to protect users from man-in-the-middle attacks, especially  SSL stripping . [12] [13] \n HTTPS should not be confused with the little-used  Secure HTTP  (S-HTTP) specified in  RFC 2660 . \n Usage in websites [ edit ] \n As of November 2017 [update] , 27.7% of Alexa top 1,000,000 websites use HTTPS as default, [14]  43.1% of the Internet's 141,387 most popular websites have a secure implementation of HTTPS, [15]  and 45% of page loads (measured by Firefox Telemetry) use HTTPS. [16] \n According to  Mozilla  since January 2017 more than half of the  Web traffic  is encrypted. [17] [18] \n Browser integration [ edit ] \n Most  browsers  display a warning if they receive an invalid certificate. Older browsers, when connecting to a site with an invalid certificate, would present the user with a  dialog box  asking whether they wanted to continue. Newer browsers display a warning across the entire window. Newer browsers also prominently display the site's security information in the  address bar .  Extended validation certificates  turn the address bar green in newer browsers. Most browsers also display a warning to the user when visiting a site that contains a mixture of encrypted and unencrypted content. \n Comparison between different kinds of  SSL/TLS  certificates \n (Using  Firefox  as an example) \n Many web browsers, including Firefox (shown here), use the  address bar  to tell the user that their connection is secure, often by coloring the background.\u00a0 \n When accessing a site only with a common certificate, the address bar of  Firefox  turns green. For some other  browsers , a \"lock\" sign may appear.\u00a0 \n Most web browsers alert the user when visiting sites that have invalid security certificates.\u00a0 \n Firefox  uses HTTPS for Google searches as of version 14, [19]  to \"shield our users from network infrastructure that may be gathering data about the users or modifying/censoring their search results\". [20] \n The  Electronic Frontier Foundation , opining that \"In an ideal world, every web request could be defaulted to HTTPS\", has provided an add-on called HTTPS Everywhere for  Mozilla Firefox  that enables HTTPS by default for hundreds of frequently used websites. A beta version of this plugin is also available for  Google Chrome  and Chromium. [21] [22] \n Security [ edit ] \n Main article:  Transport Layer Security \u00a7\u00a0Security \n The security of HTTPS is that of the underlying TLS, which typically uses long-term  public  and private keys to generate a short-term  session key , which is then used to encrypt the data flow between client and server.  X.509  certificates are used to authenticate the server (and sometimes the client as well). As a consequence,  certificate authorities  and  public key certificates  are necessary to verify the relation between the certificate and its owner, as well as to generate, sign, and administer the validity of certificates. While this can be more beneficial than verifying the identities via a  web of trust , the  2013 mass surveillance disclosures  drew attention to certificate authorities as a potential weak point allowing  man-in-the-middle attacks . [23] [24]  An important property in this context is  forward secrecy , which ensures that encrypted communications recorded in the past cannot be retrieved and decrypted should long-term secret keys or passwords be compromised in the future. Not all web servers provide forward secrecy. [25] [ needs update ] \n A site must be completely hosted over HTTPS, without having part of its contents loaded over HTTP\u00a0\u2013  for example, having scripts loaded insecurely\u00a0\u2013  or the user will be vulnerable to some attacks and surveillance. Also having only a certain page that contains sensitive information (such as a log-in page) of a website loaded over HTTPS, while having the rest of the website loaded over plain HTTP, will expose the user to attacks. On a site that has sensitive information somewhere on it, every time that site is accessed with HTTP instead of HTTPS, the user and the session will get exposed. Similarly,  cookies  on a site served through HTTPS have to have the  secure attribute  enabled. [12] \n Technical [ edit ] \n Difference from HTTP [ edit ] \n HTTPS  URLs  begin with \"https://\" and use  port  443 by default, whereas  HTTP  URLs begin with \"http://\" and use port 80 by default. \n HTTP is not encrypted and is vulnerable to man-in-the-middle and eavesdropping attacks, which can let attackers gain access to website accounts and sensitive information, and modify webpages to inject  malware  or advertisements. HTTPS is designed to withstand such attacks and is considered secure against them (with the exception of older, deprecated versions of SSL). \n Network layers [ edit ] \n HTTP operates at the highest layer of the  TCP/IP model , the  Application layer ; as does the TLS security protocol (operating as a lower sublayer of the same layer), which encrypts an HTTP message prior to transmission and decrypts a message upon arrival. Strictly speaking, HTTPS is not a separate protocol, but refers to use of ordinary  HTTP  over an  encrypted  SSL/TLS connection. \n Everything in the HTTPS message is encrypted, including the headers, and the request/response load. With the exception of the possible  CCA  cryptographic attack described in the  limitations  section below, the attacker can only know that a connection is taking place between the two parties and their domain names and IP addresses. \n Server setup [ edit ] \n To prepare a web server to accept HTTPS connections, the administrator must create a  public key certificate  for the web server. This certificate must be signed by a trusted  certificate authority  for the web browser to accept it without warning. The authority certifies that the certificate holder is the operator of the web server that presents it. Web browsers are generally distributed with a list of  signing certificates of major certificate authorities  so that they can verify certificates signed by them. \n Acquiring certificates [ edit ] \n Authoritatively signed certificates may be free [26] [27]  or cost between  8  USD [28]  and  70 USD [29]  per year (in 2012\u20132014). \n Organizations may also run their own certificate authority, particularly if they are responsible for setting up browsers to access their own sites (for example, sites on a company  intranet , or major universities). They can easily add copies of their own signing certificate to the trusted certificates distributed with the browser. \n There also exists a peer-to-peer certificate authority,  CACert . However, it is not included in the trusted root certificates of many popular browsers (e.g. Firefox, Chrome, Internet Explorer), which may cause warning messages to be displayed to end users. \n Let's Encrypt , launched in April 2016, [30]  provides free and automated SSL/TLS certificates to websites. [31]  According to the  Electronic Frontier Foundation , \"Let's Encrypt\" will make switching from HTTP to HTTPS \"as easy as issuing one command, or clicking one button.\" [32] \n Use as access control [ edit ] \n The system can also be used for client  authentication  in order to limit access to a web server to authorized users. To do this, the site administrator typically creates a certificate for each user, a certificate that is loaded into their browser. Normally, that contains the name and e-mail address of the authorized user and is automatically checked by the server on each reconnect to verify the user's identity, potentially without even entering a password. \n In case of compromised secret (private) key [ edit ] \n An important property in this context is  perfect forward secrecy  (PFS). Possessing one of the long-term asymmetric secret keys used to establish an HTTPS session should not make it easier to derive the short-term session key to then decrypt the conversation, even at a later time.  Diffie\u2013Hellman key exchange  (DHE) and  Elliptic curve Diffie\u2013Hellman  key exchange (ECDHE) are in 2013 the only ones known to have that property. Only 30% of Firefox, Opera, and Chromium Browser sessions use it, and nearly 0% of Apple's  Safari  and  Microsoft Internet Explorer  sessions. [25]  Among the larger internet providers, only Google supports PFS since 2011 (State of September 2013). [ citation needed ] \n A certificate may be revoked before it expires, for example because the secrecy of the private key has been compromised. Newer versions of popular browsers such as  Firefox , [33]   Opera , [34]  and  Internet Explorer  on  Windows Vista [35]  implement the  Online Certificate Status Protocol  (OCSP) to verify that this is not the case. The browser sends the certificate's serial number to the certificate authority or its delegate via OCSP and the authority responds, telling the browser whether the certificate is still valid. [36] \n Limitations [ edit ] \n SSL and TLS encryption can be configured in two modes:  simple  and  mutual . In simple mode, authentication is only performed by the server. The mutual version requires the user to install a personal  client certificate  in the web browser for user authentication.. [37]  In either case, the level of protection depends on the correctness of the  implementation  of software and the  cryptographic algorithms  in use. \n SSL/TLS does not prevent the indexing of the site by a  web crawler , and in some cases the  URI  of the encrypted resource can be inferred by knowing only the intercepted request/response size. [38]  This allows an attacker to have access to the  plaintext  (the publicly available static content), and the  encrypted text  (the encrypted version of the static content), permitting a  cryptographic attack . \n Because  TLS  operates at a protocol level below that of HTTP, and has no knowledge of the higher-level protocols, TLS servers can only strictly present one certificate for a particular address and port combination. [39]  In the past, this meant that it was not feasible to use  name-based virtual hosting  with HTTPS. A solution called  Server Name Indication  (SNI) exists, which sends the hostname to the server before encrypting the connection, although many old browsers do not support this extension. Support for SNI is available since  Firefox  2,  Opera  8, Safari 2.1, Google Chrome 6, and  Internet Explorer 7  on  Windows Vista . [40] [41] [42] \n From an architectural point of view: \n An SSL/TLS connection is managed by the first front machine that initiates the TLS connection. If, for any reasons (routing, traffic optimization, etc.), this front machine is not the application server and it has to decipher data, solutions have to be found to propagate user authentication information or certificate to the application server, which needs to know who is going to be connected. \n For SSL/TLS with mutual authentication, the SSL/TLS session is managed by the first server that initiates the connection. In situations where encryption has to be propagated along chained servers, session timeOut management becomes extremely tricky to implement. \n With mutual SSL/TLS, security is maximal, but on the client-side, there is no way to properly end the SSL/TLS connection and disconnect the user except by waiting for the server session to expire or closing all related client applications. \n A sophisticated type of  man-in-the-middle attack  called SSL stripping was presented at the  Blackhat  Conference 2009. This type of attack defeats the security provided by HTTPS by changing the  https:  link into an  http:  link, taking advantage of the fact that few Internet users actually type \"https\" into their browser interface: they get to a secure site by clicking on a link, and thus are fooled into thinking that they are using HTTPS when in fact they are using HTTP. The attacker then communicates in clear with the client. [43]  This prompted the development of a countermeasure in HTTP called  HTTP Strict Transport Security . \n HTTPS has been shown vulnerable to a range of  traffic analysis  attacks. Traffic analysis attacks are a type of  side-channel attack  that relies on variations in the timing and size of traffic in order to infer properties about the encrypted traffic itself. Traffic analysis is possible because SSL/TLS encryption changes the contents of traffic, but has minimal impact on the size and timing of traffic. In May 2010, a research paper by researchers from  Microsoft Research  and  Indiana University  discovered that detailed sensitive user data can be inferred from side channels such as packet sizes. More specifically, the researchers found that an eavesdropper can infer the illnesses/medications/surgeries of the user, his/her family income and investment secrets, despite HTTPS protection in several high-profile, top-of-the-line web applications in healthcare, taxation, investment and web search. [44]  Although this work demonstrated vulnerability of HTTPS to traffic analysis, the approach presented by the authors required manual analysis and focused specifically on web applications protected by HTTPS. \n History [ edit ] \n Netscape Communications  created HTTPS in 1994 for its  Netscape Navigator  web browser. [45]  Originally, HTTPS was used with the  SSL  protocol. As SSL evolved into  Transport Layer Security  (TLS), HTTPS was formally specified by  RFC 2818  in May 2000. \n See also [ edit ] \n Bullrun (decryption program)  \u2013 a secret anti-encryption program run by the U.S.  National Security Agency \n Computer security \n curl-loader \n Diameter protocol \n HTTPsec \n Moxie Marlinspike \n Opportunistic encryption \n Stunnel \n References [ edit ] \n ^   \"Secure your site with HTTPS\" .  Google Support . Google, Inc . Retrieved  February 27,  2015 . \u00a0 \n ^   \"What is HTTPS?\" .  Comodo CA Limited . Retrieved  February 27,  2015 .  Hyper Text Transfer Protocol Secure (HTTPS) is the secure version of HTTP [...] \u00a0 \n ^   Network Working Group (May 2000).  \"HTTP Over TLS\" . The Internet Engineering Task Force . Retrieved  February 27,  2015 . \u00a0 \n ^   \"Enabling HTTP Over SSL\" . Adobe Systems Incorporated . Retrieved  February 27,  2015 . \u00a0 \n ^  a   b   c   \"HTTPS Everywhere FAQ\" . Retrieved  3 May  2012 . \u00a0 \n ^   \"Hotel Wifi JavaScript Injection\" . Retrieved  24 July  2012 . \u00a0 \n ^   The Tor Project, Inc.  \"Tor\" .  torproject.org . \u00a0 \n ^   Konigsburg, Eitan; Pant, Rajiv; Kvochko, Elena (November 13, 2014).  \"Embracing HTTPS\" . The New York Times . Retrieved  February 27,  2015 . \u00a0 \n ^   Gallagher, Kevin (September 12, 2014).  \"Fifteen Months After the NSA Revelations, Why Aren't More News Organizations Using HTTPS?\" . Freedom of the Press Foundation . Retrieved  February 27,  2015 . \u00a0 \n ^   \"HTTPS as a ranking signal\" .  Google Webmaster Central Blog . Google Inc. August 6, 2014 . Retrieved  February 27,  2015 .  You can make your site secure with HTTPS (Hypertext Transfer Protocol Secure) [...] \u00a0 \n ^   Grigorik, Ilya; Far, Pierre (June 26, 2014).  \"Google I/O 2014 - HTTPS Everywhere\" . Google Developers . Retrieved  February 27,  2015 . \u00a0 \n ^  a   b   c   \"How to Deploy HTTPS Correctly\" . Retrieved  13 June  2012 . \u00a0 \n ^   \"HTTP Strict Transport Security\" .  Mozilla Developer Network . \u00a0 \n ^   \"HTTPS usage statistics on top websites\" . statoperator.com . Retrieved  2017-11-03 . \u00a0 \n ^   \"SSL Pulse\" . Trustworthy Internet Movement. 2015-10-03 . Retrieved  2015-10-19 . \u00a0 \n ^   Aas, Josh (22 June 2016).  \"Progress Towards 100% HTTPS, June 2016\" .  Lets Encrypt . Retrieved  23 July  2016 . \u00a0 \n ^   \"We're Halfway to Encrypting the Entire Web\" . Electronic Frontier Foundation. 21 February 2017 . Retrieved  3 May  2017 . \u00a0 \n ^   Finley, Klint (January 31, 2017).  \"Half the Web Is Now Encrypted. That Makes Everyone Safer\" . WIRED . Retrieved  1 May  2017 . \u00a0 \n ^   \"Firefox 14.0.1 Release Notes\" . Retrieved  24 July  2012 . \u00a0 \n ^   \"Firefox Rolling Out HTTPS Google search\" . Retrieved  24 July  2012 . \u00a0 \n ^   Peter Eckersley:  Encrypt the Web with the HTTPS Everywhere Firefox Extension  EFF blog, 17 June 2010 \n ^   HTTPS Everywhere  EFF projects \n ^   Law Enforcement Appliance Subverts SSL , Wired, 2010-04-03. \n ^   New Research Suggests That Governments May Fake SSL Certificates , EFF, 2010-03-24. \n ^  a   b   SSL: Intercepted today, decrypted tomorrow , Netcraft, 2013-06-25. \n ^   \"Free SSL Certificates from a Free Certificate Authority\" . sslshopper.com . Retrieved  2009-10-24 . \u00a0 \n ^   Justin Fielding (2006-07-16).  \"Secure Outlook Web Access with (free) SSL: Part 1\" .  TechRepublic . Retrieved  2009-10-24 . \u00a0 \n ^   \"Namecheap.com SSL Services\" . namecheap . Retrieved  30 Jan  2012 . \u00a0 \n ^   \"Secure Site Pro with SSL Certificate\" . Retrieved  August 23,  2014 . \u00a0 \n ^   Catalin Cimpanu.  \"Let's Encrypt Launched Today, Currently Protects 3.8 Million Domains\" . Softpedia News . Retrieved  April 12,  2016 . \u00a0 \n ^   Kerner, Sean Michael (November 18, 2014).  \"Let's Encrypt Effort Aims to Improve Internet Security\" .  eWeek.com . Quinstreet Enterprise . Retrieved  February 27,  2015 . \u00a0 \n ^   Eckersley, Peter (November 18, 2014).  \"Launching in 2015: A Certificate Authority to Encrypt the Entire Web\" .  Electronic Frontier Foundation . Retrieved  February 27,  2015 . \u00a0 \n ^   \"Mozilla Firefox Privacy Policy\" .  Mozilla Foundation . 27 April 2009. Archived from  the original  on 26 May 2009 . Retrieved  13 May  2009 . \u00a0 \n ^   \"Opera 8 launched on FTP\" .  Softpedia . 19 April 2005 . Retrieved  13 May  2009 . \u00a0 \n ^   Lawrence, Eric (31 January 2006).  \"HTTPS Security Improvements in Internet Explorer 7\" .  MSDN . Retrieved  13 May  2009 . \u00a0 \n ^   Myers, M; Ankney, R; Malpani, A; Galperin, S; Adams, C (June 1999).  \"Online Certificate Status Protocol \u2013 OCSP\" .  Internet Engineering Task Force . Retrieved  13 May  2009 . \u00a0 \n ^   \"Manage client certificates on Chrome devices - Chrome for business and education Help\" .  support.google.com . Retrieved  2016-10-13 . \u00a0 \n ^   Pusep, Stanislaw (31 July 2008).  \"The Pirate Bay un-SSL\" . Archived from  the original  on 8 March 2009 . Retrieved  6 March  2009 . \u00a0 \n ^   \"SSL/TLS Strong Encryption: FAQ\" .  apache.org . \u00a0 \n ^   Lawrence, Eric (22 October 2005).  \"Upcoming HTTPS Improvements in Internet Explorer 7 Beta 2\" .  Microsoft . Retrieved  12 May  2009 . \u00a0 \n ^   \"Server Name Indication (SNI)\" .  inside aebrahim's head . \u00a0 \n ^   Pierre, Julien.  \"Browser support for TLS server name indication\"   (2001-12-19) .  Bugzilla . Mozilla Foundation . Retrieved  2010-12-15 . \u00a0 \n ^   \"sslstrip\" . Retrieved  2011-11-26 . \u00a0 \n ^   Shuo Chen; Rui Wang; XiaoFeng Wang; Kehuan Zhang (May 2010).  \"Side-Channel Leaks in Web Applications: a Reality Today, a Challenge Tomorrow\"   (PDF) .  IEEE  Symposium on Security & Privacy 2010. \u00a0 \n ^   Walls, Colin (2005).  Embedded software . Newnes. p.\u00a0344.  ISBN \u00a0 0-7506-7954-9 . \u00a0 \n External links [ edit ] \n Wikimedia Commons has media related to  HTTPS . \n RFC 2818: HTTP Over TLS \n RFC 5246: The Transport Layer Security Protocol 1.2 \n RFC 6101: The Secure Sockets Layer (SSL) Protocol Version 3.0 \n v \n t \n e \n Uniform Resource Identifier  (URI) schemes \n Official \n about \n acct \n crid \n data \n file \n geo \n gopher \n http \n https \n info \n ldap \n mailto \n sip / sips \n tag \n tel \n urn \n view-source \n wais \n ws / wss \n Unofficial \n coffee \n ed2k \n feed \n irc / irc6 / ircs \n ldaps \n magnet \n ymsgr \n Protocol list \n v \n t \n e \n Web browsers \n Comparison \n lightweight \n History \n List \n for Unix \n Timeline \n Usage share \n Features \n Ad filtering \n Augmented browsing \n Bookmarks \n Bookmarklet \n Live bookmark \n Smart Bookmarks \n Browser extension \n Browser security \n Browser synchronizer \n comparison \n Cookies \n Download manager \n Favicon \n Incremental search \n Plug-in \n Privacy mode \n Tabs \n Universal Edit Button \n Web standards \n Acid tests \n Cascading Style Sheets \n HTML \n HTML5 \n JavaScript \n MathML \n SVG \n WebGL \n XHTML \n Protocols \n HTTP \n HTTPS \n OCSP \n SPDY \n SSL/TLS \n WebSocket \n WPAD \n Related topics \n BrowserChoice.eu \n CRL \n iLoo \n Internet suite \n Man-in-the-browser \n Mobile Web \n Offline reader \n PAC \n Pwn2Own \n Rich Internet application \n Site-specific browser \n Widget \n World Wide Web \n XML \n Desktop \n Blink -based \n Chromium \n Brave \n Chrome \n Dragon \n Opera \n QupZilla \n Sleipnir \n Slimjet \n SRWare Iron \n UC Browser \n Vivaldi \n Yandex Browser \n Sputnik \n SafeZone \n Gecko -based \n AT&T Pogo \n Avant \n Camino \n Firefox \n Conkeror \n GNU IceCat \n IceDragon \n Swiftfox \n Swiftweasel \n TenFourFox \n Timberwolf \n Tor Browser \n Waterfox \n xB Browser \n Galeon \n Ghostzilla \n K-Meleon \n Kazehakase \n Kirix Strata \n Lotus Symphony \n Lunascape \n Mozilla \n Beonex Communicator \n Classilla \n Netscape \n SeaMonkey \n Trident -based \n AOL Explorer \n Avant \n Deepnet Explorer \n GreenBrowser \n Internet Explorer \n Lunascape \n Maxthon \n MediaBrowser \n MenuBox \n NeoPlanet \n NetCaptor \n SlimBrowser \n SpaceTime \n UltraBrowser \n WebbIE \n ZAC Browser \n WebKit -based \n Arora \n Avant \n Dooble \n Epic \n Flock \n Fluid \n iCab \n Konqueror \n Lunascape \n Maxthon \n Midori \n OmniWeb \n Origyn Web Browser \n Otter Browser \n QtWeb \n rekonq \n Safari \n Shiira \n SlimBoat \n surf \n Torch \n Uzbl \n Epiphany \n WebPositive \n xombrero \n Text -based \n ELinks \n Emacs/W3 \n Line Mode Browser \n Links \n Lynx \n w3m \n Other \n abaco \n Amaya \n Arachne \n Arena \n Charon \n Dillo \n eww \n Gazelle \n HotJava \n IBM Home Page Reader \n IBrowse \n KidZui \n Microsoft Edge \n Mosaic \n Mothra \n NetPositive \n NetSurf \n Pale Moon \n Qihoo 360 Secure Browser \n Mobile \n Blink -based \n Android Browser \n Chromium \n Brave \n Chrome for Android \n Opera Mobile \n Silk \n Firefox Focus for Android \n Gecko -based \n Firefox for Android \n MicroB \n Minimo \n Presto -based \n Opera Mini \n Trident -based \n Maxthon \n WebKit -based \n BOLT \n Dolphin Browser \n Chrome for iOS \n Firefox for iOS \n Firefox Focus for iOS \n Maxthon \n Mercury Browser \n Nokia Browser for Symbian \n Rockmelt \n Safari \n Steel \n Other \n Blazer \n CM Browser \n Deepfish \n ibisBrowser \n Internet Explorer Mobile \n Iris Browser \n Konqueror Embedded \n Microsoft Edge \n NetFront \n Skweezer \n Skyfire \n Teashark \n ThunderHawk \n UC Browser \n Vision \n WinWAP \n Television  and  video game console \n Gecko -based \n Kylo \n Presto -based \n Internet Channel \n WebKit -based \n Google TV \n Nintendo 3DS Internet Browser \n Nintendo DS & DSi Browser \n NetFront \n Steam Overlay \n Wii U Internet Browser \n Other \n MSN TV \n Software no longer in development shown in  italics \n   Category \n   Commons \n   Internet portal \n   Software portal \n v \n t \n e \n TLS and SSL \n Protocols and technologies \n Transport Layer Security / Secure Sockets Layer  (TLS/SSL) \n Datagram Transport Layer Security  (DTLS) \n DNS Certification Authority Authorization  (CAA) \n DNS-based Authentication of Named Entities  (DANE) \n HTTPS \n HTTP Public Key Pinning  (HPKP) \n HTTP Strict Transport Security  (HSTS) \n OCSP stapling \n Perfect forward secrecy \n Server Name Indication  (SNI) \n STARTTLS \n Application-Layer Protocol Negotiation  (ALPN) \n Public-key infrastructure \n Automated Certificate Management Environment  (ACME) \n Certificate authority  (CA) \n CA/Browser Forum \n Certificate policy \n Certificate revocation list  (CRL) \n Domain-validated certificate  (DV) \n Extended Validation Certificate  (EV) \n Online Certificate Status Protocol  (OCSP) \n Public key certificate \n Public-key cryptography \n Public key infrastructure  (PKI) \n Root certificate \n Self-signed certificate \n See also \n Domain Name System Security Extensions  (DNSSEC) \n Internet Protocol Security  (IPsec) \n Secure Shell  (SSH) \n History \n Export of cryptography from the United States \n Server-Gated Cryptography \n Implementations \n Bouncy Castle \n BoringSSL \n Botan \n CryptoComply by SafeLogic \n cryptlib \n GnuTLS \n JSSE \n LibreSSL \n MatrixSSL \n mbed TLS \n NSS \n OpenSSL \n RSA BSAFE \n SChannel \n SSLeay \n stunnel \n wolfSSL \n Notaries \n Certificate Transparency \n Convergence \n HTTPS Everywhere / SSL Observatory \n Perspectives Project \n Vulnerabilities \n Theory \n Man-in-the-middle attack \n Padding oracle attack \n Cipher \n Bar mitzvah attack \n Protocol \n BEAST \n BREACH \n CRIME \n DROWN \n Logjam \n POODLE  (in regards to SSL 3.0) \n Implementation \n Certificate authority compromise \n Random number generator attacks \n FREAK \n goto fail \n Heartbleed \n Lucky Thirteen attack \n POODLE  (in regards to TLS 1.0) \n v \n t \n e \n Internet censorship circumvention  technologies \n Background \n Internet censorship \n Internet censorship in China \n National intranet \n Censorship and blocking technologies\n IP address blocking \n DNS cache pollution \n Wordfilter \n Great Firewall of China \n Blocks on specific websites\n Wikipedia \n Facebook \n Twitter \n Principles \n With a  proxy server \n P2P \n Web proxies \n SSH \n VPN \n PAC \n Without a proxy server \n HTTPS \n IPv6 transition mechanism \n hosts \n DNSCrypt \n Anti-censorship software \n Free software \n Lantern \n Psiphon \n GoAgent \n GoProxy \n Shadowsocks \n V2Ray \n VPN Gate \n Proprietary software \n Freegate \n Ultrasurf \n Hotspot Shield \n fqrouter \n GPass \n Xiaoyaoyou \n Huofenghuang \n Garden Networks \n Puff \n West Wing plan \n Telex \n FreeBrowser \n Integrated into browsers \n X browser  (supporting Android only) \n Xingyuan browser  (supporting Windows only) \n Changyou Wuxian browser \n Xskywalker  (Tianxing browser) \n Browser extensions \n uProxy \n Hongxing \n Anonymity \n Anonymous software \n Tor \n I2P \n JAP \n Anonymous P2P  network \n ZeroNet \n Freenet \n StealthNet \n Relevant organizations \n GreatFire \n FreeWeibo \n FreeBrowser \n Turkey Blocks \n Relevant events \n 2016 Chinese meme war on Facebook \n Reference \n Program Think Blog \n Great Cannon \n Strike through : the maintainers have stopped maintenance \n\t\t\t\t\t\tRetrieved from \" https://en.wikipedia.org/w/index.php?title=HTTPS&oldid=812066653 \"\t\t\t\t\t \n Categories :  Hypertext Transfer Protocol Cryptographic protocols Secure communication URI schemes Transport Layer Security Hidden categories:  All articles with unsourced statements Articles with unsourced statements from November 2017 Articles containing potentially dated statements from November 2017 All articles containing potentially dated statements Wikipedia articles in need of updating from February 2015 All Wikipedia articles in need of updating Articles with unsourced statements from September 2013 Pages using RFC magic links   \n Navigation menu \n Personal tools \n Not logged in Talk Contributions Create account Log in   \n Namespaces \n Article Talk   \n Variants \n Views \n Read Edit View history   \n More \n Search \n Navigation \n Main page Contents Featured content Current events Random article Donate to Wikipedia Wikipedia store   \n Interaction \n Help About Wikipedia Community portal Recent changes Contact page   \n Tools \n What links here Related changes Upload file Special pages Permanent link Page information Wikidata item Cite this page   \n Print/export \n Create a book Download as PDF Printable version   \n In other projects \n Wikimedia Commons Meta-Wiki Wikibooks   \n Languages \n Afrikaans \u0627\u0644\u0639\u0631\u0628\u064a\u0629 Az\u0259rbaycanca \u09ac\u09be\u0982\u09b2\u09be \u0411\u0435\u043b\u0430\u0440\u0443\u0441\u043a\u0430\u044f \u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438 Catal\u00e0 \u010ce\u0161tina Dansk Deutsch Eesti \u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac Espa\u00f1ol Euskara \u0641\u0627\u0631\u0633\u06cc F\u00f8royskt Fran\u00e7ais Galego \ud55c\uad6d\uc5b4 \u0540\u0561\u0575\u0565\u0580\u0565\u0576 Hrvatski Bahasa Indonesia Italiano \u05e2\u05d1\u05e8\u05d9\u05ea \u049a\u0430\u0437\u0430\u049b\u0448\u0430 Latvie\u0161u Magyar \u041c\u043e\u043d\u0433\u043e\u043b \u1019\u103c\u1014\u103a\u1019\u102c\u1018\u102c\u101e\u102c Nederlands \u65e5\u672c\u8a9e Norsk O\u02bbzbekcha/\u045e\u0437\u0431\u0435\u043a\u0447\u0430 Polski Portugu\u00eas Rom\u00e2n\u0103 \u0420\u0443\u0441\u0441\u043a\u0438\u0439 Scots Sloven\u010dina Sloven\u0161\u010dina \u0421\u0440\u043f\u0441\u043a\u0438 / srpski Srpskohrvatski / \u0441\u0440\u043f\u0441\u043a\u043e\u0445\u0440\u0432\u0430\u0442\u0441\u043a\u0438 Suomi Svenska Tagalog \u0ba4\u0bae\u0bbf\u0bb4\u0bcd \u0e44\u0e17\u0e22 T\u00fcrk\u00e7e \u0423\u043a\u0440\u0430\u0457\u043d\u0441\u044c\u043a\u0430 Ti\u1ebfng Vi\u1ec7t \u7cb5\u8a9e \u4e2d\u6587   \n Edit links   \n  This page was last edited on 25 November 2017, at 20:15. \n Text is available under the  Creative Commons Attribution-ShareAlike License ;\nadditional terms may apply.  By using this site, you agree to the  Terms of Use  and  Privacy Policy . Wikipedia\u00ae is a registered trademark of the  Wikimedia Foundation, Inc. , a non-profit organization. \n Privacy policy \n About Wikipedia \n Disclaimers \n Contact Wikipedia \n Developers \n Cookie statement \n Mobile view"}